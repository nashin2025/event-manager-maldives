{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a Maldives Event Manager application built as a full-stack React/Express web application for managing environmental conservation events across the Maldives archipelago. The system allows users to organize, track, and coordinate events on different islands and atolls, with role-based access control and comprehensive event management capabilities.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite for build tooling\n- **UI Framework**: shadcn/ui components built on top of Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for theming\n- **State Management**: TanStack React Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js web framework\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL via Neon serverless database\n- **Authentication**: Replit Auth with OpenID Connect integration\n- **Session Management**: Express sessions stored in PostgreSQL using connect-pg-simple\n\n## Database Schema Design\n- **Users Table**: Stores user profiles with role-based permissions (member, coordinator, admin)\n- **Events Table**: Central event management with island/atoll location tracking and status management\n- **Islands Table**: Geographic reference data for Maldives islands with visit tracking\n- **Event Participants**: Many-to-many relationship between users and events\n- **Sessions Table**: Required for Replit Auth session persistence\n\n## Authentication & Authorization\n- **Provider**: Replit Auth using OpenID Connect protocol\n- **Session Storage**: PostgreSQL-backed sessions for scalability\n- **Role System**: Three-tier permission structure (member, coordinator, admin)\n- **Route Protection**: Middleware-based authentication checks on all API endpoints\n\n## API Architecture\n- **Pattern**: RESTful API design with consistent error handling\n- **Data Validation**: Zod schemas shared between client and server\n- **Error Handling**: Centralized error middleware with proper HTTP status codes\n- **Request Logging**: Structured logging for API requests with performance metrics\n\n# External Dependencies\n\n## Core Infrastructure\n- **Database**: Neon PostgreSQL serverless database for scalable data storage\n- **Authentication**: Replit Auth service for user management and SSO\n- **Build Tool**: Vite for fast development builds and HMR\n\n## Key Libraries\n- **UI Components**: Radix UI primitives for accessible component foundations\n- **Database**: Drizzle ORM with connection pooling via @neondatabase/serverless\n- **Validation**: Zod for runtime type checking and schema validation\n- **Date Handling**: date-fns for date manipulation and formatting\n- **Styling**: Tailwind CSS with PostCSS for utility-first styling\n\n## Development Tools\n- **TypeScript**: Full type safety across frontend and backend\n- **ESBuild**: Production bundling for server code\n- **tsx**: Development server for TypeScript execution\n- **Replit Plugins**: Development environment integration and error handling","size_bytes":3330},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport { sql } from 'drizzle-orm';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n\n// Initialize audit log table if it doesn't exist\nconst initializeAuditTable = async () => {\n  try {\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS equipment_audit_log (\n        id varchar PRIMARY KEY DEFAULT gen_random_uuid(),\n        equipment_id varchar NOT NULL REFERENCES equipment(id) ON DELETE CASCADE,\n        action varchar NOT NULL,\n        field_name varchar,\n        old_value text,\n        new_value text,\n        changed_by varchar NOT NULL REFERENCES users(id),\n        changed_at timestamp DEFAULT now(),\n        notes text\n      );\n    `);\n    console.log('Equipment audit log table initialized');\n  } catch (error) {\n    console.error('Error creating equipment audit log table:', error);\n  }\n};\n\n// Initialize the table\ninitializeAuditTable();","size_bytes":1292},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  try {\n    const server = await registerRoutes(app);\n\n    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n\n      console.error('Server error:', err);\n      \n      // Only send response if it hasn't been sent already\n      if (!res.headersSent) {\n        res.status(status).json({ message });\n      }\n      \n      // Don't throw the error after sending response - just log it\n    });\n\n    // importantly only setup vite in development and after\n    // setting up all the other routes so the catch-all route\n    // doesn't interfere with the other routes\n    if (app.get(\"env\") === \"development\") {\n      await setupVite(app, server);\n    } else {\n      serveStatic(app);\n    }\n\n    // ALWAYS serve the app on the port specified in the environment variable PORT\n    // Other ports are firewalled. Default to 5000 if not specified.\n    // this serves both the API and the client.\n    // It is the only port that is not firewalled.\n    const port = parseInt(process.env.PORT || '5000', 10);\n    \n    server.listen({\n      port,\n      host: \"0.0.0.0\",\n      reusePort: true,\n    }, () => {\n      log(`serving on port ${port}`);\n      \n      // Server initialization complete\n    });\n\n    // Handle server errors\n    server.on('error', (err: NodeJS.ErrnoException) => {\n      console.error('Server error:', err);\n      if (err.code === 'EADDRINUSE') {\n        console.error(`Port ${port} is already in use`);\n        process.exit(1);\n      }\n    });\n\n  } catch (error) {\n    console.error('Failed to initialize server:', error);\n    process.exit(1);\n  }\n})().catch((error) => {\n  console.error('Unhandled error during server initialization:', error);\n  process.exit(1);\n});\n","size_bytes":2871},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    // Use the first configured domain for localhost/development\n    const hostname = req.hostname === \"127.0.0.1\" || req.hostname === \"localhost\" \n      ? process.env.REPLIT_DOMAINS!.split(\",\")[0]\n      : req.hostname;\n    \n    passport.authenticate(`replitauth:${hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    // Use the first configured domain for localhost/development\n    const hostname = req.hostname === \"127.0.0.1\" || req.hostname === \"localhost\" \n      ? process.env.REPLIT_DOMAINS!.split(\",\")[0]\n      : req.hostname;\n    \n    passport.authenticate(`replitauth:${hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4696},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { \n  ObjectStorageService,\n  ObjectNotFoundError,\n} from \"./objectStorage\";\nimport { insertEventSchema, insertIslandSchema, insertEquipmentSchema, insertUserSchema } from \"@shared/schema\";\nimport { hasPermission, UserRole, Permission } from \"@shared/permissions\";\nimport { z } from \"zod\";\n\ninterface ConnectedClient {\n  ws: WebSocket;\n  userId: string;\n  userName: string;\n  isNotificationOnly?: boolean;\n}\n\n// Admin middleware to check if user is admin\nconst requireAdmin = async (req: any, res: any, next: any) => {\n  try {\n    if (!req.user?.claims?.sub) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    \n    const user = await storage.getUser(req.user.claims.sub);\n    if (!user || user.role !== 'admin') {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n    \n    next();\n  } catch (error) {\n    console.error(\"Error checking admin status:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\n// Middleware to block attachment users from write operations\nconst requireWriteAccess = async (req: any, res: any, next: any) => {\n  try {\n    if (!req.user?.claims?.sub) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    \n    const user = await storage.getUser(req.user.claims.sub);\n    if (!user) {\n      return res.status(401).json({ message: \"User not found\" });\n    }\n    \n    // Block attachment users from write operations\n    if (user.role === 'attachment') {\n      return res.status(403).json({ message: \"Attachment users have read-only access\" });\n    }\n    \n    next();\n  } catch (error) {\n    console.error(\"Error checking write access:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n};\n\n// Generic permission-based middleware factory\nconst requirePermission = (permission: keyof Permission) => {\n  return async (req: any, res: any, next: any) => {\n    try {\n      if (!req.user?.claims?.sub) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n      \n      if (!hasPermission(user.role as UserRole, permission)) {\n        return res.status(403).json({ message: `Access denied: ${permission} permission required` });\n      }\n      \n      next();\n    } catch (error) {\n      console.error(`Error checking ${permission} permission:`, error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  };\n};\n\n// Specific middleware for common permissions\nconst requireViewEquipment = requirePermission('viewEquipment');\nconst requireEditEquipment = requirePermission('editEquipment');\nconst requireEditEvents = requirePermission('editEvents');\nconst requireEditMembers = requirePermission('editMembers');\nconst requireAdminPanel = requirePermission('accessAdminPanel');\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check endpoints for deployment readiness (both paths for compatibility)\n  const healthHandler = (req: any, res: any) => {\n    res.status(200).json({ \n      status: 'ok', \n      timestamp: new Date().toISOString(),\n      uptime: process.uptime()\n    });\n  };\n  \n  app.get('/health', healthHandler);\n  app.head('/health', healthHandler);\n  app.get('/api/health', healthHandler);\n\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/users\", isAuthenticated, async (req: any, res) => {\n    try {\n      // Allow all authenticated users to view user directory\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/users\", isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can create users\" });\n      }\n\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      res.status(201).json(user);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid user data\", errors: error.errors });\n      }\n      console.error(\"Error creating user:\", error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id/role\", isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can change user roles\" });\n      }\n\n      const { role } = req.body;\n      const validRoles = ['agent', 'coordinator', 'admin', 'attachment'];\n      if (!validRoles.includes(role)) {\n        return res.status(400).json({ message: \"Invalid role\" });\n      }\n\n      const user = await storage.updateUserRole(req.params.id, role);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating user role:\", error);\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can edit users\" });\n      }\n\n      const updateSchema = insertUserSchema.partial();\n      let userData = updateSchema.parse(req.body);\n      \n      // Convert empty service number to null to avoid unique constraint violation\n      if (userData.serviceNumber === '') {\n        userData.serviceNumber = null;\n      }\n      \n      const user = await storage.updateUser(req.params.id, userData);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json(user);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid user data\", errors: error.errors });\n      }\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Profile management route - users can update their own profile\n  app.patch(\"/api/profile\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const allowedFields = ['firstName', 'lastName', 'email', 'mobile', 'serviceNumber', 'profileImageUrl'];\n      \n      // Filter only allowed fields for profile updates\n      const filteredData = Object.fromEntries(\n        Object.entries(req.body).filter(([key]) => allowedFields.includes(key))\n      );\n\n      const profileSchema = insertUserSchema.pick({\n        firstName: true,\n        lastName: true,\n        email: true,\n        mobile: true,\n        serviceNumber: true,\n        profileImageUrl: true\n      }).partial();\n\n      let userData = profileSchema.parse(filteredData);\n      \n      // Convert empty service number to null to avoid unique constraint violation\n      if (userData.serviceNumber === '') {\n        userData.serviceNumber = null;\n      }\n      \n      const user = await storage.updateUser(userId, userData);\n      res.json(user);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid profile data\", errors: error.errors });\n      }\n      console.error(\"Error updating profile:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Delete user route - admin only\n  app.delete(\"/api/users/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin' && currentUser?.role !== 'coordinator') {\n        return res.status(403).json({ message: \"Only admins and coordinators can delete users\" });\n      }\n\n      // Prevent self-deletion\n      if (req.params.id === req.user.claims.sub) {\n        return res.status(400).json({ message: \"You cannot delete your own account\" });\n      }\n\n      const result = await storage.deleteUser(req.params.id, currentUser.role);\n      if (!result.success) {\n        if (result.error === \"User not found\") {\n          return res.status(404).json({ message: result.error });\n        } else if (result.error === \"Coordinators cannot delete admin users\" || \n                   result.error === \"Cannot delete the last admin user\") {\n          return res.status(403).json({ message: result.error });\n        } else {\n          return res.status(400).json({ message: result.error || \"Failed to delete user\" });\n        }\n      }\n\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // User approval routes - admin only\n  app.patch(\"/api/users/:id/approve\", isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can approve users\" });\n      }\n\n      const user = await storage.approveUser(req.params.id);\n      res.json({ message: \"User approved successfully\", user });\n    } catch (error) {\n      console.error(\"Error approving user:\", error);\n      res.status(500).json({ message: \"Failed to approve user\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id/reject\", isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can reject users\" });\n      }\n\n      const user = await storage.rejectUser(req.params.id);\n      res.json({ message: \"User rejected successfully\", user });\n    } catch (error) {\n      console.error(\"Error rejecting user:\", error);\n      res.status(500).json({ message: \"Failed to reject user\" });\n    }\n  });\n\n  // Get pending users route - admin only  \n  app.get(\"/api/users/pending\", isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can view pending users\" });\n      }\n\n      const pendingUsers = await storage.getUsersByApprovalStatus('pending');\n      res.json(pendingUsers);\n    } catch (error) {\n      console.error(\"Error fetching pending users:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending users\" });\n    }\n  });\n\n  // Chat message management routes - admin only\n  app.get(\"/api/chat/messages\", isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can view all chat messages\" });\n      }\n\n      const limit = parseInt(req.query.limit as string) || 100;\n      const messages = await storage.getChatMessages(limit);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching chat messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch chat messages\" });\n    }\n  });\n\n  app.delete(\"/api/chat/messages/:id\", isAuthenticated, requireWriteAccess, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can delete chat messages\" });\n      }\n\n      const success = await storage.deleteChatMessage(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Chat message not found\" });\n      }\n\n      res.json({ message: \"Chat message deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting chat message:\", error);\n      res.status(500).json({ message: \"Failed to delete chat message\" });\n    }\n  });\n\n  app.delete(\"/api/chat/messages/user/:userId\", isAuthenticated, requireWriteAccess, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can delete user chat messages\" });\n      }\n\n      const deletedCount = await storage.deleteChatMessagesByUserId(req.params.userId);\n      res.json({ \n        message: `Successfully deleted ${deletedCount} chat messages from user`,\n        deletedCount \n      });\n    } catch (error) {\n      console.error(\"Error deleting user chat messages:\", error);\n      res.status(500).json({ message: \"Failed to delete user chat messages\" });\n    }\n  });\n\n  // Chat read status endpoints\n  app.post(\"/api/chat/mark-read\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { lastReadMessageId } = req.body;\n      if (!lastReadMessageId) {\n        return res.status(400).json({ message: \"lastReadMessageId is required\" });\n      }\n\n      const userId = req.user.claims.sub;\n      const readStatus = await storage.markMessagesAsRead(userId, lastReadMessageId);\n      res.json(readStatus);\n    } catch (error) {\n      console.error(\"Error marking messages as read:\", error);\n      res.status(500).json({ message: \"Failed to mark messages as read\" });\n    }\n  });\n\n  app.get(\"/api/chat/unread-count\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const unreadCount = await storage.getUnreadMessageCount(userId);\n      \n      // Also get the latest message ID for marking as read\n      const latestMessages = await storage.getChatMessages(1);\n      const latestMessageId = latestMessages.length > 0 ? latestMessages[0].id : null;\n      \n      res.json({ unreadCount, latestMessageId });\n    } catch (error) {\n      console.error(\"Error getting unread message count:\", error);\n      res.status(500).json({ message: \"Failed to get unread message count\" });\n    }\n  });\n\n  // Object storage routes for profile images\n  app.get(\"/objects/:objectPath(*)\", isAuthenticated, async (req: any, res) => {\n    const userId = req.user?.claims?.sub;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(\n        req.path,\n      );\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        userId: userId,\n        requestedPermission: \"read\" as any,\n      });\n      if (!canAccess) {\n        return res.sendStatus(401);\n      }\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  app.post(\"/api/objects/upload\", isAuthenticated, requireWriteAccess, async (req: any, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error: any) {\n      console.error('Error getting upload URL:', error);\n      res.status(500).json({ error: 'Failed to get upload URL: ' + error.message });\n    }\n  });\n\n  app.post(\"/api/objects/process\", isAuthenticated, requireWriteAccess, async (req: any, res) => {\n    try {\n      if (!req.body.photoUrl) {\n        return res.status(400).json({ error: \"photoUrl is required\" });\n      }\n\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        req.body.photoUrl,\n        {\n          owner: req.user.claims.sub,\n          visibility: req.body.visibility || \"public\",\n        },\n      );\n\n      res.status(200).json({\n        objectPath: objectPath\n      });\n    } catch (error) {\n      console.error(\"Error processing object:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/profile/image\", isAuthenticated, async (req: any, res) => {\n    if (!req.body.profileImageURL) {\n      return res.status(400).json({ error: \"profileImageURL is required\" });\n    }\n\n    const userId = req.user.claims.sub;\n\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        req.body.profileImageURL,\n        {\n          owner: userId,\n          visibility: \"public\",\n        },\n      );\n\n      // Update user profile with the new image URL\n      const user = await storage.updateUser(userId, {\n        profileImageUrl: objectPath,\n      });\n\n      res.status(200).json({\n        objectPath: objectPath,\n        user: user,\n      });\n    } catch (error) {\n      console.error(\"Error setting profile image:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Event routes\n  app.get(\"/api/events\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { status, island } = req.query;\n      let events;\n      \n      if (status) {\n        events = await storage.getEventsByStatus(status as string);\n      } else if (island) {\n        events = await storage.getEventsByIsland(island as string);\n      } else {\n        events = await storage.getEvents();\n      }\n      \n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n      res.status(500).json({ message: \"Failed to fetch events\" });\n    }\n  });\n\n  app.get(\"/api/events/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const event = await storage.getEvent(req.params.id);\n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      res.json(event);\n    } catch (error) {\n      console.error(\"Error fetching event:\", error);\n      res.status(500).json({ message: \"Failed to fetch event\" });\n    }\n  });\n\n  app.post(\"/api/events\", isAuthenticated, requireWriteAccess, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role === 'agent' || currentUser?.role === 'attachment') {\n        return res.status(403).json({ message: \"Agents and attachments cannot create events\" });\n      }\n\n      let eventData = insertEventSchema.parse({\n        ...req.body,\n        createdBy: req.user.claims.sub\n      });\n\n      // If photo URL is provided, process it to set proper ACL and get canonical path\n      if (eventData.photoUrl) {\n        try {\n          const objectStorageService = new ObjectStorageService();\n          const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n            eventData.photoUrl,\n            {\n              owner: req.user.claims.sub,\n              visibility: \"public\",\n            },\n          );\n          eventData.photoUrl = objectPath;\n        } catch (photoError) {\n          console.error(\"Error processing event photo:\", photoError);\n          // Continue with raw URL if processing fails\n        }\n      }\n      \n      const event = await storage.createEvent(eventData);\n      res.status(201).json(event);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid event data\", errors: error.errors });\n      }\n      console.error(\"Error creating event:\", error);\n      res.status(500).json({ message: \"Failed to create event\" });\n    }\n  });\n\n  app.patch(\"/api/events/:id\", isAuthenticated, requireWriteAccess, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      const event = await storage.getEvent(req.params.id);\n      \n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      \n      if (currentUser?.role === 'agent' || currentUser?.role === 'attachment' || \n          (currentUser?.role === 'coordinator' && event.createdBy !== currentUser.id)) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      const updateData = insertEventSchema.partial().parse(req.body);\n      const updatedEvent = await storage.updateEvent(req.params.id, updateData);\n      res.json(updatedEvent);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid event data\", errors: error.errors });\n      }\n      console.error(\"Error updating event:\", error);\n      res.status(500).json({ message: \"Failed to update event\" });\n    }\n  });\n\n  app.delete(\"/api/events/:id\", isAuthenticated, requireWriteAccess, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      const event = await storage.getEvent(req.params.id);\n      \n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      \n      if (currentUser?.role !== 'admin' && \n          (currentUser?.role === 'coordinator' && event.createdBy !== currentUser.id)) {\n        return res.status(403).json({ message: \"Insufficient permissions\" });\n      }\n\n      await storage.deleteEvent(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting event:\", error);\n      res.status(500).json({ message: \"Failed to delete event\" });\n    }\n  });\n\n  // Event participant routes\n  app.post(\"/api/events/:id/participants\", isAuthenticated, requireWriteAccess, async (req: any, res) => {\n    try {\n      const participant = await storage.addEventParticipant(req.params.id, req.user.claims.sub);\n      res.status(201).json(participant);\n    } catch (error) {\n      console.error(\"Error joining event:\", error);\n      res.status(500).json({ message: \"Failed to join event\" });\n    }\n  });\n\n  app.delete(\"/api/events/:id/participants\", isAuthenticated, requireWriteAccess, async (req: any, res) => {\n    try {\n      await storage.removeEventParticipant(req.params.id, req.user.claims.sub);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error leaving event:\", error);\n      res.status(500).json({ message: \"Failed to leave event\" });\n    }\n  });\n\n  app.get(\"/api/events/:id/participants\", isAuthenticated, async (req, res) => {\n    try {\n      const participants = await storage.getEventParticipants(req.params.id);\n      res.json(participants);\n    } catch (error) {\n      console.error(\"Error fetching event participants:\", error);\n      res.status(500).json({ message: \"Failed to fetch event participants\" });\n    }\n  });\n\n  // Archive routes\n  app.patch(\"/api/events/:id/archive\", isAuthenticated, requireWriteAccess, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role === 'agent' || currentUser?.role === 'attachment') {\n        return res.status(403).json({ message: \"Agents and attachments cannot archive events\" });\n      }\n\n      const event = await storage.getEvent(req.params.id);\n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n\n      if (event.status !== 'completed' && event.status !== 'cancelled') {\n        return res.status(400).json({ message: \"Only completed or cancelled events can be archived\" });\n      }\n\n      const archivedEvent = await storage.archiveEvent(req.params.id);\n      res.json(archivedEvent);\n    } catch (error) {\n      console.error(\"Error archiving event:\", error);\n      res.status(500).json({ message: \"Failed to archive event\" });\n    }\n  });\n\n  app.get(\"/api/archive\", isAuthenticated, async (req: any, res) => {\n    try {\n      const archivedEvents = await storage.getArchivedEvents();\n      res.json(archivedEvents);\n    } catch (error) {\n      console.error(\"Error fetching archived events:\", error);\n      res.status(500).json({ message: \"Failed to fetch archived events\" });\n    }\n  });\n\n  // Event photo routes\n  app.put(\"/api/events/:id/photo\", isAuthenticated, requireWriteAccess, async (req: any, res) => {\n    try {\n      if (!req.body.photoUrl) {\n        return res.status(400).json({ error: \"photoUrl is required\" });\n      }\n\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      const event = await storage.getEvent(req.params.id);\n      \n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      \n      // Check permissions - same as event update\n      if (currentUser?.role === 'agent' || currentUser?.role === 'attachment' || \n          (currentUser?.role === 'coordinator' && event.createdBy !== currentUser.id)) {\n        return res.status(403).json({ message: \"Insufficient permissions to add photo\" });\n      }\n\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        req.body.photoUrl,\n        {\n          owner: req.user.claims.sub,\n          // Event photos should be public so they can be viewed by all users\n          visibility: \"public\",\n        },\n      );\n\n      // Update the event with the photo URL\n      const updatedEvent = await storage.updateEvent(req.params.id, { photoUrl: objectPath });\n      \n      res.status(200).json({\n        objectPath: objectPath,\n        event: updatedEvent\n      });\n    } catch (error) {\n      console.error(\"Error setting event photo:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Island routes\n  app.get(\"/api/islands\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const islands = await storage.getIslandsWithUserVisitStatus(userId);\n      res.json(islands);\n    } catch (error) {\n      console.error(\"Error fetching islands:\", error);\n      res.status(500).json({ message: \"Failed to fetch islands\" });\n    }\n  });\n\n  app.post(\"/api/islands\", isAuthenticated, requireWriteAccess, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can add islands\" });\n      }\n\n      const islandData = insertIslandSchema.parse(req.body);\n      const island = await storage.createIsland(islandData);\n      res.status(201).json(island);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid island data\", errors: error.errors });\n      }\n      console.error(\"Error creating island:\", error);\n      res.status(500).json({ message: \"Failed to create island\" });\n    }\n  });\n\n  app.patch(\"/api/islands/:id/visit\", isAuthenticated, requireWriteAccess, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role === 'agent' || currentUser?.role === 'attachment') {\n        return res.status(403).json({ message: \"Agents and attachments cannot mark islands as visited\" });\n      }\n\n      const userId = req.user.claims.sub;\n      const island = await storage.markIslandVisited(req.params.id, userId);\n      \n      // Update milestones after successful visit\n      try {\n        const newMilestones = await storage.checkAndUpdateMilestones(userId);\n        if (newMilestones.length > 0) {\n          console.log(`New milestones achieved by user ${userId} through manual island visit:`, newMilestones.map(m => m.milestoneName).join(', '));\n        }\n      } catch (error) {\n        console.error('Error checking milestones after manual island visit:', error);\n        // Don't fail the visit if milestone checking fails\n      }\n      \n      res.json(island);\n    } catch (error) {\n      console.error(\"Error marking island as visited:\", error);\n      res.status(500).json({ message: \"Failed to mark island as visited\" });\n    }\n  });\n\n  app.post(\"/api/islands/check-location\", isAuthenticated, requireWriteAccess, async (req: any, res) => {\n    try {\n      // Validate location data with Zod\n      const locationSchema = z.object({\n        latitude: z.number().min(-90, \"Latitude must be >= -90\").max(90, \"Latitude must be <= 90\"),\n        longitude: z.number().min(-180, \"Longitude must be >= -180\").max(180, \"Longitude must be <= 180\")\n      });\n\n      const { latitude, longitude } = locationSchema.parse(req.body);\n      const userId = req.user.claims.sub;\n      const result = await storage.checkLocationAndMarkVisitedIslands(latitude, longitude, userId);\n      \n      // Update milestones if new islands were visited\n      if (result.newlyVisited.length > 0) {\n        try {\n          const newMilestones = await storage.checkAndUpdateMilestones(userId);\n          if (newMilestones.length > 0) {\n            console.log(`New milestones achieved by user ${userId} through automatic location check:`, newMilestones.map(m => m.milestoneName).join(', '));\n          }\n        } catch (error) {\n          console.error('Error checking milestones after automatic island visit:', error);\n          // Don't fail the location check if milestone checking fails\n        }\n      }\n      \n      res.json({\n        nearbyIslands: result.visitedIslands,\n        newlyVisited: result.newlyVisited,\n        message: result.newlyVisited.length > 0 \n          ? `Congratulations! You visited ${result.newlyVisited.map(i => i.name).join(', ')}`\n          : result.visitedIslands.length > 0 \n            ? `You are near ${result.visitedIslands.map(i => i.name).join(', ')}`\n            : \"No islands detected in your current location\"\n      });\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid location data\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error checking location for island visits:\", error);\n      res.status(500).json({ \n        message: \"Failed to check location\", \n        error: error.message \n      });\n    }\n  });\n\n  // Manual island check-in endpoint\n  app.post(\"/api/islands/:id/check-in\", isAuthenticated, requireWriteAccess, async (req: any, res) => {\n    try {\n      const islandId = req.params.id;\n      const userId = req.user.claims.sub;\n      \n      // Validate request body\n      const checkInSchema = z.object({\n        equipmentIds: z.array(z.string()).default([])\n      });\n      \n      const validatedBody = checkInSchema.parse(req.body);\n      let { equipmentIds } = validatedBody;\n      \n      // Get current user to check permissions\n      const currentUser = await storage.getUser(userId);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n      \n      // Check if user has permission to check in with equipment\n      if (equipmentIds.length > 0 && !hasPermission(currentUser.role as UserRole, 'checkInWithEquipment')) {\n        // For attachment users, strip equipment IDs and warn them\n        if (currentUser.role === 'attachment') {\n          equipmentIds = []; // Strip equipment IDs for attachment users\n        } else {\n          return res.status(403).json({ \n            message: \"You don't have permission to check in with equipment. Contact your administrator for access.\" \n          });\n        }\n      }\n      \n      // Get the island to check if it exists and isn't already visited\n      const island = await storage.getIsland(islandId);\n      if (!island) {\n        return res.status(404).json({ message: \"Island not found\" });\n      }\n      \n      if (island.isVisited) {\n        return res.json({\n          island,\n          message: `${island.name} is already marked as visited`,\n          alreadyVisited: true\n        });\n      }\n      \n      // Mark the island as visited with equipment tracking\n      const updatedIsland = await storage.markIslandVisitedWithEquipment(islandId, userId, equipmentIds);\n      \n      const equipmentMessage = equipmentIds.length > 0 \n        ? ` and transferred ${equipmentIds.length} equipment item(s) to this island`\n        : \"\";\n      \n      // Add warning for attachment users who tried to check in with equipment\n      const warningMessage = (currentUser.role === 'attachment' && validatedBody.equipmentIds.length > 0)\n        ? \" (Note: Equipment transfers were not processed due to insufficient permissions)\"\n        : \"\";\n      \n      res.json({\n        island: updatedIsland,\n        message: `Successfully checked in to ${updatedIsland.name}${equipmentMessage}!${warningMessage}`,\n        alreadyVisited: false,\n        equipmentCount: equipmentIds.length\n      });\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid request data\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error checking in to island:\", error);\n      res.status(500).json({ \n        message: \"Failed to check in to island\", \n        error: error.message \n      });\n    }\n  });\n\n  // Equipment transfer routes\n  app.post(\"/api/equipment/:id/transfer\", isAuthenticated, requirePermission('transferEquipment'), async (req: any, res) => {\n    try {\n      const { quantityToMove, destinationAtoll, destinationIsland, notes } = req.body;\n      const sourceEquipmentId = req.params.id;\n\n      if (!quantityToMove || quantityToMove <= 0) {\n        return res.status(400).json({ error: \"Valid quantity to move is required\" });\n      }\n\n      if (!destinationAtoll) {\n        return res.status(400).json({ error: \"Destination atoll is required\" });\n      }\n\n      const result = await storage.transferEquipment({\n        sourceEquipmentId,\n        quantityToMove: parseInt(quantityToMove),\n        destinationAtoll,\n        destinationIsland: destinationIsland || undefined,\n        transferredBy: req.user.claims.sub,\n        notes: notes || undefined,\n      });\n\n      res.json(result);\n    } catch (error: any) {\n      console.error('Error transferring equipment:', error);\n      res.status(500).json({ error: error.message || \"Failed to transfer equipment\" });\n    }\n  });\n\n  app.get(\"/api/equipment/transfers\", isAuthenticated, requireViewEquipment, async (req: any, res) => {\n    try {\n      const { equipmentId } = req.query;\n      const transfers = await storage.getEquipmentTransfers(equipmentId as string);\n      res.json(transfers);\n    } catch (error: any) {\n      console.error('Error fetching equipment transfers:', error);\n      res.status(500).json({ error: \"Failed to fetch transfers\" });\n    }\n  });\n\n  app.get(\"/api/equipment/transfers/with-users\", isAuthenticated, requireViewEquipment, async (req: any, res) => {\n    try {\n      const { equipmentId } = req.query;\n      const transfers = await storage.getEquipmentTransfersWithUser(equipmentId as string);\n      res.json(transfers);\n    } catch (error: any) {\n      console.error('Error fetching equipment transfers with user details:', error);\n      res.status(500).json({ error: \"Failed to fetch transfers with user details\" });\n    }\n  });\n\n  app.get(\"/api/equipment/audit-logs\", isAuthenticated, requireViewEquipment, async (req: any, res) => {\n    try {\n      const { equipmentId } = req.query;\n      const auditLogs = await storage.getEquipmentAuditLogs(equipmentId as string);\n      res.json(auditLogs);\n    } catch (error: any) {\n      console.error('Error fetching equipment audit logs:', error);\n      res.status(500).json({ error: \"Failed to fetch audit logs\" });\n    }\n  });\n\n  app.get(\"/api/equipment/audit-logs/with-users\", isAuthenticated, requireViewEquipment, async (req: any, res) => {\n    try {\n      const { equipmentId } = req.query;\n      const auditLogs = await storage.getEquipmentAuditLogsWithUser(equipmentId as string);\n      res.json(auditLogs);\n    } catch (error: any) {\n      console.error('Error fetching equipment audit logs with user details:', error);\n      res.status(500).json({ error: \"Failed to fetch audit logs with user details\" });\n    }\n  });\n\n  // Equipment routes\n  app.get(\"/api/equipment\", isAuthenticated, requireViewEquipment, async (req: any, res) => {\n    try {\n      const { atoll, island, type, status } = req.query;\n      let equipmentList;\n      \n      if (atoll) {\n        equipmentList = await storage.getEquipmentByAtoll(atoll as string);\n      } else if (island) {\n        equipmentList = await storage.getEquipmentByIsland(island as string);\n      } else if (type) {\n        equipmentList = await storage.getEquipmentByType(type as string);\n      } else if (status) {\n        equipmentList = await storage.getEquipmentByStatus(status as string);\n      } else {\n        equipmentList = await storage.getEquipment();\n      }\n      \n      res.json(equipmentList);\n    } catch (error) {\n      console.error(\"Error fetching equipment:\", error);\n      res.status(500).json({ message: \"Failed to fetch equipment\" });\n    }\n  });\n\n  app.post(\"/api/equipment\", isAuthenticated, requireEditEquipment, async (req: any, res) => {\n    try {\n      const equipmentData = {\n        ...insertEquipmentSchema.parse(req.body),\n        createdBy: req.user.claims.sub\n      };\n      \n      const equipment = await storage.createEquipment(equipmentData);\n      res.status(201).json(equipment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid equipment data\", errors: error.errors });\n      }\n      console.error(\"Error creating equipment:\", error);\n      res.status(500).json({ message: \"Failed to create equipment\" });\n    }\n  });\n\n  app.patch(\"/api/equipment/:id\", isAuthenticated, requireEditEquipment, async (req: any, res) => {\n    try {\n      const updateData = insertEquipmentSchema.partial().parse(req.body);\n      const equipment = await storage.updateEquipmentWithTransferTracking(req.params.id, updateData, req.user.claims.sub);\n      res.json(equipment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid equipment data\", errors: error.errors });\n      }\n      console.error(\"Error updating equipment:\", error);\n      res.status(500).json({ message: \"Failed to update equipment\" });\n    }\n  });\n\n  app.delete(\"/api/equipment/:id\", isAuthenticated, requireEditEquipment, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin' && currentUser?.role !== 'coordinator') {\n        return res.status(403).json({ message: \"Only admins and coordinators can delete equipment\" });\n      }\n\n      await storage.deleteEquipment(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting equipment:\", error);\n      res.status(500).json({ message: \"Failed to delete equipment\" });\n    }\n  });\n\n  // Milestone routes\n  app.get(\"/api/milestones\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const milestones = await storage.getUserMilestones(userId);\n      res.json(milestones);\n    } catch (error) {\n      console.error(\"Error fetching user milestones:\", error);\n      res.status(500).json({ message: \"Failed to fetch milestones\" });\n    }\n  });\n\n  app.get(\"/api/milestones/stats\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const stats = await storage.getUserVisitStats(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching user visit stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch visit stats\" });\n    }\n  });\n\n  app.get(\"/api/milestones/history\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const history = await storage.getUserIslandVisitHistory(userId);\n      res.json(history);\n    } catch (error) {\n      console.error(\"Error fetching user visit history:\", error);\n      res.status(500).json({ message: \"Failed to fetch visit history\" });\n    }\n  });\n\n  app.post(\"/api/milestones/refresh\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const newMilestones = await storage.checkAndUpdateMilestones(userId);\n      res.json({\n        message: \"Milestones refreshed successfully\",\n        newMilestones,\n        count: newMilestones.length\n      });\n    } catch (error) {\n      console.error(\"Error refreshing milestones:\", error);\n      res.status(500).json({ message: \"Failed to refresh milestones\" });\n    }\n  });\n\n  // Admin milestone management endpoints\n  app.post(\"/api/admin/milestones/clear-all\", isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const result = await storage.clearAllUserMilestones();\n      res.json({\n        message: \"All user milestones cleared successfully\",\n        deletedCount: result\n      });\n    } catch (error) {\n      console.error(\"Error clearing all milestones:\", error);\n      res.status(500).json({ message: \"Failed to clear milestones\" });\n    }\n  });\n\n  app.post(\"/api/admin/milestones/refresh-all\", isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      const results = [];\n      \n      for (const user of users) {\n        try {\n          const newMilestones = await storage.checkAndUpdateMilestones(user.id);\n          results.push({\n            userId: user.id,\n            email: user.email,\n            milestonesCount: newMilestones.length\n          });\n        } catch (error) {\n          console.error(`Error refreshing milestones for user ${user.id}:`, error);\n          results.push({\n            userId: user.id,\n            email: user.email,\n            error: error instanceof Error ? error.message : 'Unknown error'\n          });\n        }\n      }\n      \n      res.json({\n        message: \"Milestone refresh completed for all users\",\n        results\n      });\n    } catch (error) {\n      console.error(\"Error refreshing all milestones:\", error);\n      res.status(500).json({ message: \"Failed to refresh all milestones\" });\n    }\n  });\n\n  app.delete(\"/api/admin/milestones/user/:userId\", isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const userId = req.params.userId;\n      const result = await storage.clearUserMilestones(userId);\n      res.json({\n        message: `Milestones cleared for user ${userId}`,\n        deletedCount: result\n      });\n    } catch (error) {\n      console.error(\"Error clearing user milestones:\", error);\n      res.status(500).json({ message: \"Failed to clear user milestones\" });\n    }\n  });\n\n  app.post(\"/api/admin/database/reset-cache\", isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      // Clear any server-side caches if they exist\n      // For now, just return success - we'll expand this if needed\n      res.json({\n        message: \"Database cache cleared successfully\"\n      });\n    } catch (error) {\n      console.error(\"Error clearing database cache:\", error);\n      res.status(500).json({ message: \"Failed to clear database cache\" });\n    }\n  });\n\n  // Get visit history for a specific island\n  app.get(\"/api/island-visits\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const islandId = req.query.islandId as string;\n      \n      if (!islandId) {\n        return res.status(400).json({ message: \"Island ID is required\" });\n      }\n      \n      const visits = await storage.getIslandVisitHistory(islandId, userId);\n      res.json(visits);\n    } catch (error) {\n      console.error(\"Error fetching island visit history:\", error);\n      res.status(500).json({ message: \"Failed to fetch island visit history\" });\n    }\n  });\n\n\n\n\n\n\n\n\n  // Export endpoints for data\n  app.get(\"/api/export/events\", isAuthenticated, async (req: any, res) => {\n    try {\n      const format = req.query.format || 'json';\n      const userRole = req.user?.claims?.role || 'agent';\n      \n      // Only coordinators and admins can export data\n      if (userRole === 'agent' || userRole === 'attachment') {\n        return res.status(403).json({ error: \"Insufficient permissions to export data\" });\n      }\n\n      const allEvents = await storage.getEvents();\n      \n      if (format === 'csv') {\n        const createCsvWriter = require('csv-writer').createObjectCsvWriter;\n        \n        // Create CSV with proper headers\n        const csvWriter = createCsvWriter({\n          path: '/tmp/events_export.csv',\n          header: [\n            {id: 'id', title: 'ID'},\n            {id: 'title', title: 'Title'},\n            {id: 'island', title: 'Island'},\n            {id: 'atoll', title: 'Atoll'},\n            {id: 'eventLocation', title: 'Event Location'},\n            {id: 'waitingLocation', title: 'Waiting Location'},\n            {id: 'contact', title: 'Contact'},\n            {id: 'comment', title: 'Comment'},\n            {id: 'latitude', title: 'Latitude'},\n            {id: 'longitude', title: 'Longitude'},\n            {id: 'status', title: 'Status'},\n            {id: 'participantCount', title: 'Participants'},\n            {id: 'createdBy', title: 'Created By'},\n            {id: 'createdAt', title: 'Created At'},\n            {id: 'updatedAt', title: 'Updated At'}\n          ]\n        });\n        \n        await csvWriter.writeRecords(allEvents);\n        res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"events_export.csv\"');\n        res.sendFile('/tmp/events_export.csv');\n      } else {\n        res.setHeader('Content-Type', 'application/json');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"events_export.json\"');\n        res.json({\n          exportDate: new Date().toISOString(),\n          totalEvents: allEvents.length,\n          data: allEvents\n        });\n      }\n    } catch (error) {\n      console.error(\"Error exporting events:\", error);\n      res.status(500).json({ error: \"Failed to export events\" });\n    }\n  });\n\n  app.get(\"/api/export/users\", isAuthenticated, async (req: any, res) => {\n    try {\n      const format = req.query.format || 'json';\n      const userRole = req.user?.claims?.role || 'agent';\n      \n      // Only admins can export user data\n      if (userRole !== 'admin') {\n        return res.status(403).json({ error: \"Only administrators can export user data\" });\n      }\n\n      const allUsers = await storage.getAllUsers();\n      \n      if (format === 'csv') {\n        const createCsvWriter = require('csv-writer').createObjectCsvWriter;\n        \n        const csvWriter = createCsvWriter({\n          path: '/tmp/users_export.csv',\n          header: [\n            {id: 'id', title: 'ID'},\n            {id: 'email', title: 'Email'},\n            {id: 'firstName', title: 'First Name'},\n            {id: 'lastName', title: 'Last Name'},\n            {id: 'serviceNumber', title: 'Service Number'},\n            {id: 'mobile', title: 'Mobile'},\n            {id: 'role', title: 'Role'},\n            {id: 'isActive', title: 'Active'},\n            {id: 'createdAt', title: 'Created At'}\n          ]\n        });\n        \n        await csvWriter.writeRecords(allUsers);\n        res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"users_export.csv\"');\n        res.sendFile('/tmp/users_export.csv');\n      } else {\n        res.setHeader('Content-Type', 'application/json');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"users_export.json\"');\n        res.json({\n          exportDate: new Date().toISOString(),\n          totalUsers: allUsers.length,\n          data: allUsers\n        });\n      }\n    } catch (error) {\n      console.error(\"Error exporting users:\", error);\n      res.status(500).json({ error: \"Failed to export users\" });\n    }\n  });\n\n\n\n  app.get(\"/api/export/islands\", isAuthenticated, async (req: any, res) => {\n    try {\n      const format = req.query.format || 'json';\n      const userRole = req.user?.claims?.role || 'agent';\n      \n      // Only coordinators and admins can export data\n      if (userRole === 'agent' || userRole === 'attachment') {\n        return res.status(403).json({ error: \"Insufficient permissions to export data\" });\n      }\n\n      const allIslands = await storage.getIslands();\n      \n      if (format === 'csv') {\n        const createCsvWriter = require('csv-writer').createObjectCsvWriter;\n        \n        const csvWriter = createCsvWriter({\n          path: '/tmp/islands_export.csv',\n          header: [\n            {id: 'id', title: 'ID'},\n            {id: 'name', title: 'Name'},\n            {id: 'atoll', title: 'Atoll'},\n            {id: 'latitude', title: 'Latitude'},\n            {id: 'longitude', title: 'Longitude'},\n            {id: 'isVisited', title: 'Visited'},\n            {id: 'lastVisited', title: 'Last Visited'}\n          ]\n        });\n        \n        await csvWriter.writeRecords(allIslands);\n        res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"islands_export.csv\"');\n        res.sendFile('/tmp/islands_export.csv');\n      } else {\n        res.setHeader('Content-Type', 'application/json');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"islands_export.json\"');\n        res.json({\n          exportDate: new Date().toISOString(),\n          totalIslands: allIslands.length,\n          data: allIslands\n        });\n      }\n    } catch (error) {\n      console.error(\"Error exporting islands:\", error);\n      res.status(500).json({ error: \"Failed to export islands\" });\n    }\n  });\n\n  app.get(\"/api/export/equipment\", isAuthenticated, async (req: any, res) => {\n    try {\n      const format = req.query.format || 'json';\n      const userRole = req.user?.claims?.role || 'agent';\n      \n      // Only coordinators and admins can export data\n      if (userRole === 'agent' || userRole === 'attachment') {\n        return res.status(403).json({ error: \"Insufficient permissions to export data\" });\n      }\n\n      const allEquipment = await storage.getEquipment();\n      \n      if (format === 'csv') {\n        const createCsvWriter = require('csv-writer').createObjectCsvWriter;\n        \n        const csvWriter = createCsvWriter({\n          path: '/tmp/equipment_export.csv',\n          header: [\n            {id: 'id', title: 'ID'},\n            {id: 'name', title: 'Name'},\n            {id: 'type', title: 'Type'},\n            {id: 'quantity', title: 'Quantity'},\n            {id: 'status', title: 'Status'},\n            {id: 'atoll', title: 'Atoll'},\n            {id: 'island', title: 'Island'},\n            {id: 'description', title: 'Description'},\n            {id: 'condition', title: 'Condition'},\n            {id: 'createdBy', title: 'Created By'},\n            {id: 'createdAt', title: 'Created At'},\n            {id: 'updatedAt', title: 'Updated At'}\n          ]\n        });\n        \n        await csvWriter.writeRecords(allEquipment);\n        res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"equipment_export.csv\"');\n        res.sendFile('/tmp/equipment_export.csv');\n      } else {\n        res.setHeader('Content-Type', 'application/json');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"equipment_export.json\"');\n        res.json({\n          exportDate: new Date().toISOString(),\n          totalEquipment: allEquipment.length,\n          data: allEquipment\n        });\n      }\n    } catch (error) {\n      console.error(\"Error exporting equipment:\", error);\n      res.status(500).json({ error: \"Failed to export equipment\" });\n    }\n  });\n\n  // Chat audio recording endpoints\n  app.post(\"/api/chat/upload\", isAuthenticated, requireWriteAccess, async (req: any, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error: any) {\n      console.error('Error getting chat audio upload URL:', error);\n      res.status(500).json({ error: 'Failed to get chat audio upload URL: ' + error.message });\n    }\n  });\n\n  app.put(\"/api/chat/audio\", isAuthenticated, async (req: any, res) => {\n    if (!req.body.audioURL) {\n      return res.status(400).json({ error: \"audioURL is required\" });\n    }\n\n    const userId = req.user.claims.sub;\n\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const audioPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        req.body.audioURL,\n        {\n          owner: userId,\n          visibility: \"public\", // Chat audio messages are public for all team members\n        },\n      );\n\n\n      res.status(200).json({\n        audioPath: audioPath,\n        message: \"Chat audio message saved successfully\"\n      });\n    } catch (error: any) {\n      console.error(\"Error saving chat audio message:\", error);\n      res.status(500).json({ error: \"Failed to save chat audio message: \" + error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  \n  // Set up WebSocket server for chat\n  const wss = new WebSocketServer({ server: httpServer, path: '/chat' });\n  \n  // Store connected clients\n  const connectedClients = new Map<string, ConnectedClient>();\n  \n  wss.on('connection', (ws: WebSocket, req) => {\n    \n    ws.on('message', async (message: Buffer) => {\n      try {\n        const data = JSON.parse(message.toString());\n        \n        switch (data.type) {\n          case 'join':\n            // Add client to connected list\n            connectedClients.set(data.clientId, {\n              ws,\n              userId: data.userId,\n              userName: data.userName\n            });\n            \n            // Load and send historical messages to the newly connected client\n            try {\n              const historicalMessages = await storage.getChatMessages(50); // Get last 50 messages\n              // Reverse to show oldest first (database returns newest first)\n              historicalMessages.reverse();\n              \n              for (const dbMessage of historicalMessages) {\n                const messageType = dbMessage.isAudio ? 'audio-message' : 'text-message';\n                const messageData: any = {\n                  type: messageType,\n                  messageId: dbMessage.id,\n                  userId: dbMessage.userId,\n                  userName: dbMessage.userName,\n                  timestamp: dbMessage.createdAt!.toISOString()\n                };\n                \n                if (dbMessage.isAudio) {\n                  messageData.audioUrl = dbMessage.audioUrl;\n                } else {\n                  messageData.message = dbMessage.message;\n                }\n                \n                // Send historical message only to the newly connected client\n                if (ws.readyState === WebSocket.OPEN) {\n                  ws.send(JSON.stringify(messageData));\n                }\n              }\n            } catch (error) {\n              console.error('Error loading historical messages:', error);\n            }\n            \n            // Send current users list to all clients\n            broadcastUserList();\n            break;\n            \n          case 'subscribe-notifications':\n            // Add notification listener without adding to user list\n            connectedClients.set(data.clientId, {\n              ws,\n              userId: data.userId,\n              userName: '[Notification Listener]',\n              isNotificationOnly: true\n            });\n            // Don't broadcast user list or send history for notification-only connections\n            break;\n            \n          case 'text-message':\n            try {\n              // Save text message to database\n              const savedMessage = await storage.createChatMessage({\n                userId: data.userId,\n                userName: data.userName,\n                message: data.message,\n                isAudio: false\n              });\n              \n              // Broadcast text message to all clients with database timestamp\n              broadcast({\n                type: 'text-message',\n                messageId: savedMessage.id,\n                userId: data.userId,\n                userName: data.userName,\n                message: data.message,\n                timestamp: savedMessage.createdAt!.toISOString()\n              });\n\n              // Broadcast notification to all users except the sender\n              broadcastNotification(data.userId, {\n                type: 'chat-notification',\n                from: data.userName,\n                message: 'sent a message',\n                timestamp: savedMessage.createdAt!.toISOString()\n              });\n            } catch (error) {\n              console.error('Error saving text message to database:', error);\n            }\n            break;\n            \n          case 'audio-message':\n            try {\n              // Save audio message to database\n              const savedMessage = await storage.createChatMessage({\n                userId: data.userId,\n                userName: data.userName,\n                audioUrl: data.audioUrl,\n                isAudio: true\n              });\n              \n              // Broadcast audio message to all clients with database timestamp\n              broadcast({\n                type: 'audio-message',\n                messageId: savedMessage.id,\n                userId: data.userId,\n                userName: data.userName,\n                audioUrl: data.audioUrl,\n                timestamp: savedMessage.createdAt!.toISOString()\n              });\n\n              // Broadcast notification to all users except the sender\n              broadcastNotification(data.userId, {\n                type: 'chat-notification',\n                from: data.userName,\n                message: 'sent an audio message',\n                timestamp: savedMessage.createdAt!.toISOString()\n              });\n            } catch (error) {\n              console.error('Error saving audio message to database:', error);\n            }\n            break;\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n    \n    ws.on('close', () => {\n      // Remove client and update user list only if it wasn't notification-only\n      for (const [clientId, client] of Array.from(connectedClients.entries())) {\n        if (client.ws === ws) {\n          const wasNotificationOnly = client.isNotificationOnly;\n          connectedClients.delete(clientId);\n          \n          // Only broadcast user list if the disconnected client was not notification-only\n          if (!wasNotificationOnly) {\n            broadcastUserList();\n          }\n          break;\n        }\n      }\n    });\n  });\n  \n  function broadcast(message: any) {\n    const messageStr = JSON.stringify(message);\n    for (const [clientId, client] of Array.from(connectedClients.entries())) {\n      if (client.ws.readyState === WebSocket.OPEN) {\n        client.ws.send(messageStr);\n      }\n    }\n  }\n\n  function broadcastUserList() {\n    const usersList = Array.from(connectedClients.values())\n      .filter(client => !client.isNotificationOnly)\n      .map(client => ({\n        userId: client.userId,\n        userName: client.userName\n      }));\n    \n    broadcast({\n      type: 'user-list',\n      users: usersList\n    });\n  }\n\n  function broadcastNotification(excludeUserId: string, message: any) {\n    const messageStr = JSON.stringify(message);\n    for (const [clientId, client] of Array.from(connectedClients.entries())) {\n      // Only send notification to users other than the sender\n      if (client.ws.readyState === WebSocket.OPEN && client.userId !== excludeUserId) {\n        client.ws.send(messageStr);\n      }\n    }\n  }\n  \n  return httpServer;\n}\n","size_bytes":60703},"server/storage.ts":{"content":"import {\n  users,\n  events,\n  islands,\n  eventParticipants,\n  equipment,\n  equipmentTransfers,\n  equipmentAuditLog,\n  chatMessages,\n  userChatReadStatus,\n  islandVisits,\n  islandVisitEquipment,\n  userMilestones,\n  type User,\n  type UpsertUser,\n  type InsertUser,\n  type Event,\n  type InsertEvent,\n  type Island,\n  type InsertIsland,\n  type EventParticipant,\n  type Equipment,\n  type InsertEquipment,\n  type EquipmentTransfer,\n  type InsertEquipmentTransfer,\n  type EquipmentTransferWithUser,\n  type EquipmentAuditLog,\n  type InsertEquipmentAuditLog,\n  type ChatMessage,\n  type InsertChatMessage,\n  type UserChatReadStatus,\n  type InsertUserChatReadStatus,\n  type IslandVisit,\n  type InsertIslandVisit,\n  type IslandVisitEquipment,\n  type InsertIslandVisitEquipment,\n  type UserMilestone,\n  type InsertUserMilestone,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql, or, isNull, inArray } from \"drizzle-orm\";\nimport { findNearbyIslands } from \"../shared/geolocation-utils\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Additional user operations\n  getAllUsers(): Promise<User[]>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(userId: string, userData: Partial<InsertUser>): Promise<User | undefined>;\n  updateUserRole(userId: string, role: string): Promise<User>;\n  deleteUser(userId: string, deletingUserRole?: string): Promise<{ success: boolean; error?: string }>;\n  \n  // User approval operations\n  approveUser(userId: string): Promise<User>;\n  rejectUser(userId: string): Promise<User>;\n  getUsersByApprovalStatus(status: string): Promise<User[]>;\n  \n  // Event operations\n  getEvents(): Promise<Event[]>;\n  getEvent(id: string): Promise<Event | undefined>;\n  createEvent(event: InsertEvent): Promise<Event>;\n  updateEvent(id: string, event: Partial<InsertEvent>): Promise<Event>;\n  deleteEvent(id: string): Promise<void>;\n  getEventsByStatus(status: string): Promise<Event[]>;\n  getEventsByIsland(island: string): Promise<Event[]>;\n  \n  // Island operations\n  getIslands(): Promise<Island[]>;\n  getIsland(id: string): Promise<Island | undefined>;\n  createIsland(island: InsertIsland): Promise<Island>;\n  updateIsland(id: string, island: Partial<InsertIsland>): Promise<Island>;\n  markIslandVisited(islandId: string, userId: string, visitType?: 'manual' | 'automatic'): Promise<Island>;\n  markIslandVisitedWithEquipment(islandId: string, userId: string, equipmentIds: string[]): Promise<Island>;\n  checkLocationAndMarkVisitedIslands(userLat: number, userLon: number, userId: string): Promise<{ visitedIslands: Array<{id: string, name: string, distance: number}>, newlyVisited: Array<{id: string, name: string}> }>;\n  getIslandsWithUserVisitStatus(userId: string): Promise<Array<Island & { hasVisited: boolean }>>;\n  \n  // Event participant operations\n  addEventParticipant(eventId: string, userId: string): Promise<EventParticipant>;\n  removeEventParticipant(eventId: string, userId: string): Promise<void>;\n  getEventParticipants(eventId: string): Promise<User[]>;\n  \n  // Event archive operations\n  archiveEvent(id: string): Promise<Event>;\n  getArchivedEvents(): Promise<Event[]>;\n  \n  // Equipment operations\n  getEquipment(): Promise<Equipment[]>;\n  getEquipmentByAtoll(atoll: string): Promise<Equipment[]>;\n  getEquipmentByIsland(island: string): Promise<Equipment[]>;\n  createEquipment(equipment: InsertEquipment): Promise<Equipment>;\n  updateEquipment(id: string, equipment: Partial<InsertEquipment>): Promise<Equipment>;\n  deleteEquipment(id: string): Promise<void>;\n  getEquipmentByType(type: string): Promise<Equipment[]>;\n  getEquipmentByStatus(status: string): Promise<Equipment[]>;\n  \n  // Equipment transfer operations\n  transferEquipment(params: {\n    sourceEquipmentId: string;\n    quantityToMove: number;\n    destinationAtoll: string;\n    destinationIsland?: string;\n    transferredBy: string;\n    notes?: string;\n  }): Promise<{ sourceEquipment: Equipment; destinationEquipment: Equipment; transfer: EquipmentTransfer }>;\n  getEquipmentTransfers(equipmentId?: string): Promise<EquipmentTransfer[]>;\n  getEquipmentTransfersWithUser(equipmentId?: string): Promise<EquipmentTransferWithUser[]>;\n  \n  // Chat message operations\n  getChatMessages(limit?: number): Promise<ChatMessage[]>;\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  deleteChatMessage(messageId: string): Promise<boolean>;\n  deleteChatMessagesByUserId(userId: string): Promise<number>; // Returns count of deleted messages\n  \n  // Chat read status operations\n  markMessagesAsRead(userId: string, lastReadMessageId: string): Promise<UserChatReadStatus>;\n  getUnreadMessageCount(userId: string): Promise<number>;\n  getUserChatReadStatus(userId: string): Promise<UserChatReadStatus | null>;\n  \n  // Milestone operations\n  getUserMilestones(userId: string): Promise<UserMilestone[]>;\n  checkAndUpdateMilestones(userId: string): Promise<UserMilestone[]>;\n  createOrUpdateMilestone(milestone: InsertUserMilestone): Promise<UserMilestone>;\n  getUserIslandVisitHistory(userId: string): Promise<Array<IslandVisit & { island: Island; equipment: Equipment[] }>>;\n  getUserVisitStats(userId: string): Promise<{ totalIslands: number; totalVisits: number; uniqueAtolls: number }>;\n  getIslandVisitHistory(islandId: string, userId: string): Promise<Array<IslandVisit & { equipmentUsed: string[] }>>;\n  \n  // Admin milestone operations\n  clearAllUserMilestones(): Promise<number>;\n  clearUserMilestones(userId: string): Promise<number>;\n  \n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    \n    // Normalize legacy \"member\" role to \"agent\"\n    if (user && (user.role as any) === 'member') {\n      console.log(`Normalizing legacy role 'member' to 'agent' for user ${user.id}`);\n      return await this.updateUserRole(user.id, 'agent');\n    }\n    \n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    // Ensure user ID is provided\n    if (!userData.id) {\n      throw new Error('User ID is required for upsert operation');\n    }\n\n    try {\n      // Check if user exists by ID first\n      const existingUserById = await this.getUser(userData.id);\n      \n      if (existingUserById) {\n        // User exists by ID - update safe fields, preserve role and approvalStatus\n        const [user] = await db\n          .update(users)\n          .set({\n            email: userData.email,\n            firstName: userData.firstName,\n            lastName: userData.lastName,\n            profileImageUrl: userData.profileImageUrl,\n            updatedAt: new Date(),\n          })\n          .where(eq(users.id, userData.id))\n          .returning();\n        return user;\n      }\n\n      // Check if user exists by email (different ID, same email)\n      if (userData.email) {\n        const [existingUserByEmail] = await db\n          .select()\n          .from(users)\n          .where(eq(users.email, userData.email))\n          .limit(1);\n\n        if (existingUserByEmail) {\n          // Same email exists with different ID - update the existing record with new ID and data\n          const [user] = await db\n            .update(users)\n            .set({\n              id: userData.id, // Update to new ID from OIDC\n              firstName: userData.firstName,\n              lastName: userData.lastName,\n              profileImageUrl: userData.profileImageUrl,\n              updatedAt: new Date(),\n            })\n            .where(eq(users.email, userData.email))\n            .returning();\n          return user;\n        }\n      }\n\n      // New user - set defaults with optional admin auto-approval (development only)\n      const isAdminUser = this.shouldBeAdmin(userData);\n      \n      const newUserData = {\n        ...userData,\n        // Only set defaults for new users\n        role: isAdminUser ? 'admin' : 'agent',\n        approvalStatus: isAdminUser ? 'approved' : 'pending',\n      };\n\n      const [user] = await db\n        .insert(users)\n        .values(newUserData)\n        .returning();\n      return user;\n    } catch (error: any) {\n      // Handle unique constraint violations more gracefully\n      if (error.code === '23505' && error.constraint === 'users_email_unique' && userData.email) {\n        console.log(`Email conflict detected for ${userData.email}, attempting to resolve...`);\n        \n        // Find the existing user by email and update their ID\n        const [existingUser] = await db\n          .select()\n          .from(users)\n          .where(eq(users.email, userData.email))\n          .limit(1);\n\n        if (existingUser) {\n          const [user] = await db\n            .update(users)\n            .set({\n              id: userData.id,\n              firstName: userData.firstName,\n              lastName: userData.lastName,\n              profileImageUrl: userData.profileImageUrl,\n              updatedAt: new Date(),\n            })\n            .where(eq(users.email, userData.email))\n            .returning();\n          return user;\n        }\n      }\n      \n      console.error('Error in upsertUser:', error);\n      throw error;\n    }\n  }\n\n  // Helper method to determine if user should be admin (DEVELOPMENT ONLY)\n  private shouldBeAdmin(userData: UpsertUser): boolean {\n    // Only enable auto-admin in development mode\n    if (process.env.NODE_ENV === 'production') {\n      return false;\n    }\n    \n    // Use environment-based admin allowlist if available\n    const adminEmails = process.env.ADMIN_EMAILS?.split(',') || [];\n    \n    if (!userData.email) return false;\n    \n    // Check for explicit admin emails from environment\n    return adminEmails.includes(userData.email);\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    const allUsers = await db.select().from(users).orderBy(desc(users.createdAt));\n    \n    // Normalize any legacy \"member\" roles to \"agent\"\n    const normalizedUsers = await Promise.all(\n      allUsers.map(async (user) => {\n        if ((user.role as any) === 'member') {\n          console.log(`Normalizing legacy role 'member' to 'agent' for user ${user.id}`);\n          return await this.updateUserRole(user.id, 'agent');\n        }\n        return user;\n      })\n    );\n    \n    return normalizedUsers;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .returning();\n    return user;\n  }\n\n  async updateUserRole(userId: string, role: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ role, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async updateUser(userId: string, userData: Partial<InsertUser>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async deleteUser(userId: string, deletingUserRole?: string): Promise<{ success: boolean; error?: string }> {\n    try {\n      // Get the user to be deleted to check their role\n      const userToDelete = await this.getUser(userId);\n      if (!userToDelete) {\n        return { success: false, error: \"User not found\" };\n      }\n\n      // Prevent coordinator from deleting admins\n      if (deletingUserRole === 'coordinator' && userToDelete.role === 'admin') {\n        return { success: false, error: \"Coordinators cannot delete admin users\" };\n      }\n\n      // Check if this is the last admin\n      if (userToDelete.role === 'admin') {\n        const adminCount = await db\n          .select({ count: sql<number>`count(*)` })\n          .from(users)\n          .where(eq(users.role, 'admin'));\n        \n        if (adminCount[0]?.count <= 1) {\n          return { success: false, error: \"Cannot delete the last admin user\" };\n        }\n      }\n\n      // Delete the user - foreign key cascades will handle related data\n      await db.transaction(async (tx) => {\n        await tx.delete(users).where(eq(users.id, userId));\n      });\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error deleting user and related data:', error);\n      return { success: false, error: error instanceof Error ? error.message : \"Failed to delete user\" };\n    }\n  }\n\n  // User approval operations\n  async approveUser(userId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ approvalStatus: 'approved', updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async rejectUser(userId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ approvalStatus: 'rejected', updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async getUsersByApprovalStatus(status: string): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .where(eq(users.approvalStatus, status))\n      .orderBy(desc(users.createdAt));\n  }\n\n  // Event operations\n  async getEvents(): Promise<Event[]> {\n    return await db\n      .select()\n      .from(events)\n      .where(sql`${events.status} != 'archived'`)\n      .orderBy(desc(events.createdAt));\n  }\n\n  async getEvent(id: string): Promise<Event | undefined> {\n    const [event] = await db.select().from(events).where(eq(events.id, id));\n    return event;\n  }\n\n  async createEvent(event: InsertEvent): Promise<Event> {\n    const [newEvent] = await db.insert(events).values(event).returning();\n    return newEvent;\n  }\n\n  async updateEvent(id: string, event: Partial<InsertEvent>): Promise<Event> {\n    const [updatedEvent] = await db\n      .update(events)\n      .set({ ...event, updatedAt: new Date() })\n      .where(eq(events.id, id))\n      .returning();\n    return updatedEvent;\n  }\n\n  async deleteEvent(id: string): Promise<void> {\n    await db.delete(events).where(eq(events.id, id));\n  }\n\n  async getEventsByStatus(status: string): Promise<Event[]> {\n    return await db\n      .select()\n      .from(events)\n      .where(eq(events.status, status))\n      .orderBy(desc(events.createdAt));\n  }\n\n  async getEventsByIsland(island: string): Promise<Event[]> {\n    return await db\n      .select()\n      .from(events)\n      .where(eq(events.island, island))\n      .orderBy(desc(events.createdAt));\n  }\n\n  // Island operations\n  async getIslands(): Promise<Island[]> {\n    return await db.select().from(islands).orderBy(islands.atoll, islands.name);\n  }\n\n  async getIslandsWithUserVisitStatus(userId: string): Promise<Array<Island & { hasVisited: boolean }>> {\n    // Get all islands first\n    const allIslands = await db.select().from(islands).orderBy(islands.atoll, islands.name);\n    \n    // Get all island visits for this user\n    const userVisits = await db\n      .select({ islandId: islandVisits.islandId })\n      .from(islandVisits)\n      .where(eq(islandVisits.userId, userId));\n    \n    // Create a Set of visited island IDs for quick lookup\n    const visitedIslandIds = new Set(userVisits.map(visit => visit.islandId));\n    \n    // Transform the result to include hasVisited flag\n    return allIslands.map(island => ({\n      ...island,\n      hasVisited: visitedIslandIds.has(island.id), // True if user has visited this island\n    }));\n  }\n\n  async getIsland(id: string): Promise<Island | undefined> {\n    const [island] = await db.select().from(islands).where(eq(islands.id, id));\n    return island;\n  }\n\n  async createIsland(island: InsertIsland): Promise<Island> {\n    const [newIsland] = await db.insert(islands).values(island).returning();\n    return newIsland;\n  }\n\n  async updateIsland(id: string, island: Partial<InsertIsland>): Promise<Island> {\n    const [updatedIsland] = await db\n      .update(islands)\n      .set(island)\n      .where(eq(islands.id, id))\n      .returning();\n    return updatedIsland;\n  }\n\n  async markIslandVisited(islandId: string, userId: string, visitType: 'manual' | 'automatic' = 'automatic'): Promise<Island> {\n    // Check if user has already visited this island\n    const existingVisit = await db\n      .select()\n      .from(islandVisits)\n      .where(and(\n        eq(islandVisits.islandId, islandId),\n        eq(islandVisits.userId, userId)\n      ))\n      .limit(1);\n    \n    // If not already visited, create a visit record\n    if (existingVisit.length === 0) {\n      await db\n        .insert(islandVisits)\n        .values({\n          islandId,\n          userId,\n          visitType,\n          visitedAt: new Date()\n        });\n    }\n    \n    // Return the island info (without modifying global isVisited)\n    const [island] = await db\n      .select()\n      .from(islands)\n      .where(eq(islands.id, islandId))\n      .limit(1);\n    \n    if (!island) {\n      throw new Error(`Island with id ${islandId} not found`);\n    }\n    \n    return island;\n  }\n\n  async markIslandVisitedWithEquipment(islandId: string, userId: string, equipmentIds: string[]): Promise<Island & { visitId?: string }> {\n    const result = await db.transaction(async (tx) => {\n      // Track destination equipment for visit linkage (declare at transaction scope)\n      const destinationEquipmentIds: string[] = [];\n      \n      // First, verify the island exists\n      const existingIsland = await tx\n        .select()\n        .from(islands)\n        .where(eq(islands.id, islandId))\n        .limit(1);\n        \n      if (existingIsland.length === 0) {\n        throw new Error(`Island with id ${islandId} not found`);\n      }\n\n      const island = existingIsland[0];\n\n      // Verify user exists\n      const existingUser = await tx\n        .select()\n        .from(users)\n        .where(eq(users.id, userId))\n        .limit(1);\n        \n      if (existingUser.length === 0) {\n        throw new Error(`User with id ${userId} not found`);\n      }\n\n      // If equipment IDs provided, verify they exist, are available, and have quantity > 0\n      if (equipmentIds.length > 0) {\n        const existingEquipment = await tx\n          .select()\n          .from(equipment)\n          .where(and(\n            inArray(equipment.id, equipmentIds),\n            eq(equipment.status, 'available'),\n            sql`${equipment.quantity} > 0`\n          ));\n          \n        if (existingEquipment.length !== equipmentIds.length) {\n          throw new Error(`Some equipment items are not found, not available, or have no quantity`);\n        }\n        \n        // Transfer each selected equipment (1 unit each) to the island\n        for (const selectedEquipment of existingEquipment) {\n          // Atomic destination upsert: increment existing or create new\n          const [destinationEquipment] = await tx\n            .insert(equipment)\n            .values({\n              name: selectedEquipment.name,\n              type: selectedEquipment.type,\n              quantity: 1,\n              status: selectedEquipment.status,\n              atoll: island.atoll,\n              island: island.name,\n              description: selectedEquipment.description,\n              condition: selectedEquipment.condition,\n              parentEquipmentId: selectedEquipment.id,\n              createdBy: userId,\n            })\n            .onConflictDoUpdate({\n              target: [equipment.name, equipment.type, equipment.atoll, equipment.island],\n              set: {\n                quantity: sql`${equipment.quantity} + 1`,\n                updatedAt: new Date()\n              }\n            })\n            .returning();\n\n          // Store destination equipment ID for visit linkage\n          destinationEquipmentIds.push(destinationEquipment.id);\n\n          // Create transfer record\n          await tx\n            .insert(equipmentTransfers)\n            .values({\n              sourceEquipmentId: selectedEquipment.id,\n              destinationEquipmentId: destinationEquipment.id,\n              quantityMoved: 1,\n              fromAtoll: selectedEquipment.atoll,\n              fromIsland: selectedEquipment.island,\n              toAtoll: island.atoll,\n              toIsland: island.name,\n              transferredBy: userId,\n              notes: `Equipment transferred during island check-in`,\n            });\n\n          // Atomic source decrement with guard\n          const [updatedSource] = await tx\n            .update(equipment)\n            .set({ \n              quantity: sql`${equipment.quantity} - 1`,\n              updatedAt: new Date()\n            })\n            .where(and(\n              eq(equipment.id, selectedEquipment.id),\n              sql`${equipment.quantity} > 0`\n            ))\n            .returning();\n          \n          if (!updatedSource) {\n            throw new Error(`Equipment ${selectedEquipment.name} has insufficient quantity or was modified by another transaction`);\n          }\n          \n          // Keep equipment record even when quantity becomes 0 to preserve historical visit data\n          // This prevents foreign key constraint violations from islandVisitEquipment references\n        }\n      }\n      \n      // Get the island info (without marking it globally as visited)\n      const [updatedIsland] = await tx\n        .select()\n        .from(islands)\n        .where(eq(islands.id, islandId));\n      \n      // Create visit record\n      const [visit] = await tx\n        .insert(islandVisits)\n        .values({\n          islandId,\n          userId,\n          visitType: 'manual',\n        })\n        .returning();\n      \n      // Link destination equipment to the visit (equipment that was transferred to this island)\n      if (equipmentIds.length > 0 && destinationEquipmentIds.length > 0) {\n        // Dedupe destination equipment IDs to prevent duplicate visit-equipment links\n        const uniqueDestinationIds = Array.from(new Set(destinationEquipmentIds));\n        const equipmentVisitRecords = uniqueDestinationIds.map(equipmentId => ({\n          visitId: visit.id,\n          equipmentId,\n        }));\n        \n        await tx\n          .insert(islandVisitEquipment)\n          .values(equipmentVisitRecords);\n      }\n      \n      console.log(`Island visit recorded: User ${userId} visited ${updatedIsland.name} and transferred ${equipmentIds.length} equipment items`);\n      \n      return { ...updatedIsland, visitId: visit.id };\n    });\n    \n    // Check and update milestones after successful visit (outside transaction)\n    try {\n      const newMilestones = await this.checkAndUpdateMilestones(userId);\n      if (newMilestones.length > 0) {\n        console.log(`New milestones achieved by user ${userId}:`, newMilestones.map(m => m.milestoneName).join(', '));\n      }\n    } catch (error) {\n      console.error('Error checking milestones after island visit:', error);\n      // Don't fail the visit if milestone checking fails\n    }\n    \n    return result;\n  }\n\n  async checkLocationAndMarkVisitedIslands(userLat: number, userLon: number, userId: string): Promise<{ visitedIslands: Array<{id: string, name: string, distance: number}>, newlyVisited: Array<{id: string, name: string}> }> {\n    // Get all islands with coordinates\n    const allIslands = await this.getIslands();\n    \n    // Find nearby islands within visiting distance (500m)\n    const nearbyIslands = findNearbyIslands(userLat, userLon, allIslands);\n    \n    const newlyVisited: Array<{id: string, name: string}> = [];\n    \n    // Get user's visit history to check if they've already visited nearby islands\n    const userVisits = await db\n      .select()\n      .from(islandVisits)\n      .where(eq(islandVisits.userId, userId));\n    \n    const visitedIslandIds = new Set(userVisits.map(visit => visit.islandId));\n    \n    // Mark nearby islands as visited if not already visited by this user\n    for (const nearbyIsland of nearbyIslands) {\n      if (!visitedIslandIds.has(nearbyIsland.id)) {\n        await this.markIslandVisited(nearbyIsland.id, userId, 'automatic');\n        newlyVisited.push({ id: nearbyIsland.id, name: nearbyIsland.name });\n      }\n    }\n    \n    return {\n      visitedIslands: nearbyIslands,\n      newlyVisited\n    };\n  }\n\n  // Event participant operations\n  async addEventParticipant(eventId: string, userId: string): Promise<EventParticipant> {\n    const [participant] = await db\n      .insert(eventParticipants)\n      .values({ eventId, userId })\n      .returning();\n    \n    // Update participant count\n    await db\n      .update(events)\n      .set({ \n        participantCount: sql`${events.participantCount} + 1`,\n        updatedAt: new Date()\n      })\n      .where(eq(events.id, eventId));\n    \n    return participant;\n  }\n\n  async removeEventParticipant(eventId: string, userId: string): Promise<void> {\n    await db\n      .delete(eventParticipants)\n      .where(and(\n        eq(eventParticipants.eventId, eventId),\n        eq(eventParticipants.userId, userId)\n      ));\n    \n    // Update participant count\n    await db\n      .update(events)\n      .set({ \n        participantCount: sql`${events.participantCount} - 1`,\n        updatedAt: new Date()\n      })\n      .where(eq(events.id, eventId));\n  }\n\n  async getEventParticipants(eventId: string): Promise<User[]> {\n    const participants = await db\n      .select({ user: users })\n      .from(eventParticipants)\n      .innerJoin(users, eq(eventParticipants.userId, users.id))\n      .where(eq(eventParticipants.eventId, eventId));\n    \n    return participants.map(p => p.user);\n  }\n\n  // Event archive operations\n  async archiveEvent(id: string): Promise<Event> {\n    const [archivedEvent] = await db\n      .update(events)\n      .set({ status: \"archived\", updatedAt: new Date() })\n      .where(eq(events.id, id))\n      .returning();\n    return archivedEvent;\n  }\n\n  async getArchivedEvents(): Promise<Event[]> {\n    return await db\n      .select()\n      .from(events)\n      .where(eq(events.status, \"archived\"))\n      .orderBy(desc(events.updatedAt));\n  }\n\n  // Equipment operations\n  async getEquipment(): Promise<Equipment[]> {\n    return await db.select().from(equipment).orderBy(equipment.atoll, equipment.island, equipment.name);\n  }\n\n  async getEquipmentByAtoll(atoll: string): Promise<Equipment[]> {\n    return await db\n      .select()\n      .from(equipment)\n      .where(eq(equipment.atoll, atoll))\n      .orderBy(equipment.name);\n  }\n\n  async getEquipmentByIsland(island: string): Promise<Equipment[]> {\n    return await db\n      .select()\n      .from(equipment)\n      .where(eq(equipment.island, island))\n      .orderBy(equipment.name);\n  }\n\n  async createEquipment(equipmentData: InsertEquipment): Promise<Equipment> {\n    const [newEquipment] = await db.insert(equipment).values(equipmentData).returning();\n    return newEquipment;\n  }\n\n  async updateEquipment(id: string, equipmentData: Partial<InsertEquipment>): Promise<Equipment> {\n    const [updatedEquipment] = await db\n      .update(equipment)\n      .set({ ...equipmentData, updatedAt: new Date() })\n      .where(eq(equipment.id, id))\n      .returning();\n    return updatedEquipment;\n  }\n\n  async updateEquipmentWithTransferTracking(id: string, equipmentData: Partial<InsertEquipment>, updatedBy: string): Promise<Equipment> {\n    return await db.transaction(async (tx) => {\n      // Get current equipment state\n      const [currentEquipment] = await tx\n        .select()\n        .from(equipment)\n        .where(eq(equipment.id, id));\n\n      if (!currentEquipment) {\n        throw new Error(\"Equipment not found\");\n      }\n\n      // Track all field changes for audit log\n      const fieldsToAudit = ['name', 'type', 'quantity', 'status', 'atoll', 'island', 'description', 'condition'];\n      const auditEntries: any[] = [];\n\n      for (const field of fieldsToAudit) {\n        if (equipmentData[field as keyof typeof equipmentData] !== undefined) {\n          const oldValue = currentEquipment[field as keyof typeof currentEquipment];\n          const newValue = equipmentData[field as keyof typeof equipmentData];\n          \n          if (oldValue !== newValue) {\n            auditEntries.push({\n              equipmentId: id,\n              action: 'updated',\n              fieldName: field,\n              oldValue: oldValue?.toString() || null,\n              newValue: newValue?.toString() || null,\n              changedBy: updatedBy,\n              notes: `${field} changed from \"${oldValue}\" to \"${newValue}\"`\n            });\n          }\n        }\n      }\n\n      // Check if location is changing (for transfer record)\n      const locationChanged = \n        (equipmentData.atoll && equipmentData.atoll !== currentEquipment.atoll) ||\n        (equipmentData.island !== undefined && equipmentData.island !== currentEquipment.island);\n\n      // Update the equipment\n      const [updatedEquipment] = await tx\n        .update(equipment)\n        .set({ ...equipmentData, updatedAt: new Date() })\n        .where(eq(equipment.id, id))\n        .returning();\n\n      // Create audit log entries for all changes\n      if (auditEntries.length > 0) {\n        await tx.insert(equipmentAuditLog).values(auditEntries);\n      }\n\n      // If location changed, also create transfer record\n      if (locationChanged) {\n        const newAtoll = equipmentData.atoll || currentEquipment.atoll;\n        const newIsland = equipmentData.island !== undefined ? equipmentData.island : currentEquipment.island;\n\n        await tx.insert(equipmentTransfers).values({\n          sourceEquipmentId: id,\n          destinationEquipmentId: id, // Same equipment, just moved\n          quantityMoved: currentEquipment.quantity,\n          fromAtoll: currentEquipment.atoll,\n          fromIsland: currentEquipment.island,\n          toAtoll: newAtoll,\n          toIsland: newIsland,\n          transferredBy: updatedBy,\n          notes: `Equipment location updated via direct edit`\n        });\n      }\n\n      return updatedEquipment;\n    });\n  }\n\n  // Equipment transfer operations for complex quantity tracking\n  async transferEquipment(params: {\n    sourceEquipmentId: string;\n    quantityToMove: number;\n    destinationAtoll: string;\n    destinationIsland?: string;\n    transferredBy: string;\n    notes?: string;\n  }): Promise<{ sourceEquipment: Equipment; destinationEquipment: Equipment; transfer: EquipmentTransfer }> {\n    const { sourceEquipmentId, quantityToMove, destinationAtoll, destinationIsland, transferredBy, notes } = params;\n\n    return await db.transaction(async (tx) => {\n      // Get the source equipment\n      const [sourceEquipment] = await tx\n        .select()\n        .from(equipment)\n        .where(eq(equipment.id, sourceEquipmentId));\n\n      if (!sourceEquipment) {\n        throw new Error(\"Source equipment not found\");\n      }\n\n      if (sourceEquipment.quantity < quantityToMove) {\n        throw new Error(\"Insufficient quantity to transfer\");\n      }\n\n      // Check if destination already has same equipment type\n      const [existingDestination] = await tx\n        .select()\n        .from(equipment)\n        .where(and(\n          eq(equipment.name, sourceEquipment.name),\n          eq(equipment.type, sourceEquipment.type),\n          eq(equipment.atoll, destinationAtoll),\n          destinationIsland ? eq(equipment.island, destinationIsland) : isNull(equipment.island)\n        ));\n\n      let destinationEquipment: Equipment;\n\n      if (existingDestination) {\n        // Add to existing equipment at destination\n        const [updated] = await tx\n          .update(equipment)\n          .set({ \n            quantity: existingDestination.quantity + quantityToMove,\n            updatedAt: new Date()\n          })\n          .where(eq(equipment.id, existingDestination.id))\n          .returning();\n        destinationEquipment = updated;\n      } else {\n        // Create new equipment record at destination\n        const [created] = await tx\n          .insert(equipment)\n          .values({\n            name: sourceEquipment.name,\n            type: sourceEquipment.type,\n            quantity: quantityToMove,\n            status: sourceEquipment.status,\n            atoll: destinationAtoll,\n            island: destinationIsland || null,\n            description: sourceEquipment.description,\n            condition: sourceEquipment.condition,\n            parentEquipmentId: sourceEquipmentId,\n            createdBy: transferredBy,\n          })\n          .returning();\n        destinationEquipment = created;\n      }\n\n      // Create transfer record BEFORE updating/deleting source equipment\n      const [transfer] = await tx\n        .insert(equipmentTransfers)\n        .values({\n          sourceEquipmentId: sourceEquipmentId,\n          destinationEquipmentId: destinationEquipment.id,\n          quantityMoved: quantityToMove,\n          fromAtoll: sourceEquipment.atoll,\n          fromIsland: sourceEquipment.island,\n          toAtoll: destinationAtoll,\n          toIsland: destinationIsland,\n          transferredBy,\n          notes,\n        })\n        .returning();\n\n      // Update source equipment quantity\n      const [updatedSource] = await tx\n        .update(equipment)\n        .set({ \n          quantity: sourceEquipment.quantity - quantityToMove,\n          updatedAt: new Date()\n        })\n        .where(eq(equipment.id, sourceEquipmentId))\n        .returning();\n\n      // Keep equipment record even when quantity becomes 0 to preserve historical data\n      // This prevents foreign key constraint violations from islandVisitEquipment references\n\n      return {\n        sourceEquipment: updatedSource,\n        destinationEquipment,\n        transfer\n      };\n    });\n  }\n\n  async getEquipmentTransfers(equipmentId?: string): Promise<EquipmentTransfer[]> {\n    const query = db\n      .select()\n      .from(equipmentTransfers)\n      .orderBy(desc(equipmentTransfers.transferredAt));\n\n    if (equipmentId) {\n      return await query.where(\n        or(\n          eq(equipmentTransfers.sourceEquipmentId, equipmentId),\n          eq(equipmentTransfers.destinationEquipmentId, equipmentId)\n        )\n      );\n    }\n\n    return await query;\n  }\n\n  async getEquipmentTransfersWithUser(equipmentId?: string): Promise<EquipmentTransferWithUser[]> {\n    const query = db\n      .select({\n        id: equipmentTransfers.id,\n        sourceEquipmentId: equipmentTransfers.sourceEquipmentId,\n        destinationEquipmentId: equipmentTransfers.destinationEquipmentId,\n        quantityMoved: equipmentTransfers.quantityMoved,\n        fromAtoll: equipmentTransfers.fromAtoll,\n        fromIsland: equipmentTransfers.fromIsland,\n        toAtoll: equipmentTransfers.toAtoll,\n        toIsland: equipmentTransfers.toIsland,\n        transferredBy: equipmentTransfers.transferredBy,\n        transferredAt: equipmentTransfers.transferredAt,\n        notes: equipmentTransfers.notes,\n        transferredByUser: {\n          firstName: users.firstName,\n          lastName: users.lastName,\n          email: users.email,\n          serviceNumber: users.serviceNumber,\n        },\n      })\n      .from(equipmentTransfers)\n      .innerJoin(users, eq(equipmentTransfers.transferredBy, users.id))\n      .orderBy(desc(equipmentTransfers.transferredAt));\n\n    if (equipmentId) {\n      return await query.where(\n        or(\n          eq(equipmentTransfers.sourceEquipmentId, equipmentId),\n          eq(equipmentTransfers.destinationEquipmentId, equipmentId)\n        )\n      );\n    }\n\n    return await query;\n  }\n\n  async deleteEquipment(id: string): Promise<void> {\n    // With CASCADE DELETE on foreign keys, we can now simply delete the equipment\n    // and all related transfer records will be deleted automatically\n    await db.delete(equipment).where(eq(equipment.id, id));\n  }\n\n  async getEquipmentByType(type: string): Promise<Equipment[]> {\n    return await db\n      .select()\n      .from(equipment)\n      .where(eq(equipment.type, type))\n      .orderBy(equipment.name);\n  }\n\n  async getEquipmentByStatus(status: string): Promise<Equipment[]> {\n    return await db\n      .select()\n      .from(equipment)\n      .where(eq(equipment.status, status))\n      .orderBy(equipment.name);\n  }\n\n  // Chat message operations\n  async getChatMessages(limit = 100): Promise<ChatMessage[]> {\n    return await db\n      .select()\n      .from(chatMessages)\n      .orderBy(desc(chatMessages.createdAt))\n      .limit(limit);\n  }\n\n  async createChatMessage(messageData: InsertChatMessage): Promise<ChatMessage> {\n    const [message] = await db\n      .insert(chatMessages)\n      .values(messageData)\n      .returning();\n    return message;\n  }\n\n  async deleteChatMessage(messageId: string): Promise<boolean> {\n    const result = await db\n      .delete(chatMessages)\n      .where(eq(chatMessages.id, messageId))\n      .returning();\n    return result.length > 0;\n  }\n\n  async deleteChatMessagesByUserId(userId: string): Promise<number> {\n    const result = await db\n      .delete(chatMessages)\n      .where(eq(chatMessages.userId, userId))\n      .returning();\n    return result.length;\n  }\n\n  // Chat read status operations\n  async markMessagesAsRead(userId: string, lastReadMessageId: string): Promise<UserChatReadStatus> {\n    // Get the creation timestamp of the message being marked as read\n    const [message] = await db\n      .select({ createdAt: chatMessages.createdAt })\n      .from(chatMessages)\n      .where(eq(chatMessages.id, lastReadMessageId))\n      .limit(1);\n    \n    if (!message) {\n      throw new Error(`Message with ID ${lastReadMessageId} not found`);\n    }\n\n    const newCreatedAt = message.createdAt!;\n\n    // Use atomic upsert with conditional update to ensure monotonicity at database level\n    const [readStatus] = await db\n      .insert(userChatReadStatus)\n      .values({\n        userId,\n        lastReadMessageId,\n        lastReadCreatedAt: newCreatedAt,\n        lastReadAt: new Date(),\n      })\n      .onConflictDoUpdate({\n        target: [userChatReadStatus.userId],\n        set: {\n          lastReadCreatedAt: sql`CASE WHEN ${userChatReadStatus.lastReadCreatedAt} IS NULL OR EXCLUDED.last_read_created_at > ${userChatReadStatus.lastReadCreatedAt} THEN EXCLUDED.last_read_created_at ELSE ${userChatReadStatus.lastReadCreatedAt} END`,\n          lastReadMessageId: sql`CASE WHEN ${userChatReadStatus.lastReadCreatedAt} IS NULL OR EXCLUDED.last_read_created_at > ${userChatReadStatus.lastReadCreatedAt} THEN EXCLUDED.last_read_message_id ELSE ${userChatReadStatus.lastReadMessageId} END`,\n          lastReadAt: sql`CASE WHEN ${userChatReadStatus.lastReadCreatedAt} IS NULL OR EXCLUDED.last_read_created_at > ${userChatReadStatus.lastReadCreatedAt} THEN now() ELSE ${userChatReadStatus.lastReadAt} END`,\n        }\n      })\n      .returning();\n    \n    return readStatus;\n  }\n\n  async getUnreadMessageCount(userId: string): Promise<number> {\n    // Get user's last read timestamp\n    const [readStatus] = await db\n      .select()\n      .from(userChatReadStatus)\n      .where(eq(userChatReadStatus.userId, userId))\n      .limit(1);\n\n    if (!readStatus?.lastReadCreatedAt) {\n      // User has never read any messages, count all messages except their own\n      const [result] = await db\n        .select({ count: sql<number>`count(*)` })\n        .from(chatMessages)\n        .where(sql`${chatMessages.userId} != ${userId}`);\n      return result?.count || 0;\n    }\n\n    // Count messages newer than the last read timestamp, excluding user's own messages\n    const [result] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(chatMessages)\n      .where(\n        and(\n          sql`${chatMessages.createdAt} > ${readStatus.lastReadCreatedAt}`,\n          sql`${chatMessages.userId} != ${userId}`\n        )\n      );\n\n    return result?.count || 0;\n  }\n\n  async getUserChatReadStatus(userId: string): Promise<UserChatReadStatus | null> {\n    const [readStatus] = await db\n      .select()\n      .from(userChatReadStatus)\n      .where(eq(userChatReadStatus.userId, userId))\n      .limit(1);\n    \n    return readStatus || null;\n  }\n\n  // Equipment audit log operations\n  async getEquipmentAuditLogs(equipmentId?: string): Promise<EquipmentAuditLog[]> {\n    const query = db\n      .select()\n      .from(equipmentAuditLog)\n      .orderBy(desc(equipmentAuditLog.changedAt));\n\n    if (equipmentId) {\n      return await query.where(eq(equipmentAuditLog.equipmentId, equipmentId));\n    }\n\n    return await query;\n  }\n\n  async getEquipmentAuditLogsWithUser(equipmentId?: string) {\n    const baseQuery = db\n      .select({\n        id: equipmentAuditLog.id,\n        equipmentId: equipmentAuditLog.equipmentId,\n        action: equipmentAuditLog.action,\n        fieldName: equipmentAuditLog.fieldName,\n        oldValue: equipmentAuditLog.oldValue,\n        newValue: equipmentAuditLog.newValue,\n        changedBy: equipmentAuditLog.changedBy,\n        changedAt: equipmentAuditLog.changedAt,\n        notes: equipmentAuditLog.notes,\n        changedByUser: {\n          firstName: users.firstName,\n          lastName: users.lastName,\n          email: users.email,\n          serviceNumber: users.serviceNumber,\n        }\n      })\n      .from(equipmentAuditLog)\n      .innerJoin(users, eq(equipmentAuditLog.changedBy, users.id))\n      .orderBy(desc(equipmentAuditLog.changedAt));\n\n    if (equipmentId) {\n      return await baseQuery.where(eq(equipmentAuditLog.equipmentId, equipmentId));\n    }\n\n    return await baseQuery;\n  }\n\n  // Milestone operations\n  async getUserMilestones(userId: string): Promise<UserMilestone[]> {\n    return await db\n      .select()\n      .from(userMilestones)\n      .where(eq(userMilestones.userId, userId))\n      .orderBy(desc(userMilestones.achievedAt));\n  }\n\n  async createOrUpdateMilestone(milestone: InsertUserMilestone): Promise<UserMilestone> {\n    // Use atomic upsert to prevent race conditions\n    const [result] = await db\n      .insert(userMilestones)\n      .values({\n        ...milestone,\n        achievedAt: milestone.progress >= milestone.targetValue ? new Date() : null\n      })\n      .onConflictDoUpdate({\n        target: [userMilestones.userId, userMilestones.milestoneType, userMilestones.milestoneLevel],\n        set: {\n          progress: sql`GREATEST(${userMilestones.progress}, ${milestone.progress})`,\n          achievedAt: milestone.progress >= milestone.targetValue ? new Date() : sql`${userMilestones.achievedAt}`,\n          description: milestone.description,\n          badgeIcon: milestone.badgeIcon,\n          badgeColor: milestone.badgeColor,\n          targetValue: milestone.targetValue\n        }\n      })\n      .returning();\n    \n    return result;\n  }\n\n  async getUserVisitStats(userId: string): Promise<{ totalIslands: number; totalVisits: number; uniqueAtolls: number }> {\n    // Get total visits count\n    const totalVisitsResult = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(islandVisits)\n      .where(eq(islandVisits.userId, userId));\n\n    // Get unique islands count\n    const uniqueIslandsResult = await db\n      .select({ count: sql<number>`count(distinct ${islandVisits.islandId})` })\n      .from(islandVisits)\n      .where(eq(islandVisits.userId, userId));\n\n    // Get unique atolls count\n    const uniqueAtollsResult = await db\n      .select({ count: sql<number>`count(distinct ${islands.atoll})` })\n      .from(islandVisits)\n      .innerJoin(islands, eq(islandVisits.islandId, islands.id))\n      .where(eq(islandVisits.userId, userId));\n\n    return {\n      totalVisits: totalVisitsResult[0]?.count || 0,\n      totalIslands: uniqueIslandsResult[0]?.count || 0,\n      uniqueAtolls: uniqueAtollsResult[0]?.count || 0\n    };\n  }\n\n  async getUserIslandVisitHistory(userId: string): Promise<Array<IslandVisit & { island: Island; equipment: Equipment[] }>> {\n    // Get visits with island details\n    const visits = await db\n      .select({\n        id: islandVisits.id,\n        islandId: islandVisits.islandId,\n        userId: islandVisits.userId,\n        visitedAt: islandVisits.visitedAt,\n        visitType: islandVisits.visitType,\n        notes: islandVisits.notes,\n        island: {\n          id: islands.id,\n          name: islands.name,\n          atoll: islands.atoll,\n          latitude: islands.latitude,\n          longitude: islands.longitude,\n          isVisited: islands.isVisited,\n          lastVisited: islands.lastVisited,\n        }\n      })\n      .from(islandVisits)\n      .innerJoin(islands, eq(islandVisits.islandId, islands.id))\n      .where(eq(islandVisits.userId, userId))\n      .orderBy(desc(islandVisits.visitedAt));\n\n    // Get equipment for each visit\n    const visitIds = visits.map(v => v.id);\n    const visitEquipment = visitIds.length > 0 ? await db\n      .select({\n        visitId: islandVisitEquipment.visitId,\n        equipment: {\n          id: equipment.id,\n          name: equipment.name,\n          type: equipment.type,\n          quantity: equipment.quantity,\n          status: equipment.status,\n          atoll: equipment.atoll,\n          island: equipment.island,\n          description: equipment.description,\n          condition: equipment.condition,\n          parentEquipmentId: equipment.parentEquipmentId,\n          createdBy: equipment.createdBy,\n          createdAt: equipment.createdAt,\n          updatedAt: equipment.updatedAt,\n        }\n      })\n      .from(islandVisitEquipment)\n      .innerJoin(equipment, eq(islandVisitEquipment.equipmentId, equipment.id))\n      .where(inArray(islandVisitEquipment.visitId, visitIds)) : [];\n\n    // Group equipment by visit ID\n    const equipmentByVisit: Record<string, Equipment[]> = {};\n    visitEquipment.forEach(ve => {\n      if (!equipmentByVisit[ve.visitId]) {\n        equipmentByVisit[ve.visitId] = [];\n      }\n      equipmentByVisit[ve.visitId].push(ve.equipment);\n    });\n\n    // Combine visits with their equipment\n    return visits.map(visit => ({\n      ...visit,\n      equipment: equipmentByVisit[visit.id] || []\n    }));\n  }\n\n  async getIslandVisitHistory(islandId: string, userId: string): Promise<Array<IslandVisit & { equipmentUsed: string[] }>> {\n    // Get visits for the specific island and user\n    const visits = await db\n      .select({\n        id: islandVisits.id,\n        islandId: islandVisits.islandId,\n        userId: islandVisits.userId,\n        visitedAt: islandVisits.visitedAt,\n        visitType: islandVisits.visitType,\n        notes: islandVisits.notes,\n      })\n      .from(islandVisits)\n      .where(and(\n        eq(islandVisits.islandId, islandId),\n        eq(islandVisits.userId, userId)\n      ))\n      .orderBy(desc(islandVisits.visitedAt));\n\n    // Get equipment for each visit\n    const visitIds = visits.map(v => v.id);\n    const visitEquipment = visitIds.length > 0 ? await db\n      .select({\n        visitId: islandVisitEquipment.visitId,\n        equipmentName: equipment.name,\n      })\n      .from(islandVisitEquipment)\n      .innerJoin(equipment, eq(islandVisitEquipment.equipmentId, equipment.id))\n      .where(inArray(islandVisitEquipment.visitId, visitIds)) : [];\n\n    // Group equipment names by visit ID\n    const equipmentByVisit: Record<string, string[]> = {};\n    visitEquipment.forEach(ve => {\n      if (!equipmentByVisit[ve.visitId]) {\n        equipmentByVisit[ve.visitId] = [];\n      }\n      equipmentByVisit[ve.visitId].push(ve.equipmentName);\n    });\n\n    // Combine visits with their equipment names\n    return visits.map(visit => ({\n      ...visit,\n      equipmentUsed: equipmentByVisit[visit.id] || []\n    }));\n  }\n\n  async checkAndUpdateMilestones(userId: string): Promise<UserMilestone[]> {\n    const stats = await this.getUserVisitStats(userId);\n    \n    // Define milestone definitions - adjusted for 198 total islands and 20 total atolls\n    const milestoneDefinitions = [\n      // Island visit milestones (198 total islands)\n      { type: \"island_visits\", name: \"First Step\", level: 1, target: 1, description: \"Visit your first island\", icon: \"🏝️\", color: \"#22C55E\" },\n      { type: \"island_visits\", name: \"Explorer\", level: 3, target: 3, description: \"Visit 3 different islands\", icon: \"🗺️\", color: \"#3B82F6\" },\n      { type: \"island_visits\", name: \"Adventurer\", level: 5, target: 5, description: \"Visit 5 different islands\", icon: \"🧭\", color: \"#8B5CF6\" },\n      { type: \"island_visits\", name: \"Navigator\", level: 10, target: 10, description: \"Visit 10 different islands\", icon: \"⛵\", color: \"#10B981\" },\n      { type: \"island_visits\", name: \"Island Hopper\", level: 20, target: 20, description: \"Visit 20 different islands\", icon: \"🏄\", color: \"#F59E0B\" },\n      { type: \"island_visits\", name: \"Seasoned Traveler\", level: 35, target: 35, description: \"Visit 35 different islands\", icon: \"🎒\", color: \"#EF4444\" },\n      { type: \"island_visits\", name: \"Island Master\", level: 55, target: 55, description: \"Visit 55 different islands\", icon: \"🏆\", color: \"#DC2626\" },\n      { type: \"island_visits\", name: \"Expert Explorer\", level: 80, target: 80, description: \"Visit 80 different islands\", icon: \"⭐\", color: \"#9333EA\" },\n      { type: \"island_visits\", name: \"Archipelago Legend\", level: 120, target: 120, description: \"Visit 120 different islands\", icon: \"👑\", color: \"#DB2777\" },\n      { type: \"island_visits\", name: \"Ultimate Explorer\", level: 170, target: 170, description: \"Visit 170 different islands\", icon: \"💎\", color: \"#059669\" },\n      { type: \"island_visits\", name: \"Completionist\", level: 198, target: 198, description: \"Visit all 198 islands in the Maldives\", icon: \"🌟\", color: \"#DC2626\" },\n      \n      // Atoll exploration milestones (20 total atolls)\n      { type: \"atolls_visited\", name: \"Atoll Starter\", level: 1, target: 1, description: \"Visit islands in your first atoll\", icon: \"🌊\", color: \"#06B6D4\" },\n      { type: \"atolls_visited\", name: \"Atoll Explorer\", level: 3, target: 3, description: \"Visit islands in 3 different atolls\", icon: \"🌴\", color: \"#10B981\" },\n      { type: \"atolls_visited\", name: \"Atoll Navigator\", level: 5, target: 5, description: \"Visit islands in 5 different atolls\", icon: \"🧭\", color: \"#8B5CF6\" },\n      { type: \"atolls_visited\", name: \"Atoll Master\", level: 8, target: 8, description: \"Visit islands in 8 different atolls\", icon: \"🏝️\", color: \"#F59E0B\" },\n      { type: \"atolls_visited\", name: \"Atoll Expert\", level: 12, target: 12, description: \"Visit islands in 12 different atolls\", icon: \"⛵\", color: \"#EF4444\" },\n      { type: \"atolls_visited\", name: \"Maldives Explorer\", level: 16, target: 16, description: \"Visit islands in 16 different atolls\", icon: \"🗺️\", color: \"#DC2626\" },\n      { type: \"atolls_visited\", name: \"Atoll Legend\", level: 20, target: 20, description: \"Visit islands in all 20 atolls\", icon: \"👑\", color: \"#9333EA\" },\n    ].sort((a, b) => a.target - b.target); // Sort by target from low to high\n\n    const newMilestones: UserMilestone[] = [];\n\n    for (const def of milestoneDefinitions) {\n      const progress = def.type === \"island_visits\" ? stats.totalIslands : stats.uniqueAtolls;\n      \n      // Create or update milestone\n      const milestone = await this.createOrUpdateMilestone({\n        userId,\n        milestoneType: def.type as \"island_visits\" | \"atolls_visited\",\n        milestoneName: def.name,\n        milestoneLevel: def.level,\n        description: def.description,\n        badgeIcon: def.icon,\n        badgeColor: def.color,\n        progress,\n        targetValue: def.target\n      });\n\n      // If milestone was just achieved, add to new milestones\n      if (progress >= def.target && milestone.achievedAt) {\n        newMilestones.push(milestone);\n      }\n    }\n\n    return newMilestones;\n  }\n\n  // Admin milestone operations\n  async clearAllUserMilestones(): Promise<number> {\n    const result = await db.delete(userMilestones);\n    return result.rowCount || 0;\n  }\n\n  async clearUserMilestones(userId: string): Promise<number> {\n    const result = await db\n      .delete(userMilestones)\n      .where(eq(userMilestones.userId, userId));\n    return result.rowCount || 0;\n  }\n\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":51807},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  uniqueIndex,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  serviceNumber: varchar(\"service_number\").unique(),\n  mobile: varchar(\"mobile\"),\n  role: varchar(\"role\").default(\"agent\").notNull(), // agent, coordinator, admin, attachment\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  approvalStatus: varchar(\"approval_status\").default(\"pending\").notNull(), // pending, approved, rejected\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Events table\nexport const events = pgTable(\"events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  island: varchar(\"island\").notNull(),\n  atoll: varchar(\"atoll\").notNull(),\n  eventLocation: text(\"event_location\"),\n  waitingLocation: text(\"waiting_location\"),\n  contact: varchar(\"contact\"),\n  comment: text(\"comment\"),\n  photoUrl: varchar(\"photo_url\"), // URL to stored photo in App Storage\n  latitude: varchar(\"latitude\"), // GPS coordinates for location-based events\n  longitude: varchar(\"longitude\"), // GPS coordinates for location-based events\n  status: varchar(\"status\").default(\"scheduled\").notNull(), // scheduled, active, completed, cancelled, archived\n  participantCount: integer(\"participant_count\").default(0),\n  createdBy: varchar(\"created_by\").references(() => users.id, { onDelete: \"set null\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Event participants table\nexport const eventParticipants = pgTable(\"event_participants\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventId: varchar(\"event_id\").references(() => events.id, { onDelete: \"cascade\" }).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  joinedAt: timestamp(\"joined_at\").defaultNow(),\n});\n\n// Islands table\nexport const islands = pgTable(\"islands\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  atoll: varchar(\"atoll\").notNull(),\n  latitude: varchar(\"latitude\"),\n  longitude: varchar(\"longitude\"),\n  isVisited: boolean(\"is_visited\").default(false),\n  lastVisited: timestamp(\"last_visited\"),\n});\n\n// Island visits table to track check-ins with equipment\nexport const islandVisits = pgTable(\"island_visits\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  islandId: varchar(\"island_id\").references(() => islands.id, { onDelete: \"cascade\" }).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  visitedAt: timestamp(\"visited_at\").defaultNow(),\n  visitType: varchar(\"visit_type\").default(\"manual\").notNull(), // manual, automatic\n  notes: text(\"notes\"),\n});\n\n// Island visit equipment table to track which equipment was used during check-ins\nexport const islandVisitEquipment = pgTable(\"island_visit_equipment\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  visitId: varchar(\"visit_id\").references(() => islandVisits.id, { onDelete: \"cascade\" }).notNull(),\n  equipmentId: varchar(\"equipment_id\").references(() => equipment.id, { onDelete: \"cascade\" }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  // Unique constraint to prevent duplicate visit-equipment links\n  uniqueIndex(\"unique_visit_equipment\").on(table.visitId, table.equipmentId),\n]);\n\n// Equipment table\nexport const equipment = pgTable(\"equipment\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  type: varchar(\"type\").notNull(), // tools, electronics, visual, network, others\n  quantity: integer(\"quantity\").default(1).notNull(),\n  status: varchar(\"status\").default(\"available\").notNull(), // available, in_use, maintenance, damaged\n  atoll: varchar(\"atoll\").notNull(),\n  island: varchar(\"island\"),\n  description: text(\"description\"),\n  condition: varchar(\"condition\").default(\"good\").notNull(), // excellent, good, fair, poor\n  parentEquipmentId: varchar(\"parent_equipment_id\"), // Links to original equipment when split/moved\n  createdBy: varchar(\"created_by\").references(() => users.id, { onDelete: \"set null\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  // Unique constraint to prevent duplicate equipment records at the same location\n  uniqueIndex(\"unique_equipment_location\").on(table.name, table.type, table.atoll, table.island),\n]);\n\n// Equipment transfers table to track movement history\nexport const equipmentTransfers = pgTable(\"equipment_transfers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sourceEquipmentId: varchar(\"source_equipment_id\").references(() => equipment.id, { onDelete: \"set null\" }),\n  destinationEquipmentId: varchar(\"destination_equipment_id\").references(() => equipment.id, { onDelete: \"set null\" }),\n  quantityMoved: integer(\"quantity_moved\").notNull(),\n  fromAtoll: varchar(\"from_atoll\").notNull(),\n  fromIsland: varchar(\"from_island\"),\n  toAtoll: varchar(\"to_atoll\").notNull(),\n  toIsland: varchar(\"to_island\"),\n  transferredBy: varchar(\"transferred_by\").references(() => users.id, { onDelete: \"set null\" }),\n  transferredAt: timestamp(\"transferred_at\").defaultNow(),\n  notes: text(\"notes\"),\n});\n\n// Equipment audit log table to track all changes\nexport const equipmentAuditLog = pgTable(\"equipment_audit_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  equipmentId: varchar(\"equipment_id\").references(() => equipment.id, { onDelete: \"cascade\" }).notNull(),\n  action: varchar(\"action\").notNull(), // created, updated, deleted\n  fieldName: varchar(\"field_name\"), // Which field was changed (status, condition, etc.)\n  oldValue: text(\"old_value\"), // Previous value\n  newValue: text(\"new_value\"), // New value\n  changedBy: varchar(\"changed_by\").references(() => users.id, { onDelete: \"set null\" }),\n  changedAt: timestamp(\"changed_at\").defaultNow(),\n  notes: text(\"notes\"),\n});\n\n// Chat messages table\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  userName: varchar(\"user_name\").notNull(),\n  message: text(\"message\"), // For text messages\n  audioUrl: varchar(\"audio_url\"), // For audio messages\n  isAudio: boolean(\"is_audio\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  // Index for efficient timestamp-based queries\n  createdAtIndex: index(\"chat_messages_created_at_index\").on(table.createdAt),\n}));\n\n// User chat read status table to track which messages each user has read\nexport const userChatReadStatus = pgTable(\"user_chat_read_status\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  lastReadMessageId: varchar(\"last_read_message_id\").references(() => chatMessages.id, { onDelete: \"set null\" }),\n  lastReadCreatedAt: timestamp(\"last_read_created_at\"),\n  lastReadAt: timestamp(\"last_read_at\").defaultNow(),\n}, (table) => ({\n  // Unique constraint to ensure one read status per user\n  uniqueUserReadStatus: uniqueIndex(\"unique_user_read_status\").on(table.userId),\n}));\n\n// User milestones table to track badges and achievements\nexport const userMilestones = pgTable(\"user_milestones\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  milestoneType: varchar(\"milestone_type\").notNull(), // island_visits, events_created, equipment_used, etc.\n  milestoneName: varchar(\"milestone_name\").notNull(), // Explorer, Navigator, Adventurer, etc.\n  milestoneLevel: integer(\"milestone_level\").notNull(), // 1, 5, 10, 25, 50, 100, etc.\n  description: text(\"description\").notNull(),\n  badgeIcon: varchar(\"badge_icon\").notNull(), // emoji or icon identifier\n  badgeColor: varchar(\"badge_color\").default(\"#3B82F6\").notNull(), // hex color code\n  achievedAt: timestamp(\"achieved_at\").defaultNow(),\n  progress: integer(\"progress\").notNull(), // current count towards milestone\n  targetValue: integer(\"target_value\").notNull(), // required count to achieve milestone\n}, (table) => ({\n  // Unique constraint to prevent duplicate milestones per user\n  uniqueUserMilestone: uniqueIndex(\"unique_user_milestone\").on(table.userId, table.milestoneType, table.milestoneLevel),\n}));\n\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  email: z.string().email(\"Invalid email address\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  role: z.enum([\"agent\", \"coordinator\", \"admin\", \"attachment\"]).default(\"agent\"),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\n// Equipment types and schemas\nexport type Equipment = typeof equipment.$inferSelect;\nexport type InsertEquipment = typeof equipment.$inferInsert;\nexport type EquipmentTransfer = typeof equipmentTransfers.$inferSelect;\nexport type InsertEquipmentTransfer = typeof equipmentTransfers.$inferInsert;\nexport type EquipmentAuditLog = typeof equipmentAuditLog.$inferSelect;\nexport type InsertEquipmentAuditLog = typeof equipmentAuditLog.$inferInsert;\n\n// Enhanced transfer type with user details\nexport type EquipmentTransferWithUser = EquipmentTransfer & {\n  transferredByUser: {\n    firstName: string | null;\n    lastName: string | null;\n    email: string | null;\n    serviceNumber: string | null;\n  };\n};\n\nexport const insertEquipmentSchema = createInsertSchema(equipment).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  createdBy: true,\n}).extend({\n  name: z.string().min(1, \"Equipment name is required\"),\n  type: z.enum([\"tools\", \"electronics\", \"visual\", \"network\", \"others\"]),\n  quantity: z.number().int().min(1, \"Quantity must be at least 1\"),\n  status: z.enum([\"available\", \"in_use\", \"maintenance\", \"damaged\"]),\n  condition: z.enum([\"excellent\", \"good\", \"fair\", \"poor\"]),\n  atoll: z.string().min(1, \"Atoll is required\"),\n});\n\nexport const equipmentTransferSchema = createInsertSchema(equipmentTransfers).omit({\n  id: true,\n  transferredAt: true,\n  transferredBy: true,\n});\n\nexport const insertEventSchema = createInsertSchema(events).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  participantCount: true,\n});\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\nexport type Event = typeof events.$inferSelect;\n\nexport const insertIslandSchema = createInsertSchema(islands).omit({\n  id: true,\n});\nexport type InsertIsland = z.infer<typeof insertIslandSchema>;\nexport type Island = typeof islands.$inferSelect;\n\n// Type for islands with user visit status (used in API responses)\nexport type IslandWithUserVisitStatus = Island & {\n  hasVisited: boolean;\n};\n\n// Island visit types and schemas\nexport const insertIslandVisitSchema = createInsertSchema(islandVisits).omit({\n  id: true,\n  visitedAt: true,\n});\nexport type InsertIslandVisit = z.infer<typeof insertIslandVisitSchema>;\nexport type IslandVisit = typeof islandVisits.$inferSelect;\n\nexport const insertIslandVisitEquipmentSchema = createInsertSchema(islandVisitEquipment).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertIslandVisitEquipment = z.infer<typeof insertIslandVisitEquipmentSchema>;\nexport type IslandVisitEquipment = typeof islandVisitEquipment.$inferSelect;\n\nexport type EventParticipant = typeof eventParticipants.$inferSelect;\n\n// Chat message types and schemas\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = typeof chatMessages.$inferInsert;\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  userName: z.string().min(1, \"User name is required\"),\n  message: z.string().optional(),\n  audioUrl: z.string().optional(),\n  isAudio: z.boolean().default(false),\n}).refine((data) => {\n  // Either message or audioUrl must be provided, but not both\n  return (data.message && !data.audioUrl) || (!data.message && data.audioUrl);\n}, {\n  message: \"Either message or audioUrl must be provided, but not both\",\n});\n\n// User chat read status types and schemas\nexport type UserChatReadStatus = typeof userChatReadStatus.$inferSelect;\nexport type InsertUserChatReadStatus = typeof userChatReadStatus.$inferInsert;\n\nexport const insertUserChatReadStatusSchema = createInsertSchema(userChatReadStatus).omit({\n  id: true,\n  lastReadAt: true,\n});\n\n// User milestone types and schemas\nexport type UserMilestone = typeof userMilestones.$inferSelect;\nexport type InsertUserMilestone = typeof userMilestones.$inferInsert;\n\nexport const insertUserMilestoneSchema = createInsertSchema(userMilestones).omit({\n  id: true,\n  achievedAt: true,\n}).extend({\n  milestoneType: z.enum([\"island_visits\", \"events_created\", \"equipment_used\", \"atolls_visited\"]),\n  milestoneName: z.string().min(1, \"Milestone name is required\"),\n  milestoneLevel: z.number().int().min(1, \"Milestone level must be at least 1\"),\n  description: z.string().min(1, \"Description is required\"),\n  badgeIcon: z.string().min(1, \"Badge icon is required\"),\n  badgeColor: z.string().min(7, \"Badge color must be a valid hex color\").max(7),\n  progress: z.number().int().min(0, \"Progress cannot be negative\"),\n  targetValue: z.number().int().min(1, \"Target value must be at least 1\"),\n});\n\n","size_bytes":14456},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport PendingApproval from \"@/pages/pending-approval\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Events from \"@/pages/events\";\nimport Members from \"@/pages/members\";\nimport Map from \"@/pages/map\";\nimport Equipment from \"@/pages/equipment\";\nimport Archive from \"@/pages/archive\";\nimport Admin from \"@/pages/admin\";\nimport Profile from \"@/pages/profile\";\nimport Navigation from \"@/components/navigation\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, isPendingApproval, isApproved } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : isPendingApproval ? (\n        <Route path=\"*\" component={PendingApproval} />\n      ) : (\n        <>\n          <div className=\"flex min-h-screen bg-background\">\n            <Navigation />\n            <main className=\"flex-1 pt-20 lg:pt-0 pb-16 lg:pb-0 lg:ml-64 xl:ml-64\">\n              <Switch>\n                <Route path=\"/\" component={Dashboard} />\n                <Route path=\"/events\" component={Events} />\n                <Route path=\"/event\" component={Events} />\n                <Route path=\"/members\" component={Members} />\n                <Route path=\"/map\" component={Map} />\n                <Route path=\"/equipment\" component={Equipment} />\n                <Route path=\"/archive\" component={Archive} />\n                <Route path=\"/admin\" component={Admin} />\n                <Route path=\"/profile\" component={Profile} />\n                <Route component={NotFound} />\n              </Switch>\n            </main>\n          </div>\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2485},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(200, 89%, 32%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(200, 82%, 58%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(24, 95%, 53%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(200, 89%, 32%);\n  --chart-1: hsl(200, 89%, 32%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(200, 89%, 32%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-accent-foreground: hsl(200, 89%, 32%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(200, 89%, 32%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  \n  /* Z-index layering system */\n  --z-dropdown: 1000;\n  --z-sticky: 1020;\n  --z-fixed: 1030;\n  --z-modal-backdrop: 1040;\n  --z-modal: 1050;\n  --z-popover: 1060;\n  --z-overlay-modal-backdrop: 1070;\n  --z-overlay-modal: 1080;\n  --z-tooltip: 1090;\n  --z-toast: 1100;\n  --shadow-2xs: 0px 2px 0px 0px hsl(200, 89%, 32%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(200, 89%, 32%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(200, 89%, 32%, 0.00), 0px 1px 2px -1px hsl(200, 89%, 32%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(200, 89%, 32%, 0.00), 0px 1px 2px -1px hsl(200, 89%, 32%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(200, 89%, 32%, 0.00), 0px 2px 4px -1px hsl(200, 89%, 32%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(200, 89%, 32%, 0.00), 0px 4px 6px -1px hsl(200, 89%, 32%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(200, 89%, 32%, 0.00), 0px 8px 10px -1px hsl(200, 89%, 32%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(200, 89%, 32%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(200, 82%, 58%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(24, 95%, 53%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(200, 82%, 58%);\n  --sidebar: hsl(222.2, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(200, 82%, 58%);\n  --sidebar-primary-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-accent: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-accent-foreground: hsl(200, 82%, 58%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(200, 82%, 58%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  /* Overlay modal styles for dialogs that appear over other modals */\n  .dialog-overlay-modal [data-radix-dialog-overlay] {\n    z-index: var(--z-overlay-modal-backdrop) !important;\n  }\n  \n  .dialog-overlay-modal [data-radix-dialog-content] {\n    z-index: var(--z-overlay-modal) !important;\n  }\n\n  /* Custom location marker styles - Google Maps inspired */\n  .custom-location-icon {\n    background: transparent !important;\n    border: none !important;\n  }\n\n  .current-location-marker {\n    position: relative;\n    width: 40px;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .location-pulse {\n    position: absolute;\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background: rgba(59, 130, 246, 0.2);\n    border: 2px solid rgba(59, 130, 246, 0.3);\n    animation: location-pulse 2s ease-out infinite;\n    z-index: 1;\n  }\n\n  .location-dot {\n    width: 16px;\n    height: 16px;\n    background: #3b82f6;\n    border-radius: 50%;\n    border: 3px solid white;\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\n    z-index: 2;\n    position: relative;\n  }\n\n  @keyframes location-pulse {\n    0% {\n      transform: scale(0.8);\n      opacity: 1;\n    }\n    100% {\n      transform: scale(1.2);\n      opacity: 0;\n    }\n  }\n\n  /* New directional location marker styles */\n  .location-marker {\n    position: relative;\n    z-index: 2;\n    transition: transform 0.3s ease-out;\n    transform-origin: center;\n  }\n\n  .dot-marker {\n    width: 16px;\n    height: 16px;\n    background: #3b82f6;\n    border-radius: 50%;\n    border: 3px solid white;\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);\n  }\n\n  .directional-marker {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 20px;\n    height: 20px;\n    color: #dc2626;\n    font-size: 16px;\n    font-weight: bold;\n    background: rgba(255, 255, 255, 0.95);\n    border-radius: 50%;\n    border: 2px solid #dc2626;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\n    text-shadow: 0 0 2px rgba(255, 255, 255, 0.8);\n  }\n\n  /* Compass button styling */\n  .compass-needle {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 18px;\n    transform-origin: center;\n    transition: transform 0.3s ease-out;\n  }\n\n  /* Compass button animations */\n  @keyframes compass-active-pulse {\n    0%, 100% {\n      box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.4);\n    }\n    50% {\n      box-shadow: 0 0 0 4px rgba(239, 68, 68, 0.1);\n    }\n  }\n\n  .compass-active {\n    animation: compass-active-pulse 2s infinite;\n  }\n\n  /* Direction arrow styles */\n  .route-arrow-icon {\n    background: transparent !important;\n    border: none !important;\n  }\n\n  .route-direction-arrow {\n    transform: rotate(var(--rotation, 0deg));\n    transform-origin: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 16px;\n    height: 16px;\n  }\n\n  .arrow-glyph {\n    color: #3b82f6;\n    font-size: 12px;\n    font-weight: bold;\n    text-shadow: 0 0 3px rgba(255, 255, 255, 0.8);\n    animation: arrow-pulse 2s ease-in-out infinite;\n    display: block;\n  }\n\n  @keyframes arrow-pulse {\n    0%, 100% {\n      opacity: 0.7;\n      transform: scale(1);\n    }\n    50% {\n      opacity: 1;\n      transform: scale(1.1);\n    }\n  }\n\n  /* Enhanced route visualization styles */\n  .route-step-icon {\n    background: transparent !important;\n    border: none !important;\n  }\n\n  .route-step-marker {\n    width: 24px;\n    height: 24px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n    animation: route-marker-bounce 0.5s ease-out;\n  }\n\n  .route-step-number {\n    width: 20px;\n    height: 20px;\n    background: linear-gradient(135deg, #3b82f6, #1d4ed8);\n    color: white;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 10px;\n    font-weight: bold;\n    border: 2px solid white;\n    box-shadow: 0 2px 8px rgba(59, 130, 246, 0.4), \n                0 0 0 1px rgba(59, 130, 246, 0.2);\n    transition: all 0.3s ease;\n  }\n\n  .route-step-marker:hover .route-step-number {\n    transform: scale(1.1);\n    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.6),\n                0 0 0 2px rgba(59, 130, 246, 0.3);\n  }\n\n  /* Route line animations */\n  .route-line-gradient-segment {\n    stroke-linecap: round;\n    stroke-linejoin: round;\n    animation: route-draw 1.5s ease-out forwards;\n    animation-delay: calc(var(--segment-index, 0) * 0.05s);\n  }\n\n  .route-line-shadow {\n    stroke-linecap: round;\n    stroke-linejoin: round;\n  }\n\n  @keyframes route-marker-bounce {\n    0% {\n      transform: scale(0) translateY(-20px);\n      opacity: 0;\n    }\n    50% {\n      transform: scale(1.2) translateY(-5px);\n      opacity: 0.8;\n    }\n    100% {\n      transform: scale(1) translateY(0);\n      opacity: 1;\n    }\n  }\n\n  @keyframes route-draw {\n    0% {\n      stroke-dasharray: 0, 1000;\n    }\n    100% {\n      stroke-dasharray: 1000, 0;\n    }\n  }\n\n  /* Modern directions panel animations */\n  .directions-slide-up {\n    animation: directions-slide-up 0.3s ease-out;\n  }\n\n  @keyframes directions-slide-up {\n    0% {\n      transform: translateY(100%);\n      opacity: 0;\n    }\n    100% {\n      transform: translateY(0);\n      opacity: 1;\n    }\n  }\n\n  /* Progress indicator styles */\n  .step-progress-bar {\n    position: relative;\n    background: linear-gradient(90deg, #10b981, #3b82f6);\n    height: 3px;\n    border-radius: 1.5px;\n    overflow: hidden;\n  }\n\n  .step-progress-bar::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);\n    animation: progress-shimmer 2s infinite;\n  }\n\n  @keyframes progress-shimmer {\n    0% {\n      transform: translateX(-100%);\n    }\n    100% {\n      transform: translateX(100%);\n    }\n  }\n\n}\n","size_bytes":9752},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/event-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MapLocationPicker } from \"@/components/MapLocationPicker\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { MapPin, Camera, X } from \"lucide-react\";\n\ninterface EventFormProps {\n  event?: any;\n  onSuccess: () => void;\n}\n\nexport default function EventForm({ event, onSuccess }: EventFormProps) {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    title: event?.title || \"\",\n    island: event?.island || \"\",\n    atoll: event?.atoll || \"\",\n    eventLocation: event?.eventLocation || \"\",\n    waitingLocation: event?.waitingLocation || \"\",\n    contact: event?.contact || \"\",\n    comment: event?.comment || \"\",\n    photoUrl: event?.photoUrl || \"\",\n    latitude: event?.latitude || \"\",\n    longitude: event?.longitude || \"\",\n  });\n\n  const [showLocationPicker, setShowLocationPicker] = useState(false);\n  const [locationPickerType, setLocationPickerType] = useState<'event' | 'waiting'>('event');\n  const [photoPreview, setPhotoPreview] = useState<string | null>(event?.photoUrl || null);\n  const [isUploadingPhoto, setIsUploadingPhoto] = useState(false);\n\n  const mutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (event) {\n        await apiRequest(\"PATCH\", `/api/events/${event.id}`, data);\n      } else {\n        await apiRequest(\"POST\", \"/api/events\", data);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: event ? \"Event updated successfully\" : \"Event created successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: event ? \"Failed to update event\" : \"Failed to create event\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    mutation.mutate(formData);\n  };\n\n  const { data: islandsData = [] } = useQuery({\n    queryKey: [\"/api/islands\"],\n  });\n\n  const handleChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleLocationSelect = (location: { latitude: number; longitude: number; address: string }) => {\n    // Always update form data regardless of picker type for now\n    setFormData(prev => ({\n      ...prev,\n      eventLocation: location.address,\n      latitude: location.latitude.toString(),\n      longitude: location.longitude.toString()\n    }));\n    \n    // Show success toast\n    toast({\n      title: \"Location Set\",\n      description: `Event location updated to: ${location.latitude.toFixed(4)}, ${location.longitude.toFixed(4)}`,\n    });\n  };\n\n  // Photo upload handlers\n  const getPhotoUploadParams = async () => {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/objects/upload\");\n      const data = await response.json() as { uploadURL: string };\n      if (!data.uploadURL) {\n        throw new Error(\"No upload URL received from server\");\n      }\n      return {\n        method: \"PUT\" as const,\n        url: data.uploadURL\n      };\n    } catch (error: any) {\n      if (error.message?.includes('401') || error.message?.includes('Unauthorized')) {\n        throw new Error(\"Authentication required. Please refresh the page and log in again.\");\n      }\n      throw new Error(`Failed to get upload URL: ${error.message}`);\n    }\n  };\n\n  const handlePhotoUploadComplete = async (result: any) => {\n    const uploadUrl = result.successful[0]?.uploadURL;\n    \n    if (!uploadUrl) {\n      toast({\n        title: \"Upload Error\",\n        description: \"Failed to get upload URL\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsUploadingPhoto(true);\n    try {\n      if (event?.id) {\n        // For existing events, use the existing photo endpoint\n        const response = await apiRequest(\"PUT\", `/api/events/${event.id}/photo`, {\n          photoUrl: uploadUrl\n        }) as unknown as { objectPath: string; event: any };\n        setFormData(prev => ({ ...prev, photoUrl: response.objectPath }));\n        setPhotoPreview(response.objectPath);\n      } else {\n        // For new events, just store the URL - backend will process it during creation\n        setFormData(prev => ({ ...prev, photoUrl: uploadUrl }));\n        setPhotoPreview(uploadUrl);\n      }\n      \n      toast({\n        title: \"Photo Uploaded\",\n        description: \"Event photo has been added successfully\"\n      });\n    } catch (error) {\n      console.error(\"Photo upload error:\", error);\n      toast({\n        title: \"Upload Error\",\n        description: \"Failed to process uploaded photo\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsUploadingPhoto(false);\n    }\n  };\n\n  const removePhoto = () => {\n    setFormData(prev => ({ ...prev, photoUrl: \"\" }));\n    setPhotoPreview(null);\n    toast({\n      title: \"Photo Removed\",\n      description: \"Event photo has been removed\"\n    });\n  };\n\n  // Get unique atolls\n  const atolls = Array.from(new Set((islandsData as any[]).map((island: any) => island.atoll))).sort();\n  \n  // Filter islands by selected atoll\n  const availableIslands = formData.atoll \n    ? (islandsData as any[]).filter((island: any) => island.atoll === formData.atoll)\n    : (islandsData as any[]);\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"space-y-4\">\n        {/* Atoll */}\n        <div>\n          <Label htmlFor=\"atoll\">Atoll</Label>\n          <Select \n            value={formData.atoll} \n            onValueChange={(value) => {\n              handleChange(\"atoll\", value);\n              // Clear island selection when atoll changes\n              handleChange(\"island\", \"\");\n            }}\n          >\n            <SelectTrigger data-testid=\"select-event-atoll\">\n              <SelectValue placeholder=\"Select Atoll\" />\n            </SelectTrigger>\n            <SelectContent>\n              {atolls.map((atoll, index) => (\n                <SelectItem key={`form-atoll-${index}`} value={atoll}>\n                  {atoll}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Island */}\n        <div>\n          <Label htmlFor=\"island\">Island</Label>\n          <Select \n            value={formData.island} \n            onValueChange={(value) => handleChange(\"island\", value)}\n            disabled={!formData.atoll}\n          >\n            <SelectTrigger data-testid=\"select-event-island\">\n              <SelectValue placeholder={formData.atoll ? \"Select Island\" : \"Select Atoll First\"} />\n            </SelectTrigger>\n            <SelectContent>\n              {availableIslands.map((island: any) => (\n                <SelectItem key={island.id} value={island.name}>\n                  {island.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Event */}\n        <div>\n          <Label htmlFor=\"title\">Event</Label>\n          <Input\n            id=\"title\"\n            value={formData.title}\n            onChange={(e) => handleChange(\"title\", e.target.value)}\n            placeholder=\"Enter event name\"\n            required\n            data-testid=\"input-event-title\"\n          />\n        </div>\n\n        {/* Event Location */}\n        <div>\n          <Label htmlFor=\"eventLocation\">Event Location</Label>\n          <div className=\"flex gap-2\">\n            <Input\n              id=\"eventLocation\"\n              value={formData.eventLocation}\n              onChange={(e) => handleChange(\"eventLocation\", e.target.value)}\n              placeholder=\"Enter event location details\"\n              className=\"flex-1\"\n              data-testid=\"input-event-location\"\n            />\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => {\n                setLocationPickerType('event');\n                setShowLocationPicker(true);\n              }}\n              className=\"flex items-center gap-1\"\n              data-testid=\"button-select-event-location\"\n            >\n              <MapPin className=\"h-4 w-4\" />\n              Map\n            </Button>\n          </div>\n          {formData.latitude && formData.longitude && (\n            <div className=\"text-xs text-gray-500 mt-1\">\n              GPS: {parseFloat(formData.latitude).toFixed(4)}, {parseFloat(formData.longitude).toFixed(4)}\n            </div>\n          )}\n        </div>\n\n        {/* Waiting Location */}\n        <div>\n          <Label htmlFor=\"waitingLocation\">Waiting Location</Label>\n          <Input\n            id=\"waitingLocation\"\n            value={formData.waitingLocation}\n            onChange={(e) => handleChange(\"waitingLocation\", e.target.value)}\n            placeholder=\"Enter waiting location details\"\n            data-testid=\"input-waiting-location\"\n          />\n        </div>\n\n        {/* Contact */}\n        <div>\n          <Label htmlFor=\"contact\">Contact</Label>\n          <Input\n            id=\"contact\"\n            value={formData.contact}\n            onChange={(e) => handleChange(\"contact\", e.target.value)}\n            placeholder=\"Enter contact information\"\n            data-testid=\"input-contact\"\n          />\n        </div>\n\n        {/* Comment */}\n        <div>\n          <Label htmlFor=\"comment\">Comment</Label>\n          <Textarea\n            id=\"comment\"\n            value={formData.comment}\n            onChange={(e) => handleChange(\"comment\", e.target.value)}\n            placeholder=\"Enter additional comments\"\n            rows={3}\n            data-testid=\"textarea-comment\"\n          />\n        </div>\n\n        {/* Event Photo */}\n        <div>\n          <Label>Event Photo</Label>\n          <div className=\"space-y-3\">\n            {photoPreview ? (\n              <div className=\"relative\">\n                <img\n                  src={photoPreview}\n                  alt=\"Event preview\"\n                  className=\"w-full max-w-sm h-48 object-cover rounded-lg border\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={removePhoto}\n                  className=\"absolute top-2 right-2 h-8 w-8 p-0\"\n                  data-testid=\"button-remove-photo\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ) : (\n              <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center\">\n                <Camera className=\"mx-auto h-12 w-12 text-gray-400 mb-2\" />\n                <p className=\"text-sm text-gray-500 mb-4\">Add a photo to showcase your conservation event</p>\n                <ObjectUploader\n                  maxNumberOfFiles={1}\n                  maxFileSize={2097152} // 2MB after compression\n                  onGetUploadParameters={getPhotoUploadParams}\n                  onComplete={handlePhotoUploadComplete}\n                  buttonClassName=\"bg-blue-600 hover:bg-blue-700\"\n                >\n                  <Camera className=\"h-4 w-4 mr-2\" />\n                  {isUploadingPhoto ? \"Processing...\" : \"Upload Photo\"}\n                </ObjectUploader>\n              </div>\n            )}\n            <p className=\"text-xs text-gray-500\">\n              Photos are automatically compressed to save storage space. Supported formats: JPEG, PNG, WebP\n            </p>\n          </div>\n        </div>\n\n      </div>\n\n      <div className=\"flex justify-end space-x-3 pt-4\">\n        <Button \n          type=\"submit\" \n          disabled={mutation.isPending}\n          data-testid=\"button-submit-event\"\n        >\n          {mutation.isPending ? \"Saving...\" : event ? \"Update Event\" : \"Create Event\"}\n        </Button>\n      </div>\n\n      {/* Map Location Picker Modal */}\n      <MapLocationPicker\n        isOpen={showLocationPicker}\n        onClose={() => setShowLocationPicker(false)}\n        onLocationSelect={handleLocationSelect}\n        initialLocation={\n          formData.latitude && formData.longitude \n            ? {\n                latitude: parseFloat(formData.latitude),\n                longitude: parseFloat(formData.longitude),\n                address: locationPickerType === 'event' ? formData.eventLocation : formData.waitingLocation\n              }\n            : undefined\n        }\n        title={locationPickerType === 'event' ? 'Select Event Location' : 'Select Waiting Location'}\n      />\n    </form>\n  );\n}\n","size_bytes":13267},"client/src/components/modal.tsx":{"content":"import { ReactNode } from \"react\";\nimport { X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string;\n  children: ReactNode;\n}\n\nexport default function Modal({ isOpen, onClose, title, children }: ModalProps) {\n  if (!isOpen) return null;\n\n  return (\n    <div \n      className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-start justify-center p-2 sm:p-4 overflow-y-auto\" \n      style={{ zIndex: \"var(--z-modal-backdrop)\" }}\n      onClick={(e) => {\n        if (e.target === e.currentTarget) {\n          onClose();\n        }\n      }}\n    >\n      <div \n        className=\"bg-card rounded-lg w-full max-w-2xl min-h-0 mt-12 mb-4 sm:mt-16 sm:mb-8 flex flex-col shadow-xl\"\n        style={{ zIndex: \"var(--z-modal)\" }}\n      >\n        <div className=\"p-4 sm:p-6 border-b border-border flex-shrink-0 sticky top-0 bg-card rounded-t-lg\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg sm:text-xl font-semibold text-foreground pr-4\">{title}</h2>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              data-testid=\"button-close-modal\"\n              className=\"flex-shrink-0\"\n            >\n              <X className=\"h-5 w-5\" />\n            </Button>\n          </div>\n        </div>\n        <div className=\"p-4 sm:p-6 overflow-y-auto flex-1\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1520},"client/src/components/navigation.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  BarChart3, \n  Calendar, \n  Users, \n  Map, \n  Package,\n  Archive, \n  Settings, \n  Menu, \n  X,\n  LogOut,\n  ChevronLeft,\n  ChevronRight,\n  User,\n  MessageCircle\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePermissions } from \"@/hooks/usePermissions\";\nimport { Chat } from \"./Chat\";\nimport { getUserDisplayInfo } from \"@/lib/userDisplayUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst navItems = [\n  { icon: BarChart3, label: \"Overview\", path: \"/\" },\n  { icon: Calendar, label: \"Events\", path: \"/events\" },\n  { icon: Users, label: \"Members\", path: \"/members\" },\n  { icon: Map, label: \"Island Map\", path: \"/map\" },\n  { icon: Package, label: \"Equipment\", path: \"/equipment\" },\n  { icon: Archive, label: \"Archive\", path: \"/archive\" },\n  { icon: User, label: \"My Profile\", path: \"/profile\" },\n  { icon: Settings, label: \"Admin Panel\", path: \"/admin\" },\n];\n\nexport default function Navigation() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [unreadMessagesCount, setUnreadMessagesCount] = useState(0);\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const { \n    canViewEvents, \n    canViewMembers, \n    canViewMap, \n    canViewEquipment, \n    canAccessAdminPanel \n  } = usePermissions();\n  \n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Load unread count from API  \n  const fetchUnreadCount = async () => {\n    if (!user) return;\n    \n    try {\n      const response = await apiRequest(\"GET\", '/api/chat/unread-count');\n      const data = await response.json();\n      setUnreadMessagesCount(data.unreadCount || 0);\n      return data;\n    } catch (error) {\n      console.error('Error fetching unread count:', error);\n      return null;\n    }\n  };\n\n  // Initial load of unread count\n  useEffect(() => {\n    fetchUnreadCount();\n  }, [user]);\n\n  // Set up WebSocket connection for real-time notifications\n  useEffect(() => {\n    if (!user) return;\n\n    const connectWebSocket = () => {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/chat`;\n      \n      wsRef.current = new WebSocket(wsUrl);\n      \n      wsRef.current.onopen = () => {\n        // Join for notifications only (don't appear in user list)\n        wsRef.current?.send(JSON.stringify({\n          type: 'subscribe-notifications',\n          clientId: `notification_${Date.now()}_${Math.random()}`,\n          userId: (user as any).id,\n          listener: true\n        }));\n      };\n      \n      wsRef.current.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        \n        if (data.type === 'chat-notification') {\n          // Refresh unread count when someone sends a message\n          fetchUnreadCount();\n        }\n      };\n      \n      wsRef.current.onclose = () => {\n        // Reconnect after 3 seconds if connection is lost\n        reconnectTimeoutRef.current = setTimeout(connectWebSocket, 3000);\n      };\n      \n      wsRef.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n    };\n\n    connectWebSocket();\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [user]);\n\n  const handleChatOpen = async () => {\n    setIsChatOpen(true);\n    // Clear unread messages when opening chat\n    setUnreadMessagesCount(0);\n    \n    // Mark all messages as read by getting the latest message ID from unread-count API\n    try {\n      const data = await fetchUnreadCount();\n      if (data && data.latestMessageId) {\n        await markAllMessagesAsRead(data.latestMessageId);\n      }\n    } catch (error) {\n      console.error('Error marking messages as read on chat open:', error);\n    }\n  };\n\n  const markAllMessagesAsRead = async (lastMessageId?: string) => {\n    if (!user || !lastMessageId) return;\n    \n    try {\n      await apiRequest(\"POST\", '/api/chat/mark-read', { lastReadMessageId: lastMessageId });\n      \n      // Refresh unread count after marking as read\n      fetchUnreadCount();\n    } catch (error) {\n      console.error('Error marking messages as read:', error);\n    }\n  };\n\n  const filteredNavItems = navItems.filter(item => {\n    switch (item.path) {\n      case \"/events\":\n        return canViewEvents;\n      case \"/members\":\n        return canViewMembers;\n      case \"/map\":\n        return canViewMap;\n      case \"/equipment\":\n        return canViewEquipment;\n      case \"/admin\":\n        return canAccessAdminPanel;\n      // Always show overview, profile, and archive for all authenticated users\n      case \"/\":\n      case \"/profile\":\n      case \"/archive\":\n        return true;\n      default:\n        return true;\n    }\n  });\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-card shadow-sm border-b border-border fixed top-0 left-0 right-0 z-[9998] lg:relative lg:z-auto\">\n        <div className=\"px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                className=\"lg:hidden\"\n                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n                data-testid=\"button-mobile-menu\"\n              >\n                {isMobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                className=\"hidden lg:block\"\n                onClick={() => setIsMinimized(!isMinimized)}\n                data-testid=\"button-minimize-sidebar\"\n              >\n                {isMinimized ? <ChevronRight className=\"h-5 w-5\" /> : <ChevronLeft className=\"h-5 w-5\" />}\n              </Button>\n              <h1 className=\"text-xl font-semibold text-foreground\">\n                {navItems.find(item => item.path === location)?.label || \"Dashboard\"}\n              </h1>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <span className=\"hidden sm:inline text-sm text-muted-foreground\" data-testid=\"text-user-name\">\n                {getUserDisplayInfo(user as any).displayName}\n              </span>\n              <span \n                className={`text-xs px-2 py-1 rounded ${\n                  canAccessAdminPanel ? 'bg-primary text-primary-foreground' :\n                  canViewEquipment ? 'bg-secondary text-secondary-foreground' :\n                  'bg-muted text-muted-foreground'\n                }`}\n                data-testid=\"text-user-role\"\n              >\n                {(user as any)?.role}\n              </span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleChatOpen}\n                data-testid=\"button-chat\"\n                title=\"Team Chat\"\n                className=\"relative\"\n              >\n                <MessageCircle className=\"h-4 w-4\" />\n                {unreadMessagesCount > 0 && (\n                  <span \n                    className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center min-w-[20px]\"\n                    data-testid=\"chat-unread-badge\"\n                  >\n                    {unreadMessagesCount > 99 ? '99+' : unreadMessagesCount}\n                  </span>\n                )}\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => window.location.href = '/api/logout'}\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Desktop Sidebar */}\n      <aside className={`hidden lg:block ${isMinimized ? 'w-16' : 'w-64'} bg-card border-r border-border min-h-screen transition-all duration-300 fixed lg:relative top-0 left-0 z-30`}>\n        <nav className=\"p-4 space-y-2\">\n          {filteredNavItems.map((item) => {\n            const isActive = location === item.path;\n            return (\n              <Link key={item.path} href={item.path}>\n                <Button\n                  variant={isActive ? \"default\" : \"ghost\"}\n                  className={`w-full ${isMinimized ? 'justify-center p-2' : 'justify-start'} transition-all duration-300`}\n                  data-testid={`nav-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                  title={isMinimized ? item.label : undefined}\n                >\n                  <item.icon className={`h-4 w-4 ${isMinimized ? '' : 'mr-2'}`} />\n                  {!isMinimized && item.label}\n                </Button>\n              </Link>\n            );\n          })}\n        </nav>\n      </aside>\n\n      {/* Mobile Sidebar Overlay */}\n      {isMobileMenuOpen && (\n        <div className=\"lg:hidden fixed inset-0 z-[9999] bg-black bg-opacity-50\" onClick={() => setIsMobileMenuOpen(false)}>\n          <aside className=\"w-64 bg-card h-full shadow-lg\" onClick={(e) => e.stopPropagation()}>\n            <div className=\"p-4 border-b border-border\">\n              <h2 className=\"text-lg font-semibold text-foreground\">Menu</h2>\n            </div>\n            <nav className=\"p-4 space-y-2\">\n              {filteredNavItems.map((item) => {\n                const isActive = location === item.path;\n                return (\n                  <Link key={item.path} href={item.path}>\n                    <Button\n                      variant={isActive ? \"default\" : \"ghost\"}\n                      className=\"w-full justify-start\"\n                      onClick={() => setIsMobileMenuOpen(false)}\n                      data-testid={`mobile-nav-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      <item.icon className=\"h-4 w-4 mr-2\" />\n                      {item.label}\n                    </Button>\n                  </Link>\n                );\n              })}\n            </nav>\n          </aside>\n        </div>\n      )}\n\n      {/* Mobile Bottom Navigation */}\n      <nav className=\"lg:hidden fixed bottom-0 left-0 right-0 bg-card border-t border-border z-40\">\n        <div className=\"grid grid-cols-5 gap-1 p-2\">\n          {filteredNavItems.slice(0, 5).map((item) => {\n            const isActive = location === item.path;\n            return (\n              <Link key={item.path} href={item.path}>\n                <Button\n                  variant=\"ghost\"\n                  className={`flex flex-col items-center py-2 px-1 h-auto ${\n                    isActive ? 'text-primary' : 'text-muted-foreground'\n                  }`}\n                  data-testid={`bottom-nav-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <item.icon className=\"h-5 w-5 mb-1\" />\n                  <span className=\"text-xs\">{item.label.split(' ')[0]}</span>\n                </Button>\n              </Link>\n            );\n          })}\n        </div>\n      </nav>\n      \n      {/* Chat Modal */}\n      <Chat \n        isOpen={isChatOpen}\n        onClose={() => setIsChatOpen(false)}\n        onMarkAllRead={markAllMessagesAsRead}\n      />\n    </>\n  );\n}\n","size_bytes":11621},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    throwOnError: false,\n  });\n\n  // Check if error is 401 Unauthorized and redirect to login\n  useEffect(() => {\n    if (error && (error as any)?.message?.includes('401')) {\n      window.location.href = \"/api/login\";\n    }\n  }, [error]);\n\n  const isAuthenticated = !!user && !error;\n  const isApproved = (user as any)?.approvalStatus === 'approved';\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated,\n    isApproved,\n    isPendingApproval: isAuthenticated && !isApproved,\n  };\n}\n","size_bytes":707},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { UserCog, Users, Database, ArchiveRestore, BarChart3, Edit, Ban, UserPlus, Bug, Server, Monitor, Code, CheckCircle, Trash2 } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePermissions } from \"@/hooks/usePermissions\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { getUserDisplayInfo } from \"@/lib/userDisplayUtils\";\nimport { useEffect } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport UserForm from \"@/components/user-form\";\nimport { AdminSection } from \"@/components/admin-sections\";\nimport { ConfirmDialog } from \"@/components/ConfirmDialog\";\n\nexport default function Admin() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { canAccessAdminPanel } = usePermissions();\n  const queryClient = useQueryClient();\n  const [showUserForm, setShowUserForm] = useState(false);\n  const [editingUser, setEditingUser] = useState<any>(null);\n  const [activeSection, setActiveSection] = useState<string | null>(null);\n  const [deletingUser, setDeletingUser] = useState<any>(null);\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/users\"],\n    enabled: isAuthenticated && canAccessAdminPanel,\n  });\n\n  const updateRoleMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: string; role: string }) => {\n      await apiRequest(\"PATCH\", `/api/users/${userId}/role`, { role });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User role updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest(\"DELETE\", `/api/users/${userId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User deleted successfully\",\n      });\n      setDeletingUser(null);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUserCreated = () => {\n    setShowUserForm(false);\n    setEditingUser(null);\n    queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n    toast({\n      title: \"Success\",\n      description: editingUser ? \"User updated successfully\" : \"User created successfully\",\n    });\n  };\n\n  const handleEditUser = (user: any) => {\n    setEditingUser(user);\n    setShowUserForm(true);\n  };\n\n  const handleCancelEdit = () => {\n    setShowUserForm(false);\n    setEditingUser(null);\n  };\n\n  const handleDeleteUser = (userToDelete: any) => {\n    // Prevent self-deletion\n    if (userToDelete.id === (user as any)?.id) {\n      toast({\n        title: \"Cannot Delete\",\n        description: \"You cannot delete your own account\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setDeletingUser(userToDelete);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!canAccessAdminPanel) {\n    return (\n      <div className=\"p-4 lg:p-6\">\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <p className=\"text-muted-foreground\" data-testid=\"text-admin-access-denied\">\n              You don't have admin access. Contact your administrator for permissions.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-2 sm:p-4 lg:p-6\">\n      <div className=\"mb-6 sm:mb-8\">\n        <h1 className=\"text-2xl sm:text-3xl font-bold text-foreground mb-2\">Admin Panel</h1>\n        <p className=\"text-sm sm:text-base text-muted-foreground\">Administrative controls and system settings</p>\n      </div>\n\n      {/* Admin Actions Grid */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4 sm:gap-6 mb-6 sm:mb-8\">\n        \n        {/* Debug Tools */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Bug className=\"h-5 w-5\" />\n              <span>🛠️ Debug Tools</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <Button \n              variant=\"ghost\" \n              className=\"w-full justify-between p-3 h-auto\"\n              onClick={() => setActiveSection('system-monitor')}\n              data-testid=\"button-system-monitor\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <BarChart3 className=\"h-5 w-5 text-accent\" />\n                <span>System Monitor</span>\n              </div>\n              <span className=\"text-muted-foreground\">→</span>\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* User Management */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <UserCog className=\"h-5 w-5\" />\n              <span>User Management</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <Button \n              variant=\"ghost\" \n              className=\"w-full justify-between p-3 h-auto\"\n              onClick={() => setShowUserForm(true)}\n              data-testid=\"button-add-user\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <UserPlus className=\"h-5 w-5 text-primary\" />\n                <span>Add New User</span>\n              </div>\n              <span className=\"text-muted-foreground\">→</span>\n            </Button>\n            <Button \n              variant=\"ghost\" \n              className=\"w-full justify-between p-3 h-auto\"\n              onClick={() => setActiveSection('bulk-operations')}\n              data-testid=\"button-bulk-operations\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <Users className=\"h-5 w-5 text-secondary\" />\n                <span>Bulk User Operations</span>\n              </div>\n              <span className=\"text-muted-foreground\">→</span>\n            </Button>\n            <Button \n              variant=\"ghost\" \n              className=\"w-full justify-between p-3 h-auto\"\n              onClick={() => setActiveSection('user-approvals')}\n              data-testid=\"button-user-approvals\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                <span>User Approvals</span>\n              </div>\n              <span className=\"text-muted-foreground\">→</span>\n            </Button>\n            <Button \n              variant=\"ghost\" \n              className=\"w-full justify-between p-3 h-auto\"\n              onClick={() => setActiveSection('suspended-accounts')}\n              data-testid=\"button-suspended-accounts\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <Ban className=\"h-5 w-5 text-destructive\" />\n                <span>Suspended Accounts</span>\n              </div>\n              <span className=\"text-muted-foreground\">→</span>\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* System Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Database className=\"h-5 w-5\" />\n              <span>System Settings</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <Button \n              variant=\"ghost\" \n              className=\"w-full justify-between p-3 h-auto\"\n              onClick={() => setActiveSection('backup-restore')}\n              data-testid=\"button-backup-restore\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <ArchiveRestore className=\"h-5 w-5 text-primary\" />\n                <span>ArchiveRestore & Restore</span>\n              </div>\n              <span className=\"text-muted-foreground\">→</span>\n            </Button>\n            <Button \n              variant=\"ghost\" \n              className=\"w-full justify-between p-3 h-auto\"\n              onClick={() => setActiveSection('system-analytics')}\n              data-testid=\"button-system-analytics\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <BarChart3 className=\"h-5 w-5 text-secondary\" />\n                <span>System Analytics</span>\n              </div>\n              <span className=\"text-muted-foreground\">→</span>\n            </Button>\n            <Button \n              variant=\"ghost\" \n              className=\"w-full justify-between p-3 h-auto\"\n              onClick={() => setActiveSection('database-management')}\n              data-testid=\"button-database-management\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <Database className=\"h-5 w-5 text-accent\" />\n                <span>Database Management</span>\n              </div>\n              <span className=\"text-muted-foreground\">→</span>\n            </Button>\n          </CardContent>\n        </Card>\n\n      </div>\n\n      {/* Permission Management Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Permission Management</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">Manage user roles and access permissions</p>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-muted\">\n                <tr>\n                  <th className=\"text-left p-4 text-sm font-medium text-foreground\">User</th>\n                  <th className=\"text-left p-4 text-sm font-medium text-foreground\">Current Role</th>\n                  <th className=\"text-left p-4 text-sm font-medium text-foreground\">Permissions</th>\n                  <th className=\"text-left p-4 text-sm font-medium text-foreground\">Last Active</th>\n                  <th className=\"text-left p-4 text-sm font-medium text-foreground\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {(users as any[]).length === 0 ? (\n                  <tr>\n                    <td colSpan={5} className=\"p-8 text-center text-muted-foreground\">\n                      No users found.\n                    </td>\n                  </tr>\n                ) : (\n                  (users as any[]).map((userItem: any) => (\n                    <tr key={userItem.id} className=\"border-b border-border\" data-testid={`row-user-${userItem.id}`}>\n                      <td className=\"p-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-sm font-medium\">\n                            {getUserDisplayInfo(userItem).initials}\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-foreground\" data-testid={`text-user-name-${userItem.id}`}>\n                              {getUserDisplayInfo(userItem).displayName}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\" data-testid={`text-user-email-${userItem.id}`}>\n                              {userItem.email}\n                            </p>\n                          </div>\n                        </div>\n                      </td>\n                      <td className=\"p-4\">\n                        <Select\n                          value={userItem.role}\n                          onValueChange={(role) => updateRoleMutation.mutate({ userId: userItem.id, role })}\n                        >\n                          <SelectTrigger \n                            className=\"w-32\" \n                            data-testid={`select-user-role-${userItem.id}`}\n                          >\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"agent\">Agent</SelectItem>\n                            <SelectItem value=\"attachment\">Attachment</SelectItem>\n                            <SelectItem value=\"coordinator\">Coordinator</SelectItem>\n                            <SelectItem value=\"admin\">Admin</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </td>\n                      <td className=\"p-4\">\n                        <div className=\"flex flex-wrap gap-1\">\n                          <span className={`px-2 py-1 text-xs rounded ${\n                            userItem.role === 'admin' ? 'bg-primary/10 text-primary' : 'bg-muted text-muted-foreground'\n                          }`}>\n                            Events\n                          </span>\n                          <span className={`px-2 py-1 text-xs rounded ${\n                            userItem.role === 'admin' || userItem.role === 'coordinator' ? 'bg-secondary/10 text-secondary' : 'bg-muted text-muted-foreground'\n                          }`}>\n                            Members\n                          </span>\n                          <span className={`px-2 py-1 text-xs rounded ${\n                            userItem.role === 'admin' ? 'bg-accent/10 text-accent' : 'bg-muted text-muted-foreground'\n                          }`}>\n                            Admin\n                          </span>\n                        </div>\n                      </td>\n                      <td className=\"p-4 text-sm text-muted-foreground\" data-testid={`text-user-last-active-${userItem.id}`}>\n                        {userItem.updatedAt ? new Date(userItem.updatedAt).toLocaleDateString() : 'Never'}\n                      </td>\n                      <td className=\"p-4\">\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => handleEditUser(userItem)}\n                            data-testid={`button-edit-user-${userItem.id}`}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => handleDeleteUser(userItem)}\n                            disabled={userItem.id === (user as any)?.id || deleteUserMutation.isPending}\n                            data-testid={`button-delete-user-${userItem.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            data-testid={`button-ban-user-${userItem.id}`}\n                          >\n                            <Ban className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n      \n      {/* User Form Modal (Create/Edit) */}\n      {showUserForm && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <UserForm\n            user={editingUser}\n            onSuccess={handleUserCreated}\n            onCancel={handleCancelEdit}\n          />\n        </div>\n      )}\n\n      {/* Admin Section Modals */}\n      {activeSection && (\n        <AdminSection \n          section={activeSection} \n          onClose={() => setActiveSection(null)} \n        />\n      )}\n\n      {/* Delete User Confirmation Dialog */}\n      <ConfirmDialog\n        isOpen={!!deletingUser}\n        onClose={() => setDeletingUser(null)}\n        onConfirm={() => {\n          if (deletingUser) {\n            deleteUserMutation.mutate(deletingUser.id);\n          }\n        }}\n        title=\"Delete User\"\n        description={`Are you sure you want to delete \"${getUserDisplayInfo(deletingUser).displayName}\"? This will permanently remove their account and all associated data.`}\n        confirmText=\"Delete User\"\n        isLoading={deleteUserMutation.isPending}\n      />\n    </div>\n  );\n}\n","size_bytes":18277},"client/src/pages/archive.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Download, Eye, MapPin, Calendar, Users, Trophy, Search, ChevronDown, ChevronUp } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useEffect } from \"react\";\nimport { type Event } from \"../../../shared/schema\";\nimport { ExportButton } from \"@/components/ExportButton\";\n\nexport default function Archive() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [yearFilter, setYearFilter] = useState(\"2025\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [expandedEvents, setExpandedEvents] = useState<Set<string>>(new Set());\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: archivedEvents = [] } = useQuery<Event[]>({\n    queryKey: [\"/api/archive\"],\n    enabled: isAuthenticated,\n  });\n\n  const filteredArchivedEvents = archivedEvents.filter((event: Event) => {\n    const eventYear = new Date(event.createdAt || Date.now()).getFullYear().toString();\n    const matchesYear = eventYear === yearFilter;\n    const matchesSearch = !searchQuery || \n      event.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      event.island.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      event.atoll.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      (event.comment && event.comment.toLowerCase().includes(searchQuery.toLowerCase()));\n    \n    return matchesYear && matchesSearch;\n  });\n\n  const totalArchived = archivedEvents.length;\n  const totalParticipants = archivedEvents.reduce((sum: number, event: any) => sum + (event.participantCount || 0), 0);\n\n  const toggleEventExpanded = (eventId: string) => {\n    setExpandedEvents(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(eventId)) {\n        newSet.delete(eventId);\n      } else {\n        newSet.add(eventId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleViewEvent = (event: any) => {\n    // Navigate to event details or show more info\n    toast({\n      title: \"View Event\",\n      description: `Viewing details for \"${event.title}\"`,\n    });\n  };\n\n  const handleDownloadEvent = (event: any) => {\n    // Generate and download event report\n    toast({\n      title: \"Download Report\",\n      description: `Downloading report for \"${event.title}\"`,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-2 sm:p-4 lg:p-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-foreground mb-2\">Event Archive</h1>\n          <p className=\"text-sm sm:text-base text-muted-foreground\">Historical record of completed and cancelled events</p>\n        </div>\n        <div className=\"flex flex-col sm:flex-row gap-2 mt-4 sm:mt-0\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search archived events...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 w-64\"\n              data-testid=\"input-archive-search\"\n            />\n          </div>\n          <Select value={yearFilter} onValueChange={setYearFilter}>\n            <SelectTrigger className=\"w-32\" data-testid=\"select-year-filter\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"2025\">2025</SelectItem>\n              <SelectItem value=\"2024\">2024</SelectItem>\n              <SelectItem value=\"2023\">2023</SelectItem>\n              <SelectItem value=\"2022\">2022</SelectItem>\n            </SelectContent>\n          </Select>\n          <ExportButton \n            dataType=\"events\" \n            label=\"Archive\"\n          />\n        </div>\n      </div>\n\n      {/* Archive Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-archived\">\n              {totalArchived}\n            </p>\n            <p className=\"text-sm text-muted-foreground\">Total Archived</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-total-participants\">\n              {totalParticipants}\n            </p>\n            <p className=\"text-sm text-muted-foreground\">Total Participants</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Archived Events List */}\n      <div className=\"space-y-4\">\n        {filteredArchivedEvents.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <p className=\"text-muted-foreground\" data-testid=\"text-no-archived-events\">\n                No archived events found for {yearFilter}.\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          filteredArchivedEvents.map((event: any) => {\n            const isExpanded = expandedEvents.has(event.id);\n            return (\n              <Card key={event.id} data-testid={`card-archived-event-${event.id}`}>\n                <CardContent className=\"p-3\">\n                  {/* Compact header - always visible */}\n                  <div \n                    className=\"flex items-center justify-between cursor-pointer\"\n                    onClick={() => toggleEventExpanded(event.id)}\n                    data-testid={`button-expand-archived-${event.id}`}\n                  >\n                    <div className=\"flex items-center space-x-3 flex-1\">\n                      <h3 className=\"text-base font-semibold text-foreground\" data-testid={`text-archived-title-${event.id}`}>\n                        {event.title}\n                      </h3>\n                      <span \n                        className=\"px-2 py-1 text-xs rounded-full bg-gray-100 text-gray-800\"\n                        data-testid={`text-archived-status-${event.id}`}\n                      >\n                        archived\n                      </span>\n                      <div className=\"flex items-center text-sm text-muted-foreground\">\n                        <MapPin className=\"h-3 w-3 mr-1\" />\n                        <span>{event.island}</span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      {/* Quick actions - always visible */}\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleViewEvent(event);\n                        }}\n                        data-testid={`button-view-${event.id}`}\n                        title=\"View Event Details\"\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleDownloadEvent(event);\n                        }}\n                        data-testid={`button-download-${event.id}`}\n                        title=\"Download Report\"\n                      >\n                        <Download className=\"h-4 w-4\" />\n                      </Button>\n                      {isExpanded ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n                    </div>\n                  </div>\n\n                  {/* Expanded details */}\n                  {isExpanded && (\n                    <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 text-sm text-muted-foreground\">\n                        <div className=\"flex items-center\">\n                          <MapPin className=\"h-4 w-4 mr-2\" />\n                          <span data-testid={`text-archived-location-${event.id}`}>{event.island}, {event.atoll}</span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Calendar className=\"h-4 w-4 mr-2\" />\n                          <span data-testid={`text-archived-date-${event.id}`}>\n                            {new Date(event.createdAt).toLocaleDateString()}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Users className=\"h-4 w-4 mr-2\" />\n                          <span data-testid={`text-archived-participants-${event.id}`}>\n                            {event.participantCount} participants\n                          </span>\n                        </div>\n                      </div>\n                      {event.comment && (\n                        <div className=\"mt-3 pt-3 border-t border-gray-100\">\n                          <p className=\"text-foreground text-sm\" data-testid={`text-archived-description-${event.id}`}>\n                            {event.comment}\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":10386},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar, Users, MapPin, CheckCircle, ChevronDown, ChevronUp, Phone } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect, useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport IslandCheckIn from \"@/components/island-check-in\";\nimport { MilestoneBadges, MilestoneQuickStats } from \"@/components/milestone-badges\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [expandedEvents, setExpandedEvents] = useState<Set<string>>(new Set());\n  const [sortBy, setSortBy] = useState<string>(\"date\"); // date, atoll, island\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: events = [] } = useQuery({\n    queryKey: [\"/api/events\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/users\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: islands = [] } = useQuery({\n    queryKey: [\"/api/islands\"],\n    enabled: isAuthenticated,\n  });\n\n  // Get individual user milestone stats for accurate visited islands count\n  const { data: milestoneStats } = useQuery<{ totalIslands: number; totalVisits: number; uniqueAtolls: number }>({\n    queryKey: ['/api/milestones/stats'],\n    enabled: isAuthenticated,\n  });\n\n  const activeEvents = (events as any[]).filter((event: any) => event.status === 'active' || event.status === 'scheduled');\n  const completedEvents = (events as any[]).filter((event: any) => event.status === 'completed');\n\n  const recentEvents = (events as any[])\n    .sort((a: any, b: any) => {\n      if (sortBy === \"atoll\") {\n        return a.atoll.localeCompare(b.atoll);\n      } else if (sortBy === \"island\") {\n        return a.island.localeCompare(b.island);\n      } else {\n        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n      }\n    })\n    .slice(0, 6); // Show more events\n\n  const toggleEventExpansion = (eventId: string) => {\n    const newExpandedEvents = new Set(expandedEvents);\n    if (newExpandedEvents.has(eventId)) {\n      newExpandedEvents.delete(eventId);\n    } else {\n      newExpandedEvents.add(eventId);\n    }\n    setExpandedEvents(newExpandedEvents);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-2 sm:p-4 lg:p-6\">\n      <div className=\"mb-6 sm:mb-8\">\n        <h1 className=\"text-2xl sm:text-3xl font-bold text-foreground\">Dashboard</h1>\n        <p className=\"text-sm sm:text-base text-muted-foreground mt-2\">Overview of events and activities across Maldives</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-2 sm:gap-4 mb-6 sm:mb-8\">\n        <Card data-testid=\"card-active-events\">\n          <CardContent className=\"p-3 sm:p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Active Events</p>\n                <p className=\"text-xl sm:text-2xl font-bold text-foreground\" data-testid=\"text-active-events\">\n                  {activeEvents.length}\n                </p>\n              </div>\n              <Calendar className=\"h-6 w-6 sm:h-8 sm:w-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-total-members\">\n          <CardContent className=\"p-3 sm:p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Members</p>\n                <p className=\"text-xl sm:text-2xl font-bold text-foreground\" data-testid=\"text-total-members\">\n                  {(users as any[]).length}\n                </p>\n              </div>\n              <Users className=\"h-6 w-6 sm:h-8 sm:w-8 text-secondary\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-visited-islands\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Islands Visited</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-visited-islands\">\n                  {milestoneStats?.totalIslands || 0}\n                </p>\n              </div>\n              <MapPin className=\"h-8 w-8 text-accent\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-completed-events\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Completed Events</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-completed-events\">\n                  {completedEvents.length}\n                </p>\n              </div>\n              <CheckCircle className=\"h-8 w-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Island Check-in Section */}\n      <div className=\"mb-6 sm:mb-8\">\n        <IslandCheckIn />\n      </div>\n\n      {/* Milestone Badges Section */}\n      <div className=\"mb-6 sm:mb-8\">\n        <MilestoneBadges />\n      </div>\n\n      {/* Recent Events */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg font-semibold\">Recent Events</CardTitle>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-muted-foreground\">Sort by:</span>\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"date\">Date</SelectItem>\n                  <SelectItem value=\"atoll\">Atoll</SelectItem>\n                  <SelectItem value=\"island\">Island</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-6 pt-0\">\n          <div className=\"space-y-3\">\n            {recentEvents.length === 0 ? (\n              <p className=\"text-muted-foreground text-center py-4\" data-testid=\"text-no-events\">\n                No events found. Create your first event to get started.\n              </p>\n            ) : (\n              recentEvents.map((event: any) => {\n                const isExpanded = expandedEvents.has(event.id);\n                return (\n                  <div \n                    key={event.id} \n                    className=\"border rounded-lg p-3\"\n                    data-testid={`card-event-${event.id}`}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <p className=\"font-medium text-foreground\" data-testid={`text-event-title-${event.id}`}>\n                            {event.title}\n                          </p>\n                          <span \n                            className={`px-2 py-1 text-xs rounded-full ${\n                              event.status === 'active' ? 'bg-green-100 text-green-800' :\n                              event.status === 'scheduled' ? 'bg-blue-100 text-blue-800' :\n                              event.status === 'completed' ? 'bg-gray-100 text-gray-800' :\n                              'bg-yellow-100 text-yellow-800'\n                            }`}\n                            data-testid={`text-event-status-${event.id}`}\n                          >\n                            {event.status}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {event.atoll} - {event.island}\n                        </p>\n                        {event.date && !isNaN(new Date(event.date).getTime()) && (\n                          <p className=\"text-sm text-muted-foreground\">\n                            {new Date(event.date).toLocaleDateString()} at {event.startTime || 'TBD'}\n                          </p>\n                        )}\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => toggleEventExpansion(event.id)}\n                        data-testid={`button-expand-${event.id}`}\n                      >\n                        {isExpanded ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n                      </Button>\n                    </div>\n                    \n                    {isExpanded && (\n                      <div className=\"mt-4 pt-4 border-t space-y-2\">\n                        {event.eventLocation && (\n                          <p className=\"text-sm text-muted-foreground\">\n                            <strong>Event Location:</strong> {event.eventLocation}\n                          </p>\n                        )}\n                        {event.waitingLocation && (\n                          <p className=\"text-sm text-muted-foreground\">\n                            <strong>Waiting Location:</strong> {event.waitingLocation}\n                          </p>\n                        )}\n                        {event.contact && (\n                          <div className=\"text-sm text-muted-foreground flex items-center gap-2\">\n                            <span><strong>Contact:</strong> {event.contact}</span>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => window.location.href = `tel:${event.contact}`}\n                              className=\"h-6 w-6 p-0\"\n                              title={`Call ${event.contact}`}\n                            >\n                              <Phone className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        )}\n                        {event.comment && (\n                          <p className=\"text-sm text-foreground\">\n                            <strong>Description:</strong> {event.comment}\n                          </p>\n                        )}\n                        <p className=\"text-sm text-muted-foreground\">\n                          <strong>Participants:</strong> {event.participantCount} participants\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                );\n              })\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11636},"client/src/pages/events.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, Edit, Archive, Trash2, MapPin, Users, ArchiveX, Phone, Navigation, ChevronDown, ChevronUp, Calendar, Camera } from \"lucide-react\";\nimport { ExportButton } from \"@/components/ExportButton\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useEffect } from \"react\";\nimport Modal from \"@/components/modal\";\nimport EventForm from \"@/components/event-form\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ConfirmDialog } from \"@/components/ConfirmDialog\";\n\nexport default function Events() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [editingEvent, setEditingEvent] = useState<any>(null);\n  const [deletingEvent, setDeletingEvent] = useState<any>(null);\n  const [archivingEvent, setArchivingEvent] = useState<any>(null);\n  const [expandedEvents, setExpandedEvents] = useState<Set<string>>(new Set());\n  const [expandedIslands, setExpandedIslands] = useState<Set<string>>(new Set());\n  // Initialize filters from URL parameters (for map links)\n  const urlParams = new URLSearchParams(window.location.search);\n  const [filters, setFilters] = useState({\n    atoll: urlParams.get('atoll') || \"\",\n    island: urlParams.get('island') || \"\",\n    status: \"\",\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: events = [] } = useQuery({\n    queryKey: [\"/api/events\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: islandsData = [] } = useQuery({\n    queryKey: [\"/api/islands\"],\n    enabled: isAuthenticated,\n  });\n\n  // Get unique atolls and islands for filters\n  const atolls = Array.from(new Set((islandsData as any[]).map((island: any) => island.atoll))).sort();\n  \n  // Filter islands based on selected atoll\n  const availableIslands = filters.atoll && filters.atoll !== 'all' \n    ? (islandsData as any[]).filter((island: any) => island.atoll === filters.atoll)\n    : (islandsData as any[]);\n\n  const deleteEventMutation = useMutation({\n    mutationFn: async (eventId: string) => {\n      await apiRequest(\"DELETE\", `/api/events/${eventId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      toast({\n        title: \"Success\",\n        description: \"Event deleted successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete event\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const archiveEventMutation = useMutation({\n    mutationFn: async (eventId: string) => {\n      // First mark as completed, then archive\n      await apiRequest(\"PATCH\", `/api/events/${eventId}`, { status: \"completed\" });\n      await apiRequest(\"PATCH\", `/api/events/${eventId}/archive`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      setArchivingEvent(null);\n      toast({\n        title: \"Success\",\n        description: \"Event completed and archived successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      setArchivingEvent(null);\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to archive event\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleArchiveEvent = (event: any) => {\n    setArchivingEvent(event);\n  };\n\n  const confirmArchiveEvent = () => {\n    if (archivingEvent) {\n      archiveEventMutation.mutate(archivingEvent.id);\n    }\n  };\n\n  const filteredEvents = (events as any[]).filter((event: any) => {\n    if (filters.atoll && filters.atoll !== 'all' && event.atoll !== filters.atoll) return false;\n    if (filters.island && filters.island !== 'all' && event.island !== filters.island) return false;\n    if (filters.status && filters.status !== 'all' && event.status !== filters.status) return false;\n    return true;\n  });\n\n  // Group events by atoll and then by island\n  const eventsByAtoll = filteredEvents.reduce((acc, event) => {\n    if (!acc[event.atoll]) {\n      acc[event.atoll] = {};\n    }\n    const island = event.island || 'Unknown Island';\n    if (!acc[event.atoll][island]) {\n      acc[event.atoll][island] = [];\n    }\n    acc[event.atoll][island].push(event);\n    return acc;\n  }, {} as Record<string, Record<string, any[]>>);\n\n  const canCreateEvents = (user as any)?.role === 'admin' || (user as any)?.role === 'coordinator';\n\n  const toggleEventExpanded = (eventId: string) => {\n    setExpandedEvents(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(eventId)) {\n        newSet.delete(eventId);\n      } else {\n        newSet.add(eventId);\n      }\n      return newSet;\n    });\n  };\n\n  const toggleIslandExpanded = (islandKey: string) => {\n    setExpandedIslands(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(islandKey)) {\n        newSet.delete(islandKey);\n      } else {\n        newSet.add(islandKey);\n      }\n      return newSet;\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-2 sm:p-4 lg:p-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-foreground mb-2\">Events Management</h1>\n          <p className=\"text-sm sm:text-base text-muted-foreground\">Organize and track events across Maldives</p>\n        </div>\n        <div className=\"flex flex-col sm:flex-row gap-2 mt-4 sm:mt-0\">\n          {((user as any)?.role === 'coordinator' || (user as any)?.role === 'admin') && (\n            <ExportButton \n              dataType=\"events\"\n              label=\"Events\"\n              className=\"w-full sm:w-auto\"\n            />\n          )}\n          {canCreateEvents && (\n            <Button \n              onClick={() => setShowCreateModal(true)}\n              data-testid=\"button-create-event\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Event\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-2\">Filter by Atoll</label>\n              <Select value={filters.atoll} onValueChange={(value) => setFilters({...filters, atoll: value, island: \"all\"})}>\n                <SelectTrigger data-testid=\"select-filter-atoll\">\n                  <SelectValue placeholder=\"All Atolls\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Atolls</SelectItem>\n                  {atolls.map((atoll, index) => (\n                    <SelectItem key={`atoll-${atoll}-${index}`} value={atoll}>\n                      {atoll}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-2\">Filter by Island</label>\n              <Select value={filters.island} onValueChange={(value) => setFilters({...filters, island: value})}>\n                <SelectTrigger data-testid=\"select-filter-island\">\n                  <SelectValue placeholder=\"All Islands\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Islands</SelectItem>\n                  {availableIslands.map((island: any) => (\n                    <SelectItem key={island.id} value={island.name}>\n                      {island.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-2\">Filter by Status</label>\n              <Select value={filters.status} onValueChange={(value) => setFilters({...filters, status: value})}>\n                <SelectTrigger data-testid=\"select-filter-status\">\n                  <SelectValue placeholder=\"All Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Events List */}\n      <div className=\"space-y-6\">\n        {filteredEvents.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <Calendar className=\"h-16 w-16 mx-auto text-muted-foreground/40 mb-4\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Events Found</h3>\n              <p className=\"text-muted-foreground max-w-md mx-auto\" data-testid=\"text-no-events\">\n                {canCreateEvents ? \"Get started by creating your first event to organize activities across the Maldives.\" : \"Contact an admin to create events for your organization.\"}\n              </p>\n              {canCreateEvents && (\n                <Button \n                  onClick={() => setShowCreateModal(true)}\n                  className=\"mt-4\"\n                  data-testid=\"button-create-first-event\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Your First Event\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          Object.entries(eventsByAtoll)\n            .sort(([a], [b]) => a.localeCompare(b))\n            .map(([atoll, islandGroups]) => {\n              const totalEvents = Object.values(islandGroups).flat().length;\n              return (\n                <Card key={atoll}>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <MapPin className=\"h-5 w-5\" />\n                      {atoll} Atoll ({totalEvents} events)\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {Object.entries(islandGroups)\n                      .sort(([a], [b]) => a.localeCompare(b))\n                      .map(([island, islandEvents]) => {\n                        const islandKey = `${atoll}-${island}`;\n                        const isIslandExpanded = expandedIslands.has(islandKey);\n                        return (\n                          <div key={islandKey} className=\"space-y-2\">\n                            <div \n                              className=\"flex items-center justify-between border-b pb-2 cursor-pointer hover:bg-gray-50 transition-colors p-2 rounded\"\n                              onClick={() => toggleIslandExpanded(islandKey)}\n                              data-testid={`button-toggle-island-${islandKey}`}\n                            >\n                              <div className=\"flex items-center gap-2\">\n                                <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                                <h4 className=\"font-medium text-sm text-gray-700\">\n                                  {island} ({islandEvents.length} events)\n                                </h4>\n                              </div>\n                              {isIslandExpanded ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n                            </div>\n                            {isIslandExpanded && (\n                              <div className=\"space-y-4 pl-4\">\n                                {islandEvents.map((event: any) => {\n                      const isExpanded = expandedEvents.has(event.id);\n                      return (\n                        <Card key={event.id} data-testid={`card-event-${event.id}`} className=\"border-l-4 border-l-primary/20\">\n                          <CardContent className=\"p-3\">\n                            {/* Compact header - always visible */}\n                            <div \n                              className=\"flex items-center justify-between cursor-pointer\"\n                              onClick={() => toggleEventExpanded(event.id)}\n                              data-testid={`button-expand-${event.id}`}\n                            >\n                              <div className=\"flex items-center space-x-3 flex-1\">\n                                {/* Photo thumbnail */}\n                                {event.photoUrl && (\n                                  <div className=\"flex-shrink-0\">\n                                    <img\n                                      src={event.photoUrl}\n                                      alt={event.title}\n                                      className=\"w-12 h-12 object-cover rounded-lg border\"\n                                      data-testid={`img-event-thumbnail-${event.id}`}\n                                    />\n                                  </div>\n                                )}\n                                <div className=\"flex flex-col sm:flex-row sm:items-center sm:space-x-3 space-y-1 sm:space-y-0 flex-1\">\n                                  <h3 className=\"text-base font-semibold text-foreground\" data-testid={`text-event-title-${event.id}`}>\n                                    {event.title}\n                                  </h3>\n                                  <div className=\"flex items-center space-x-3\">\n                                    <span \n                                      className={`px-2 py-1 text-xs rounded-full ${\n                                        event.status === 'active' ? 'bg-green-100 text-green-800' :\n                                        event.status === 'scheduled' ? 'bg-blue-100 text-blue-800' :\n                                        event.status === 'completed' ? 'bg-gray-100 text-gray-800' :\n                                        'bg-yellow-100 text-yellow-800'\n                                      }`}\n                                      data-testid={`text-event-status-${event.id}`}\n                                    >\n                                      {event.status}\n                                    </span>\n                                    <div className=\"flex items-center text-sm text-muted-foreground\">\n                                      <Users className=\"h-4 w-4 mr-1\" />\n                                      <span data-testid={`text-event-participants-${event.id}`}>{event.participantCount}</span>\n                                    </div>\n                                    {event.photoUrl && (\n                                      <div title=\"Has photo\">\n                                        <Camera className=\"h-4 w-4 text-muted-foreground\" />\n                                      </div>\n                                    )}\n                                  </div>\n                                </div>\n                              </div>\n                              <div className=\"flex items-center space-x-2\">\n                                {/* Quick actions - always visible */}\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    setLocation(`/map?event=${event.id}`);\n                                  }}\n                                  title=\"Get Directions\"\n                                  data-testid={`button-directions-${event.id}`}\n                                >\n                                  <Navigation className=\"h-4 w-4\" />\n                                </Button>\n                                {event.contact && (\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      window.location.href = `tel:${event.contact}`;\n                                    }}\n                                    title={`Call ${event.contact}`}\n                                    data-testid={`button-call-${event.id}`}\n                                  >\n                                    <Phone className=\"h-4 w-4\" />\n                                  </Button>\n                                )}\n                                {isExpanded ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n                              </div>\n                            </div>\n\n                            {/* Expanded details */}\n                            {isExpanded && (\n                              <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                                {event.eventLocation && (\n                                  <p className=\"mt-2 text-sm text-muted-foreground\">\n                                    <strong>Event Location:</strong> {event.eventLocation}\n                                  </p>\n                                )}\n                                {event.waitingLocation && (\n                                  <p className=\"mt-1 text-sm text-muted-foreground\">\n                                    <strong>Waiting Location:</strong> {event.waitingLocation}\n                                  </p>\n                                )}\n                                {event.contact && (\n                                  <p className=\"mt-1 text-sm text-muted-foreground\">\n                                    <strong>Contact:</strong> {event.contact}\n                                  </p>\n                                )}\n                                {event.comment && (\n                                  <p className=\"mt-3 text-foreground\" data-testid={`text-event-comment-${event.id}`}>\n                                    {event.comment}\n                                  </p>\n                                )}\n\n                                {/* Event Photo - Full Size */}\n                                {event.photoUrl && (\n                                  <div className=\"mt-4\">\n                                    <strong className=\"text-sm text-muted-foreground\">Event Photo:</strong>\n                                    <Dialog>\n                                      <DialogTrigger asChild>\n                                        <div className=\"mt-2 cursor-pointer\">\n                                          <img\n                                            src={event.photoUrl}\n                                            alt={event.title}\n                                            className=\"max-w-sm w-full h-48 object-cover rounded-lg border hover:shadow-md transition-shadow\"\n                                            data-testid={`img-event-photo-${event.id}`}\n                                          />\n                                          <p className=\"text-xs text-muted-foreground mt-1\">Click to view full size</p>\n                                        </div>\n                                      </DialogTrigger>\n                                      <DialogContent className=\"max-w-4xl w-full\">\n                                        <div className=\"flex flex-col items-center space-y-4\">\n                                          <h3 className=\"text-lg font-semibold\">{event.title}</h3>\n                                          <img\n                                            src={event.photoUrl}\n                                            alt={event.title}\n                                            className=\"max-w-full max-h-96 object-contain rounded-lg\"\n                                          />\n                                        </div>\n                                      </DialogContent>\n                                    </Dialog>\n                                  </div>\n                                )}\n                                \n                                {/* Admin/Coordinator actions */}\n                                {((user as any)?.role === 'admin' || ((user as any)?.role === 'coordinator' && event.createdBy === (user as any)?.id)) && (\n                                  <div className=\"flex space-x-2 mt-4 pt-3 border-t border-gray-100\">\n                                    <Button \n                                      variant=\"ghost\" \n                                      size=\"sm\"\n                                      onClick={() => setEditingEvent(event)}\n                                      data-testid={`button-edit-${event.id}`}\n                                    >\n                                      <Edit className=\"h-4 w-4 mr-1\" />\n                                      Edit\n                                    </Button>\n                                    <Button \n                                      variant=\"ghost\" \n                                      size=\"sm\"\n                                      onClick={() => handleArchiveEvent(event)}\n                                      disabled={archiveEventMutation.isPending}\n                                      title=\"Complete and Archive Event\"\n                                      data-testid={`button-archive-${event.id}`}\n                                    >\n                                      <ArchiveX className=\"h-4 w-4 mr-1\" />\n                                      Archive\n                                    </Button>\n                                    <Button \n                                      variant=\"ghost\" \n                                      size=\"sm\"\n                                      onClick={() => setDeletingEvent(event)}\n                                      data-testid={`button-delete-${event.id}`}\n                                    >\n                                      <Trash2 className=\"h-4 w-4 mr-1\" />\n                                      Delete\n                                    </Button>\n                                  </div>\n                                )}\n                              </div>\n                            )}\n                          </CardContent>\n                        </Card>\n                      );\n                                })}\n                              </div>\n                            )}\n                          </div>\n                        );\n                      })}\n                  </CardContent>\n                </Card>\n              );\n            })\n        )}\n      </div>\n\n      {/* Delete Confirmation Dialog */}\n      <ConfirmDialog\n        isOpen={!!deletingEvent}\n        onClose={() => setDeletingEvent(null)}\n        onConfirm={() => {\n          if (deletingEvent) {\n            deleteEventMutation.mutate(deletingEvent.id);\n            setDeletingEvent(null);\n          }\n        }}\n        title=\"Delete Event\"\n        description={`Are you sure you want to delete \"${deletingEvent?.title}\"? This action cannot be undone.`}\n        confirmText=\"Delete Event\"\n        isLoading={deleteEventMutation.isPending}\n      />\n\n      {/* Archive Confirmation Dialog */}\n      <ConfirmDialog\n        isOpen={!!archivingEvent}\n        onClose={() => setArchivingEvent(null)}\n        onConfirm={confirmArchiveEvent}\n        title=\"Archive Event\"\n        description={`Mark \"${archivingEvent?.title}\" as completed and move it to the archive? This will change the event status to completed.`}\n        confirmText=\"Complete & Archive\"\n        isLoading={archiveEventMutation.isPending}\n      />\n\n      {/* Create Event Modal */}\n      <Modal\n        isOpen={showCreateModal}\n        onClose={() => setShowCreateModal(false)}\n        title=\"Create New Event\"\n      >\n        <EventForm\n          onSuccess={() => {\n            setShowCreateModal(false);\n            queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n          }}\n        />\n      </Modal>\n\n      {/* Edit Event Modal */}\n      <Modal\n        isOpen={!!editingEvent}\n        onClose={() => setEditingEvent(null)}\n        title=\"Edit Event\"\n      >\n        {editingEvent && (\n          <EventForm\n            event={editingEvent}\n            onSuccess={() => {\n              setEditingEvent(null);\n              queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n            }}\n          />\n        )}\n      </Modal>\n    </div>\n  );\n}\n","size_bytes":26483},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary to-secondary flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardContent className=\"p-8\">\n          <div className=\"text-center mb-8\">\n            <img \n              src=\"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=100\" \n              alt=\"Maldives islands view\" \n              className=\"mx-auto rounded-lg mb-4 h-20 w-full object-cover\"\n            />\n            <h1 className=\"text-2xl font-bold text-card-foreground\">Maldives Event Manager</h1>\n            <p className=\"text-muted-foreground mt-2\">Manage events across all atolls</p>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <Button \n              onClick={() => window.location.href = '/api/login'}\n              className=\"w-full\"\n              data-testid=\"button-login\"\n            >\n              Sign In\n            </Button>\n            \n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                Organize and track environmental conservation events across the Maldives archipelago\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1473},"client/src/pages/map.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { SimpleMap } from \"@/components/simple-map\";\nimport { useEffect, useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function MapPage() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  \n  // Check URL parameters for auto-selection and directions\n  const urlParams = new URLSearchParams(window.location.search);\n  const eventFromUrl = urlParams.get('event');\n  \n  const [selectedEventId, setSelectedEventId] = useState<string | null>(eventFromUrl);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-teal-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600 font-medium\">Loading Maldives Event Manager...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <div className=\"h-[calc(100vh-5rem)] lg:h-[calc(100vh-2rem)] overflow-hidden\">\n      <SimpleMap \n        className=\"h-full\" \n        selectedEventId={selectedEventId}\n        onEventSelect={setSelectedEventId}\n        autoDirections={!!eventFromUrl}\n      />\n    </div>\n  );\n}\n","size_bytes":1736},"client/src/pages/members.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Download, Plus, Edit, MoreVertical, Phone, Mail, Calendar, IdCard, Trash2, ChevronDown, ChevronUp, Users } from \"lucide-react\";\nimport { ExportButton } from \"@/components/ExportButton\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from \"@/components/ui/dropdown-menu\";\nimport { ConfirmDialog } from \"@/components/ConfirmDialog\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useEffect } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { getUserDisplayInfo } from \"@/lib/userDisplayUtils\";\n\nexport default function Members() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [roleFilter, setRoleFilter] = useState(\"\");\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [memberToDelete, setMemberToDelete] = useState<any>(null);\n  const [expandedMembers, setExpandedMembers] = useState<Set<string>>(new Set());\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: members = [] } = useQuery({\n    queryKey: [\"/api/users\"],\n    enabled: isAuthenticated,\n  });\n\n  const updateRoleMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: string; role: string }) => {\n      await apiRequest(\"PATCH\", `/api/users/${userId}/role`, { role });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Success\",\n        description: \"User role updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest(\"DELETE\", `/api/users/${userId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User deleted successfully\",\n      });\n      setDeleteDialogOpen(false);\n      setMemberToDelete(null);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteUser = (member: any) => {\n    setMemberToDelete(member);\n    setDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (memberToDelete) {\n      deleteMutation.mutate(memberToDelete.id);\n    }\n  };\n\n  const filteredMembers = (members as any[]).filter((member: any) => {\n    const matchesSearch = !searchQuery || \n      member.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      member.lastName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      member.email?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      member.serviceNumber?.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesRole = !roleFilter || roleFilter === 'all' || member.role === roleFilter;\n    \n    return matchesSearch && matchesRole;\n  });\n\n  const canManageRoles = (user as any)?.role === 'admin';\n\n  const toggleMemberExpanded = (memberId: string) => {\n    setExpandedMembers(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(memberId)) {\n        newSet.delete(memberId);\n      } else {\n        newSet.add(memberId);\n      }\n      return newSet;\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-2 sm:p-4 lg:p-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between mb-6\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-foreground mb-2\">Members Directory</h1>\n          <p className=\"text-sm sm:text-base text-muted-foreground\">Manage team members and their contact information</p>\n        </div>\n        <div className=\"flex space-x-2 mt-4 sm:mt-0\">\n          {(user as any)?.role === 'admin' && (\n            <ExportButton \n              dataType=\"users\"\n              label=\"Members\"\n              className=\"w-full sm:w-auto\"\n            />\n          )}\n        </div>\n      </div>\n\n      {/* Search and Filter */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Input\n                placeholder=\"Search members...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                data-testid=\"input-search-members\"\n              />\n            </div>\n            <div>\n              <Select value={roleFilter} onValueChange={setRoleFilter}>\n                <SelectTrigger data-testid=\"select-filter-role\">\n                  <SelectValue placeholder=\"All Roles\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Roles</SelectItem>\n                  <SelectItem value=\"admin\">Admin</SelectItem>\n                  <SelectItem value=\"coordinator\">Coordinator</SelectItem>\n                  <SelectItem value=\"agent\">Agent</SelectItem>\n                  <SelectItem value=\"attachment\">Attachment</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Members Grid */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6\">\n        {filteredMembers.length === 0 ? (\n          <div className=\"col-span-full\">\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <Users className=\"h-16 w-16 mx-auto text-muted-foreground/40 mb-4\" />\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Members Found</h3>\n                <p className=\"text-muted-foreground max-w-md mx-auto\" data-testid=\"text-no-members\">\n                  {searchQuery || roleFilter !== 'all' \n                    ? \"Try adjusting your search criteria or filters to find members.\"\n                    : \"Your team directory is empty. Members will appear here once they join your organization.\"\n                  }\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        ) : (\n          filteredMembers.map((member: any) => {\n            const isExpanded = expandedMembers.has(member.id);\n            const { displayName, initials } = getUserDisplayInfo(member);\n            return (\n              <Card key={member.id} data-testid={`card-member-${member.id}`}>\n                <CardContent className=\"p-3\">\n                  {/* Compact header - always visible */}\n                  <div \n                    className=\"flex items-center justify-between cursor-pointer\"\n                    onClick={() => toggleMemberExpanded(member.id)}\n                    data-testid={`button-expand-member-${member.id}`}\n                  >\n                    <div className=\"flex items-center space-x-3 flex-1\">\n                      {member.profileImageUrl ? (\n                        <div className=\"w-10 h-10 rounded-full overflow-hidden border-2 border-background shadow-sm\">\n                          <img \n                            src={member.profileImageUrl} \n                            alt={displayName}\n                            className=\"w-full h-full object-cover\"\n                            data-testid={`img-member-avatar-${member.id}`}\n                          />\n                        </div>\n                      ) : (\n                        <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-semibold text-sm\">\n                          {initials}\n                        </div>\n                      )}\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2\">\n                          <h3 className=\"font-semibold text-foreground text-base\" data-testid={`text-member-name-${member.id}`}>\n                            {displayName}\n                          </h3>\n                          <span \n                            className={`text-xs px-2 py-1 rounded ${\n                              member.role === 'admin' ? 'bg-primary text-primary-foreground' :\n                              member.role === 'coordinator' ? 'bg-secondary text-secondary-foreground' :\n                              'bg-muted text-muted-foreground'\n                            }`}\n                            data-testid={`text-member-role-${member.id}`}\n                          >\n                            {member.role}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      {/* Quick actions - always visible */}\n                      {member.mobile && (\n                        <>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              window.open(`tel:${member.mobile}`, '_self');\n                            }}\n                            data-testid={`button-call-${member.id}`}\n                          >\n                            <Phone className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              window.open(`sms:${member.mobile}`, '_self');\n                            }}\n                            data-testid={`button-sms-compact-${member.id}`}\n                          >\n                            💬\n                          </Button>\n                        </>\n                      )}\n                      {isExpanded ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n                    </div>\n                  </div>\n\n                  {/* Expanded details */}\n                  {isExpanded && (\n                    <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                      <div className=\"space-y-2 text-sm mb-4\">\n                        {member.serviceNumber && (\n                          <div className=\"flex items-center text-muted-foreground\">\n                            <IdCard className=\"w-4 h-4 mr-3\" />\n                            <span data-testid={`text-member-service-${member.id}`}>{member.serviceNumber}</span>\n                          </div>\n                        )}\n                        {member.mobile && (\n                          <div className=\"flex items-center text-muted-foreground\">\n                            <Phone className=\"w-4 h-4 mr-3\" />\n                            <div className=\"flex space-x-2\">\n                              <a \n                                href={`tel:${member.mobile}`}\n                                className=\"text-primary hover:underline\"\n                                data-testid={`link-call-${member.id}`}\n                              >\n                                {member.mobile}\n                              </a>\n                              <span className=\"text-muted-foreground\">|</span>\n                              <a \n                                href={`sms:${member.mobile}`}\n                                className=\"text-secondary hover:underline text-sm\"\n                                data-testid={`link-message-${member.id}`}\n                              >\n                                Message\n                              </a>\n                            </div>\n                          </div>\n                        )}\n                        {member.email && (\n                          <div className=\"flex items-center text-muted-foreground\">\n                            <Mail className=\"w-4 h-4 mr-3\" />\n                            <span data-testid={`text-member-email-${member.id}`}>{member.email}</span>\n                          </div>\n                        )}\n                        <div className=\"flex items-center text-muted-foreground\">\n                          <Calendar className=\"w-4 h-4 mr-3\" />\n                          <span data-testid={`text-member-joined-${member.id}`}>\n                            Joined {new Date(member.createdAt).toLocaleDateString()}\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex space-x-2 pt-3 border-t border-gray-100\">\n                        {canManageRoles && (\n                          <Select\n                            value={member.role}\n                            onValueChange={(role) => updateRoleMutation.mutate({ userId: member.id, role })}\n                          >\n                            <SelectTrigger className=\"flex-1\" data-testid={`select-role-${member.id}`}>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"agent\">Agent</SelectItem>\n                  <SelectItem value=\"attachment\">Attachment</SelectItem>\n                              <SelectItem value=\"coordinator\">Coordinator</SelectItem>\n                              <SelectItem value=\"admin\">Admin</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        )}\n                        {member.mobile && (\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => window.open(`sms:${member.mobile}`, '_self')}\n                            data-testid={`button-sms-${member.id}`}\n                          >\n                            💬\n                          </Button>\n                        )}\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`button-more-${member.id}`}>\n                              <MoreVertical className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            {canManageRoles && member.id !== (user as any)?.id && (\n                              <DropdownMenuItem \n                                onClick={() => handleDeleteUser(member)}\n                                className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                                data-testid={`menu-delete-${member.id}`}\n                              >\n                                <Trash2 className=\"w-4 h-4 mr-2\" />\n                                Delete User\n                              </DropdownMenuItem>\n                            )}\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })\n        )}\n      </div>\n\n      <ConfirmDialog\n        isOpen={deleteDialogOpen}\n        onClose={() => {\n          setDeleteDialogOpen(false);\n          setMemberToDelete(null);\n        }}\n        onConfirm={confirmDelete}\n        title=\"Delete User\"\n        description={`Are you sure you want to delete ${getUserDisplayInfo(memberToDelete).displayName}? This action cannot be undone.`}\n        confirmText=\"Delete User\"\n        cancelText=\"Cancel\"\n        variant=\"destructive\"\n        isLoading={deleteMutation.isPending}\n      />\n    </div>\n  );\n}\n","size_bytes":17727},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    style={{ zIndex: \"var(--z-modal-backdrop)\", ...props.style }}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      style={{ zIndex: \"var(--z-modal)\", ...props.style }}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4535},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    style={{ zIndex: \"var(--z-modal-backdrop)\", ...props.style }}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      style={{ zIndex: \"var(--z-modal)\", ...props.style }}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3963},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    style={{ zIndex: \"var(--z-popover)\", ...props.style }}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      style={{ zIndex: \"var(--z-popover)\", ...props.style }}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7719},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      style={{ zIndex: \"var(--z-popover)\", ...props.style }}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5798},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    style={{ zIndex: \"var(--z-modal-backdrop)\", ...props.style }}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      style={{ zIndex: \"var(--z-modal)\", ...props.style }}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4396},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/equipment-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Package, Plus, Wrench, MapPin } from \"lucide-react\";\nimport { insertEquipmentSchema, type InsertEquipment, type Equipment } from \"../../../shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface EquipmentFormProps {\n  onSuccess?: () => void;\n  editingEquipment?: Equipment | null;\n}\n\nconst equipmentTypes = [\n  \"tools\",\n  \"electronics\",\n  \"visual\",\n  \"network\",\n  \"others\"\n];\n\nconst equipmentStatuses = [\n  \"available\",\n  \"in_use\", \n  \"maintenance\",\n  \"damaged\"\n];\n\nconst equipmentConditions = [\n  \"excellent\",\n  \"good\",\n  \"fair\", \n  \"poor\"\n];\n\nexport default function EquipmentForm({ onSuccess, editingEquipment }: EquipmentFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Fetch islands data for dynamic dropdown\n  const { data: islandsData = [] } = useQuery({\n    queryKey: [\"/api/islands\"],\n  });\n  \n  const form = useForm<InsertEquipment>({\n    resolver: zodResolver(insertEquipmentSchema),\n    defaultValues: editingEquipment ? {\n      name: editingEquipment.name,\n      type: editingEquipment.type,\n      quantity: editingEquipment.quantity,\n      status: editingEquipment.status,\n      atoll: editingEquipment.atoll,\n      island: editingEquipment.island || \"\",\n      description: editingEquipment.description || \"\",\n      condition: editingEquipment.condition,\n    } : {\n      name: \"\",\n      type: \"tools\",\n      quantity: 1,\n      status: \"available\",\n      atoll: \"Kaafu\",\n      island: \"\",\n      description: \"\",\n      condition: \"good\",\n    }\n  });\n\n  const createEquipmentMutation = useMutation({\n    mutationFn: (data: InsertEquipment) => fetch('/api/equipment', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    }).then(res => res.json()),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/equipment'] });\n      toast({\n        title: \"Equipment Added\",\n        description: \"Equipment has been successfully added to the inventory\",\n      });\n      form.reset();\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Add Equipment\",\n        description: error.message || \"Failed to add equipment\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const updateEquipmentMutation = useMutation({\n    mutationFn: (data: InsertEquipment) => fetch(`/api/equipment/${editingEquipment?.id}`, {\n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    }).then(res => res.json()),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/equipment'] });\n      toast({\n        title: \"Equipment Updated\",\n        description: \"Equipment details have been successfully updated\",\n      });\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Update Equipment\",\n        description: error.message || \"Failed to update equipment\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const onSubmit = (data: InsertEquipment) => {\n    if (editingEquipment) {\n      updateEquipmentMutation.mutate(data);\n    } else {\n      createEquipmentMutation.mutate(data);\n    }\n  };\n\n  const isLoading = createEquipmentMutation.isPending || updateEquipmentMutation.isPending;\n\n  // Get unique atolls from islands data\n  const atolls = Array.from(new Set((islandsData as any[]).map((island: any) => island.atoll))).sort();\n  \n  // Filter islands by selected atoll\n  const availableIslands = form.watch(\"atoll\") \n    ? (islandsData as any[]).filter((island: any) => island.atoll === form.watch(\"atoll\"))\n    : (islandsData as any[]);\n\n  return (\n    <Card className=\"w-full max-w-2xl\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Package className=\"h-5 w-5\" />\n          {editingEquipment ? \"Edit Equipment\" : \"Add New Equipment\"}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Equipment Name</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"e.g., Diving Tank, First Aid Kit\"\n                        {...field}\n                        data-testid=\"input-equipment-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"type\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Equipment Type</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-equipment-type\">\n                          <SelectValue placeholder=\"Select equipment type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {equipmentTypes.map((type) => (\n                          <SelectItem key={type} value={type}>\n                            {type.charAt(0).toUpperCase() + type.slice(1)}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"quantity\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Quantity</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\"\n                        min=\"1\"\n                        placeholder=\"1\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                        data-testid=\"input-equipment-quantity\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-equipment-status\">\n                          <SelectValue placeholder=\"Select status\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {equipmentStatuses.map((status) => (\n                          <SelectItem key={status} value={status}>\n                            {status.replace('_', ' ').charAt(0).toUpperCase() + status.replace('_', ' ').slice(1)}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"atoll\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Atoll</FormLabel>\n                    <Select \n                      onValueChange={(value) => {\n                        field.onChange(value);\n                        // Clear island selection when atoll changes\n                        form.setValue(\"island\", \"\");\n                      }} \n                      defaultValue={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-equipment-atoll\">\n                          <SelectValue placeholder=\"Select atoll\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {atolls.map((atoll, index) => (\n                          <SelectItem key={`equipment-atoll-${index}`} value={atoll}>\n                            {atoll}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"island\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Island</FormLabel>\n                    <Select \n                      onValueChange={field.onChange}\n                      value={field.value || \"\"}\n                      disabled={!form.watch(\"atoll\")}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-equipment-island\">\n                          <SelectValue placeholder={form.watch(\"atoll\") ? \"Select Island\" : \"Select Atoll First\"} />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {availableIslands.map((island: any) => (\n                          <SelectItem key={island.id} value={island.name}>\n                            {island.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"condition\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Condition</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-equipment-condition\">\n                          <SelectValue placeholder=\"Select condition\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {equipmentConditions.map((condition) => (\n                          <SelectItem key={condition} value={condition}>\n                            {condition.charAt(0).toUpperCase() + condition.slice(1)}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Additional details about the equipment...\"\n                      className=\"min-h-[80px]\"\n                      {...field}\n                      value={field.value || \"\"}\n                      data-testid=\"textarea-equipment-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                type=\"submit\" \n                disabled={isLoading}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-submit-equipment\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                {isLoading ? \"Saving...\" : editingEquipment ? \"Update Equipment\" : \"Add Equipment\"}\n              </Button>\n              \n              {form.formState.isDirty && (\n                <Button \n                  type=\"button\" \n                  variant=\"outline\"\n                  onClick={() => form.reset()}\n                  data-testid=\"button-reset-equipment-form\"\n                >\n                  Reset\n                </Button>\n              )}\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":13452},"client/src/lib/geocodingService.ts":{"content":"// Geocoding service using OpenStreetMap Nominatim (free)\n// Allows searching for locations by name and converting to coordinates\n\ninterface GeocodingResult {\n  display_name: string;\n  lat: string;\n  lon: string;\n  place_id: string;\n  type: string;\n  importance: number;\n  boundingbox: [string, string, string, string]; // [south, north, west, east]\n}\n\ninterface SearchResult {\n  name: string;\n  coordinates: [number, number]; // [lat, lng]\n  type: string;\n  boundingBox?: {\n    north: number;\n    south: number; \n    east: number;\n    west: number;\n  };\n}\n\nclass GeocodingService {\n  private baseUrl = 'https://nominatim.openstreetmap.org';\n  \n  // Search for locations by name\n  async searchLocation(query: string, limit: number = 5): Promise<SearchResult[]> {\n    try {\n      // Add bias towards Maldives for better local results\n      const searchQuery = `${query}, Maldives`;\n      \n      const url = new URL(`${this.baseUrl}/search`);\n      url.searchParams.set('q', searchQuery);\n      url.searchParams.set('format', 'json');\n      url.searchParams.set('limit', limit.toString());\n      url.searchParams.set('countrycodes', 'mv'); // Restrict to Maldives\n      url.searchParams.set('addressdetails', '1');\n      url.searchParams.set('extratags', '1');\n      \n      const response = await fetch(url.toString(), {\n        headers: {\n          'User-Agent': 'MaldivesEventManager/1.0' // Required by Nominatim\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Geocoding failed: ${response.status}`);\n      }\n      \n      const results: GeocodingResult[] = await response.json();\n      \n      return results.map(result => ({\n        name: result.display_name,\n        coordinates: [parseFloat(result.lat), parseFloat(result.lon)] as [number, number],\n        type: result.type || 'unknown',\n        boundingBox: {\n          north: parseFloat(result.boundingbox[1]),\n          south: parseFloat(result.boundingbox[0]),\n          west: parseFloat(result.boundingbox[2]),\n          east: parseFloat(result.boundingbox[3])\n        }\n      }));\n      \n    } catch (error) {\n      return [];\n    }\n  }\n  \n  // Search specifically for Maldives islands and atolls\n  async searchMaldivesLocations(query: string): Promise<SearchResult[]> {\n    try {\n      // Search for islands, resorts, and atolls in Maldives\n      const searches = [\n        `${query} island maldives`,\n        `${query} atoll maldives`,\n        `${query} resort maldives`\n      ];\n      \n      const allResults: SearchResult[] = [];\n      \n      for (const searchTerm of searches) {\n        const url = new URL(`${this.baseUrl}/search`);\n        url.searchParams.set('q', searchTerm);\n        url.searchParams.set('format', 'json');\n        url.searchParams.set('limit', '3');\n        url.searchParams.set('countrycodes', 'mv');\n        url.searchParams.set('addressdetails', '1');\n        \n        const response = await fetch(url.toString(), {\n          headers: {\n            'User-Agent': 'MaldivesEventManager/1.0'\n          }\n        });\n        \n        if (response.ok) {\n          const results: GeocodingResult[] = await response.json();\n          \n          const searchResults = results.map(result => ({\n            name: result.display_name,\n            coordinates: [parseFloat(result.lat), parseFloat(result.lon)] as [number, number],\n            type: result.type || 'unknown',\n            boundingBox: {\n              north: parseFloat(result.boundingbox[1]),\n              south: parseFloat(result.boundingbox[0]),\n              west: parseFloat(result.boundingbox[2]),\n              east: parseFloat(result.boundingbox[3])\n            }\n          }));\n          \n          allResults.push(...searchResults);\n        }\n        \n        // Small delay between requests to be respectful\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n      \n      // Remove duplicates and sort by relevance\n      const uniqueResults = allResults.filter((result, index, self) =>\n        index === self.findIndex(r => \n          Math.abs(r.coordinates[0] - result.coordinates[0]) < 0.001 &&\n          Math.abs(r.coordinates[1] - result.coordinates[1]) < 0.001\n        )\n      );\n      \n      return uniqueResults.slice(0, 5); // Return top 5 results\n      \n    } catch (error) {\n      return [];\n    }\n  }\n  \n  // Reverse geocoding - get location name from coordinates\n  async reverseGeocode(lat: number, lng: number): Promise<string | null> {\n    try {\n      const url = new URL(`${this.baseUrl}/reverse`);\n      url.searchParams.set('lat', lat.toString());\n      url.searchParams.set('lon', lng.toString());\n      url.searchParams.set('format', 'json');\n      url.searchParams.set('addressdetails', '1');\n      \n      const response = await fetch(url.toString(), {\n        headers: {\n          'User-Agent': 'MaldivesEventManager/1.0'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Reverse geocoding failed: ${response.status}`);\n      }\n      \n      const result = await response.json();\n      return result.display_name || null;\n      \n    } catch (error) {\n      return null;\n    }\n  }\n  \n  // Get popular Maldives destinations\n  getPopularDestinations(): SearchResult[] {\n    return [\n      {\n        name: \"Malé, Kaafu Atoll, Maldives\",\n        coordinates: [4.1755, 73.5093],\n        type: \"capital\"\n      },\n      {\n        name: \"Hulhumalé, Kaafu Atoll, Maldives\", \n        coordinates: [4.2167, 73.5333],\n        type: \"city\"\n      },\n      {\n        name: \"Velana International Airport, Hulhulé, Maldives\",\n        coordinates: [4.1918, 73.5294],\n        type: \"airport\"\n      },\n      {\n        name: \"Addu Atoll, Maldives\",\n        coordinates: [-0.6847, 73.1567],\n        type: \"atoll\"\n      },\n      {\n        name: \"Baa Atoll, Maldives\",\n        coordinates: [5.3167, 72.9833],\n        type: \"atoll\"\n      }\n    ];\n  }\n}\n\nexport const geocodingService = new GeocodingService();","size_bytes":5941},"client/src/lib/routingService.ts":{"content":"// Street routing service using OSRM (completely free, no API key required)\n// Provides turn-by-turn directions and accurate route calculations\nimport * as polyline from 'polyline';\n\ninterface RouteStep {\n  instruction: string;\n  distance: number;\n  duration: number;\n  maneuver: {\n    location: [number, number];\n    type: string;\n  };\n}\n\ninterface RouteResult {\n  coordinates: [number, number][];\n  distance: number; // in meters\n  duration: number; // in seconds\n  steps: RouteStep[];\n}\n\ninterface RoutingOptions {\n  profile?: 'driving' | 'walking' | 'cycling';\n  avoid_features?: string[];\n}\n\nclass RoutingService {\n  private baseUrl = 'https://router.project-osrm.org';\n\n  async getRoute(\n    start: [number, number], \n    end: [number, number], \n    options: RoutingOptions = {}\n  ): Promise<RouteResult | null> {\n    \n    // Try multiple routing profiles in order of preference for street-level routing\n    const profiles = ['foot', 'driving'];\n    const requestedProfile = options.profile || 'walking';\n    \n    // Convert walking to foot for OSRM\n    const osmProfile = requestedProfile === 'walking' ? 'foot' : requestedProfile;\n    \n    // Put requested profile first, then try others\n    const tryProfiles = [osmProfile, ...profiles.filter(p => p !== osmProfile)];\n\n    for (const profile of tryProfiles) {\n      try {\n        \n        // OSRM API format: /route/v1/{profile}/{coordinates}?options\n        const coordinatesString = `${start[1]},${start[0]};${end[1]},${end[0]}`; // OSRM uses lng,lat format\n        const url = `${this.baseUrl}/route/v1/${profile}/${coordinatesString}?steps=true&geometries=polyline&overview=full&alternatives=false`;\n        \n        const response = await fetch(url, {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json'\n          }\n        });\n\n        if (!response.ok) {\n          continue; // Try next profile\n        }\n\n        const data = await response.json();\n        \n        if (!data.routes || data.routes.length === 0) {\n          continue; // Try next profile\n        }\n\n        const route = data.routes[0];\n        \n        // Decode OSRM polyline geometry\n        let routeCoordinates: [number, number][] = [];\n        \n        if (route.geometry && typeof route.geometry === 'string') {\n          try {\n            const decoded = polyline.decode(route.geometry);\n            routeCoordinates = decoded.map((coord: number[]) => [coord[0] as number, coord[1] as number]);\n            \n            // Accept any route with coordinates (even if it's just 2 points)\n            if (routeCoordinates.length >= 2) {\n              \n              // Process OSRM steps\n              const steps: RouteStep[] = [];\n              \n              if (route.legs && route.legs[0] && route.legs[0].steps) {\n                route.legs[0].steps.forEach((step: any) => {\n                  if (step.maneuver && step.maneuver.location) {\n                    steps.push({\n                      instruction: step.maneuver.instruction || `Continue ${step.name || ''}`,\n                      distance: step.distance || 0,\n                      duration: step.duration || 0,\n                      maneuver: {\n                        location: [step.maneuver.location[1], step.maneuver.location[0]], // Convert to [lat, lng]\n                        type: step.maneuver.type || 'continue'\n                      }\n                    });\n                  }\n                });\n              }\n              \n              // Add arrival step if not present\n              if (steps.length === 0 || !steps[steps.length - 1].instruction.includes('arrive')) {\n                steps.push({\n                  instruction: 'Arrive at destination',\n                  distance: 0,\n                  duration: 0,\n                  maneuver: {\n                    location: end,\n                    type: 'arrive'\n                  }\n                });\n              }\n\n              return {\n                coordinates: routeCoordinates,\n                distance: route.distance || 0,\n                duration: route.duration || 0,\n                steps\n              };\n            } else {\n            }\n          } catch (error) {\n            continue; // Try next profile\n          }\n        }\n      } catch (error) {\n        continue; // Try next profile\n      }\n    }\n    \n    // If all routing profiles failed, fall back to straight line\n    return this.createStraightLineRoute(start, end);\n  }\n\n  // Enhanced fallback to straight line route with multiple waypoints for better visualization\n  private createStraightLineRoute(start: [number, number], end: [number, number]): RouteResult {\n    const distance = this.calculateDistance(start[0], start[1], end[0], end[1]) * 1000; // Convert to meters\n    const bearing = this.calculateBearing(start[0], start[1], end[0], end[1]);\n    \n    // Create intermediate points for better visualization (every ~1km)\n    const numSegments = Math.max(2, Math.floor(distance / 1000));\n    const coordinates: [number, number][] = [];\n    \n    for (let i = 0; i <= numSegments; i++) {\n      const ratio = i / numSegments;\n      const lat = start[0] + (end[0] - start[0]) * ratio;\n      const lng = start[1] + (end[1] - start[1]) * ratio;\n      coordinates.push([lat, lng]);\n    }\n    \n    return {\n      coordinates,\n      distance,\n      duration: distance / 1.4, // Assume walking speed of 1.4 m/s (5 km/h)\n      steps: [\n        {\n          instruction: `Head ${this.getCompassDirection(bearing)} towards destination`,\n          distance,\n          duration: distance / 1.4,\n          maneuver: {\n            location: start,\n            type: 'start'\n          }\n        },\n        {\n          instruction: `Continue ${this.getCompassDirection(bearing)} for ${this.formatDistance(distance)}`,\n          distance: distance * 0.8,\n          duration: (distance * 0.8) / 1.4,\n          maneuver: {\n            location: [start[0] + (end[0] - start[0]) * 0.5, start[1] + (end[1] - start[1]) * 0.5],\n            type: 'continue'\n          }\n        },\n        {\n          instruction: `Arrive at destination`,\n          distance: 0,\n          duration: 0,\n          maneuver: {\n            location: end,\n            type: 'arrive'\n          }\n        }\n      ]\n    };\n  }\n\n  // Calculate distance between two points (Haversine formula)\n  private calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n    const R = 6371; // Earth's radius in kilometers\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n      Math.sin(dLon/2) * Math.sin(dLon/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  }\n\n  // Calculate bearing between two points\n  private calculateBearing(lat1: number, lon1: number, lat2: number, lon2: number): number {\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const lat1Rad = lat1 * Math.PI / 180;\n    const lat2Rad = lat2 * Math.PI / 180;\n    const y = Math.sin(dLon) * Math.cos(lat2Rad);\n    const x = Math.cos(lat1Rad) * Math.sin(lat2Rad) - Math.sin(lat1Rad) * Math.cos(lat2Rad) * Math.cos(dLon);\n    let bearing = Math.atan2(y, x) * 180 / Math.PI;\n    return (bearing + 360) % 360;\n  }\n\n  // Convert bearing to compass direction\n  private getCompassDirection(bearing: number): string {\n    const directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];\n    const index = Math.round(bearing / 22.5) % 16;\n    return directions[index];\n  }\n\n  // Format distance for display\n  formatDistance(meters: number): string {\n    if (meters < 1000) {\n      return `${Math.round(meters)}m`;\n    }\n    return `${(meters / 1000).toFixed(1)}km`;\n  }\n\n  // Format duration for display\n  formatDuration(seconds: number): string {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    }\n    return `${minutes}m`;\n  }\n}\n\nexport const routingService = new RoutingService();","size_bytes":8190},"client/src/lib/tileCache.ts":{"content":"// Tile caching service for offline map functionality\n// Uses IndexedDB for efficient storage of tile images\nimport L from 'leaflet';\n\ninterface TileData {\n  key: string;\n  blob: Blob;\n  timestamp: number;\n  x: number;\n  y: number;\n  z: number;\n}\n\ninterface SyncStatus {\n  lastSync: number;\n  totalTiles: number;\n  cachedTiles: number;\n  isActive: boolean;\n}\n\nclass TileCacheService {\n  private dbName = 'MaldivesMapTiles';\n  private dbVersion = 1;\n  private storeName = 'tiles';\n  private db: IDBDatabase | null = null;\n  private syncInterval: number | null = null;\n\n  // Maldives bounds for tile prefetching\n  private maldivesBounds = {\n    north: 7.091,\n    south: -0.693,\n    east: 73.754,\n    west: 72.693\n  };\n\n  async init(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.dbVersion);\n      \n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve();\n      };\n      \n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        if (!db.objectStoreNames.contains(this.storeName)) {\n          const store = db.createObjectStore(this.storeName, { keyPath: 'key' });\n          store.createIndex('timestamp', 'timestamp', { unique: false });\n        }\n      };\n    });\n  }\n\n  // Generate tile URL for OpenStreetMap\n  private getTileUrl(x: number, y: number, z: number): string {\n    const servers = ['a', 'b', 'c'];\n    const server = servers[Math.abs(x + y) % servers.length];\n    return `https://${server}.tile.openstreetmap.org/${z}/${x}/${y}.png`;\n  }\n\n  // Generate unique key for tile\n  private getTileKey(x: number, y: number, z: number): string {\n    return `tile_${z}_${x}_${y}`;\n  }\n\n  // Get cached tile\n  async getCachedTile(x: number, y: number, z: number): Promise<Blob | null> {\n    if (!this.db) await this.init();\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([this.storeName], 'readonly');\n      const store = transaction.objectStore(this.storeName);\n      const request = store.get(this.getTileKey(x, y, z));\n      \n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        const result = request.result;\n        if (result && this.isTileValid(result.timestamp)) {\n          resolve(result.blob);\n        } else {\n          resolve(null);\n        }\n      };\n    });\n  }\n\n  // Cache a tile by coordinates\n  async cacheTile(x: number, y: number, z: number, blob: Blob): Promise<void> {\n    if (!this.db) await this.init();\n    \n    const tileData: TileData = {\n      key: this.getTileKey(x, y, z),\n      blob,\n      timestamp: Date.now(),\n      x,\n      y,\n      z\n    };\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([this.storeName], 'readwrite');\n      const store = transaction.objectStore(this.storeName);\n      const request = store.put(tileData);\n      \n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  // Cache a tile by URL (for download functions)\n  async cacheTileByUrl(url: string, blob: Blob): Promise<void> {\n    // Extract x, y, z from URL like https://tile.openstreetmap.org/12/2879/1970.png\n    const match = url.match(/\\/(\\d+)\\/(\\d+)\\/(\\d+)\\.png$/);\n    if (!match) {\n      throw new Error(`Invalid tile URL format: ${url}`);\n    }\n    \n    const z = parseInt(match[1]);\n    const x = parseInt(match[2]); \n    const y = parseInt(match[3]);\n    \n    return this.cacheTile(x, y, z, blob);\n  }\n\n  // Get cached tile by URL (returns data URL string for direct use in img src)\n  async getCachedTileByUrl(url: string): Promise<string | null> {\n    // Extract x, y, z from URL like https://a.tile.openstreetmap.org/12/2879/1970.png\n    const match = url.match(/\\/(\\d+)\\/(\\d+)\\/(\\d+)\\.png$/);\n    if (!match) {\n      return null;\n    }\n    \n    const z = parseInt(match[1]);\n    const x = parseInt(match[2]); \n    const y = parseInt(match[3]);\n    \n    const blob = await this.getCachedTile(x, y, z);\n    if (blob) {\n      return URL.createObjectURL(blob);\n    }\n    return null;\n  }\n\n  // Download and cache a tile\n  async downloadAndCacheTile(x: number, y: number, z: number): Promise<boolean> {\n    try {\n      const url = this.getTileUrl(x, y, z);\n      const response = await fetch(url);\n      \n      if (!response.ok) {\n        console.warn(`Failed to download tile ${z}/${x}/${y}: ${response.status}`);\n        return false;\n      }\n      \n      const blob = await response.blob();\n      await this.cacheTile(x, y, z, blob);\n      return true;\n    } catch (error) {\n      console.error(`Error downloading tile ${z}/${x}/${y}:`, error);\n      return false;\n    }\n  }\n\n  // Check if a tile is still valid (not older than 7 days)\n  private isTileValid(timestamp: number): boolean {\n    const sevenDays = 7 * 24 * 60 * 60 * 1000;\n    return Date.now() - timestamp < sevenDays;\n  }\n\n  // Convert lat/lng to tile coordinates\n  private latLngToTile(lat: number, lng: number, zoom: number): { x: number; y: number } {\n    const latRad = lat * Math.PI / 180;\n    const n = Math.pow(2, zoom);\n    const x = Math.floor((lng + 180) / 360 * n);\n    const y = Math.floor((1 - Math.asinh(Math.tan(latRad)) / Math.PI) / 2 * n);\n    return { x, y };\n  }\n\n  // Generate tile coordinates for a bounding box\n  private getTilesInBounds(north: number, south: number, east: number, west: number, zoom: number): Array<{x: number, y: number, z: number}> {\n    const nw = this.latLngToTile(north, west, zoom);\n    const se = this.latLngToTile(south, east, zoom);\n    \n    const tiles = [];\n    for (let x = nw.x; x <= se.x; x++) {\n      for (let y = nw.y; y <= se.y; y++) {\n        tiles.push({ x, y, z: zoom });\n      }\n    }\n    return tiles;\n  }\n\n  // Sync tiles for Maldives region\n  async syncMaldivesTiles(onProgress?: (progress: number, total: number) => void): Promise<void> {\n    const zoomLevels = [7, 8, 9, 10, 11, 12]; // Cover from country view to detailed island view\n    let allTiles: Array<{x: number, y: number, z: number}> = [];\n    \n    // Generate all tile coordinates\n    for (const zoom of zoomLevels) {\n      const tiles = this.getTilesInBounds(\n        this.maldivesBounds.north,\n        this.maldivesBounds.south,\n        this.maldivesBounds.east,\n        this.maldivesBounds.west,\n        zoom\n      );\n      allTiles = allTiles.concat(tiles);\n    }\n\n    \n    let downloaded = 0;\n    const batchSize = 50; // Higher limit from our own server (not OSM)\n    \n    for (let i = 0; i < allTiles.length; i += batchSize) {\n      const batch = allTiles.slice(i, i + batchSize);\n      \n      const promises = batch.map(async (tile) => {\n        // Check if tile already exists and is valid\n        const cached = await this.getCachedTile(tile.x, tile.y, tile.z);\n        if (cached) {\n          return true; // Skip if already cached and valid\n        }\n        \n        return await this.downloadAndCacheTile(tile.x, tile.y, tile.z);\n      });\n      \n      const results = await Promise.all(promises);\n      downloaded += results.filter(Boolean).length;\n      \n      if (onProgress) {\n        onProgress(downloaded, allTiles.length);\n      }\n      \n      // Small delay between batches for our own server \n      if (i + batchSize < allTiles.length) {\n        await new Promise(resolve => setTimeout(resolve, 50));\n      }\n    }\n    \n    this.updateSyncStatus(allTiles.length, downloaded);\n  }\n\n  // Update sync status in localStorage\n  private updateSyncStatus(totalTiles: number, cachedTiles: number): void {\n    const status: SyncStatus = {\n      lastSync: Date.now(),\n      totalTiles,\n      cachedTiles,\n      isActive: false\n    };\n    localStorage.setItem('maldives_map_sync_status', JSON.stringify(status));\n  }\n\n  // Get sync status\n  getSyncStatus(): SyncStatus | null {\n    const stored = localStorage.getItem('maldives_map_sync_status');\n    return stored ? JSON.parse(stored) : null;\n  }\n\n  // Setup daily sync (runs every 24 hours)\n  setupDailySync(): void {\n    // Clear existing interval\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval);\n    }\n\n    // Check if we need to sync on startup\n    const status = this.getSyncStatus();\n    const oneDayMs = 24 * 60 * 60 * 1000;\n    \n    if (!status || Date.now() - status.lastSync > oneDayMs) {\n      this.syncMaldivesTiles().catch(console.error);\n    }\n\n    // Set up daily interval\n    this.syncInterval = window.setInterval(() => {\n      this.syncMaldivesTiles().catch(console.error);\n    }, oneDayMs);\n  }\n\n  // Stop daily sync\n  stopDailySync(): void {\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval);\n      this.syncInterval = null;\n    }\n  }\n\n  // Manual sync trigger\n  async manualSync(onProgress?: (progress: number, total: number) => void): Promise<void> {\n    const status = this.getSyncStatus();\n    if (status?.isActive) {\n      return;\n    }\n\n    // Mark sync as active\n    if (status) {\n      status.isActive = true;\n      localStorage.setItem('maldives_map_sync_status', JSON.stringify(status));\n    }\n\n    try {\n      await this.syncMaldivesTiles(onProgress);\n    } finally {\n      // Mark sync as inactive\n      const updatedStatus = this.getSyncStatus();\n      if (updatedStatus) {\n        updatedStatus.isActive = false;\n        localStorage.setItem('maldives_map_sync_status', JSON.stringify(updatedStatus));\n      }\n    }\n  }\n\n  // Clear all cached tiles\n  async clearCache(): Promise<void> {\n    if (!this.db) await this.init();\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([this.storeName], 'readwrite');\n      const store = transaction.objectStore(this.storeName);\n      const request = store.clear();\n      \n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  // Clean up old tiles (older than 30 days)\n  async cleanupOldTiles(): Promise<number> {\n    if (!this.db) await this.init();\n    \n    const thirtyDays = 30 * 24 * 60 * 60 * 1000;\n    const cutoffTime = Date.now() - thirtyDays;\n    let deletedCount = 0;\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([this.storeName], 'readwrite');\n      const store = transaction.objectStore(this.storeName);\n      const index = store.index('timestamp');\n      const request = index.openCursor(IDBKeyRange.upperBound(cutoffTime));\n      \n      request.onerror = () => reject(request.error);\n      request.onsuccess = (event) => {\n        const cursor = (event.target as IDBRequest).result;\n        if (cursor) {\n          cursor.delete();\n          deletedCount++;\n          cursor.continue();\n        } else {\n          resolve(deletedCount);\n        }\n      };\n    });\n  }\n\n  // Get cache statistics\n  async getCacheStats(): Promise<{totalTiles: number, totalSize: number}> {\n    if (!this.db) await this.init();\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction([this.storeName], 'readonly');\n      const store = transaction.objectStore(this.storeName);\n      const request = store.getAll();\n      \n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        const tiles = request.result;\n        const totalSize = tiles.reduce((sum, tile) => sum + tile.blob.size, 0);\n        resolve({\n          totalTiles: tiles.length,\n          totalSize\n        });\n      };\n    });\n  }\n}\n\n// Create singleton instance\nexport const tileCacheService = new TileCacheService();\n\n// Helper function to create object URL from cached tile\nexport function createTileUrl(blob: Blob): string {\n  return URL.createObjectURL(blob);\n}\n\n// Custom tile layer that uses cached tiles\nexport class OfflineTileLayer extends L.TileLayer {\n  createTile(coords: L.Coords, done: L.DoneCallback): HTMLImageElement {\n    const tile = document.createElement('img');\n    \n    L.DomEvent.on(tile, 'load', L.Util.bind(this._tileOnLoad, this, done, tile));\n    L.DomEvent.on(tile, 'error', L.Util.bind(this._tileOnError, this, done, tile));\n    \n    if (this.options.crossOrigin || this.options.crossOrigin === '') {\n      tile.crossOrigin = this.options.crossOrigin === true ? '' : this.options.crossOrigin;\n    }\n    \n    // Try to load from cache first\n    this.loadTileFromCache(coords, tile, done);\n    \n    return tile;\n  }\n\n  private async loadTileFromCache(coords: L.Coords, tile: HTMLImageElement, done: L.DoneCallback): Promise<void> {\n    try {\n      const cachedBlob = await tileCacheService.getCachedTile(coords.x, coords.y, coords.z);\n      \n      if (cachedBlob) {\n        // Use cached tile\n        tile.src = createTileUrl(cachedBlob);\n      } else {\n        // Fall back to network and cache the tile\n        const url = this.getTileUrl(coords);\n        tile.src = url;\n        \n        // Cache the tile when it loads\n        tile.addEventListener('load', async () => {\n          try {\n            const response = await fetch(url);\n            if (response.ok) {\n              const blob = await response.blob();\n              await tileCacheService.cacheTile(coords.x, coords.y, coords.z, blob);\n            }\n          } catch (error) {\n            console.warn('Failed to cache tile:', error);\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Error loading tile from cache:', error);\n      // Fall back to network\n      tile.src = this.getTileUrl(coords);\n    }\n  }\n}","size_bytes":13520},"client/src/pages/equipment.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePermissions } from \"@/hooks/usePermissions\";\nimport { PermissionGuard } from \"@/components/PermissionGuard\";\nimport { Package, Plus, Search, Edit, Trash2, MapPin, Settings, ChevronDown, ChevronUp } from \"lucide-react\";\nimport { ExportButton } from \"@/components/ExportButton\";\nimport EquipmentForm from \"@/components/equipment-form\";\nimport EquipmentTransferForm from \"@/components/equipment-transfer-form\";\nimport EquipmentTransferHistory from \"@/components/equipment-transfer-history\";\nimport { type Equipment } from \"../../../shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ConfirmDialog } from \"@/components/ConfirmDialog\";\n\nconst maldivesAtolls = [\n  \"All Atolls\", \"Haa Alif\", \"Haa Dhaal\", \"Shaviyani\", \"Noonu\", \"Raa\", \"Baa\", \"Kaafu\",\n  \"Alifu Alifu\", \"Alifu Dhaal\", \"Vaavu\", \"Meemu\", \"Faafu\", \"Dhaal\",\n  \"Thaa\", \"Laamu\", \"Gaafu Alifu\", \"Gaafu Dhaal\", \"Gnaviyani\", \"Seenu\"\n];\n\nconst statusColors = {\n  available: \"bg-green-100 text-green-800\",\n  in_use: \"bg-blue-100 text-blue-800\", \n  maintenance: \"bg-yellow-100 text-yellow-800\",\n  damaged: \"bg-red-100 text-red-800\"\n};\n\nconst conditionColors = {\n  excellent: \"bg-green-100 text-green-800\",\n  good: \"bg-blue-100 text-blue-800\",\n  fair: \"bg-yellow-100 text-yellow-800\", \n  poor: \"bg-red-100 text-red-800\"\n};\n\nexport default function EquipmentPage() {\n  const [showForm, setShowForm] = useState(false);\n  const [editingEquipment, setEditingEquipment] = useState<Equipment | null>(null);\n  const [selectedAtoll, setSelectedAtoll] = useState(\"All Atolls\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filterType, setFilterType] = useState(\"all\");\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n  const [deletingEquipment, setDeletingEquipment] = useState<Equipment | null>(null);\n  const [expandedEquipment, setExpandedEquipment] = useState<Set<string>>(new Set());\n  const [expandedIslands, setExpandedIslands] = useState<Set<string>>(new Set());\n  \n  const { toast } = useToast();\n  const { user } = useAuth();\n  const { canViewEquipment, canEditEquipment } = usePermissions();\n  const queryClient = useQueryClient();\n\n  // Build query parameters\n  const queryParams = new URLSearchParams();\n  if (selectedAtoll !== \"All Atolls\") {\n    queryParams.append('atoll', selectedAtoll);\n  }\n  if (filterType !== \"all\") {\n    queryParams.append('type', filterType);\n  }\n  if (filterStatus !== \"all\") {\n    queryParams.append('status', filterStatus);\n  }\n\n  const { data: equipment = [], isLoading } = useQuery<Equipment[]>({\n    queryKey: ['/api/equipment', queryParams.toString()],\n    queryFn: () => fetch(`/api/equipment?${queryParams.toString()}`).then(res => res.json()),\n    staleTime: 30 * 1000, // 30 seconds\n  });\n\n  const deleteEquipmentMutation = useMutation({\n    mutationFn: (id: string) => fetch(`/api/equipment/${id}`, {\n      method: 'DELETE',\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/equipment'] });\n      toast({\n        title: \"Equipment Deleted\",\n        description: \"Equipment has been removed from inventory\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Delete Equipment\",\n        description: error.message || \"Failed to delete equipment\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Filter equipment based on search query and hide 0 quantity items\n  const filteredEquipment = equipment.filter(item =>\n    item.quantity > 0 && (\n      !searchQuery || \n      item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      item.type.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      item.atoll.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      (item.island && item.island.toLowerCase().includes(searchQuery.toLowerCase())) ||\n      (item.description && item.description.toLowerCase().includes(searchQuery.toLowerCase()))\n    )\n  );\n\n  // Group equipment by atoll and island for display\n  const equipmentByAtoll = filteredEquipment.reduce((acc, item) => {\n    if (!acc[item.atoll]) {\n      acc[item.atoll] = {};\n    }\n    const island = item.island || 'Unknown Island';\n    if (!acc[item.atoll][island]) {\n      acc[item.atoll][island] = [];\n    }\n    acc[item.atoll][island].push(item);\n    return acc;\n  }, {} as Record<string, Record<string, Equipment[]>>);\n\n  // Sort equipment within each island group by name\n  Object.keys(equipmentByAtoll).forEach(atoll => {\n    Object.keys(equipmentByAtoll[atoll]).forEach(island => {\n      equipmentByAtoll[atoll][island].sort((a, b) => a.name.localeCompare(b.name));\n    });\n  });\n\n  const handleEdit = (equipment: Equipment) => {\n    setEditingEquipment(equipment);\n    setShowForm(true);\n  };\n\n  const handleDelete = (id: string, name: string) => {\n    const equipment = filteredEquipment.find(e => e.id === id);\n    if (equipment) {\n      setDeletingEquipment(equipment);\n    }\n  };\n\n  const handleFormSuccess = () => {\n    setShowForm(false);\n    setEditingEquipment(null);\n  };\n\n  const toggleEquipmentExpanded = (equipmentId: string) => {\n    setExpandedEquipment(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(equipmentId)) {\n        newSet.delete(equipmentId);\n      } else {\n        newSet.add(equipmentId);\n      }\n      return newSet;\n    });\n  };\n\n  const toggleIslandExpanded = (islandKey: string) => {\n    setExpandedIslands(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(islandKey)) {\n        newSet.delete(islandKey);\n      } else {\n        newSet.add(islandKey);\n      }\n      return newSet;\n    });\n  };\n\n  // Check if user has permission to view equipment\n  if (!canViewEquipment) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"text-center py-12\">\n          <Package className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n          <h2 className=\"text-2xl font-semibold mb-2\">Access Restricted</h2>\n          <p className=\"text-gray-600\">\n            You don't have permission to view equipment. Contact your administrator if you need access.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (showForm) {\n    return (\n      <PermissionGuard permission=\"editEquipment\" fallback={\n        <div className=\"container mx-auto p-6\">\n          <div className=\"text-center py-12\">\n            <Package className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n            <h2 className=\"text-2xl font-semibold mb-2\">Permission Required</h2>\n            <p className=\"text-gray-600\">\n              You don't have permission to add or edit equipment.\n            </p>\n          </div>\n        </div>\n      }>\n        <div className=\"container mx-auto p-6\">\n          <div className=\"mb-4\">\n            <Button \n              onClick={() => {\n                setShowForm(false);\n                setEditingEquipment(null);\n              }}\n              variant=\"outline\"\n              data-testid=\"button-back-to-equipment\"\n            >\n              ← Back to Equipment List\n            </Button>\n          </div>\n          <EquipmentForm \n            onSuccess={handleFormSuccess}\n            editingEquipment={editingEquipment}\n          />\n        </div>\n      </PermissionGuard>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-2 sm:p-4 lg:p-6\">\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-6\">\n        <div>\n          <h1 className=\"text-2xl sm:text-3xl font-bold flex items-center gap-2\">\n            <Package className=\"h-6 w-6 sm:h-8 sm:w-8\" />\n            Equipment Management\n          </h1>\n          <p className=\"text-sm sm:text-base text-muted-foreground mt-1\">\n            Track and manage equipment across all Maldives atolls\n          </p>\n        </div>\n        <div className=\"flex flex-col sm:flex-row gap-2\">\n          <PermissionGuard permission=\"viewEquipment\">\n            <ExportButton \n              dataType=\"equipment\"\n              label=\"Equipment\"\n              className=\"w-full sm:w-auto\"\n            />\n          </PermissionGuard>\n          <PermissionGuard permission=\"editEquipment\">\n            <Button \n              onClick={() => setShowForm(true)}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-add-equipment\"\n            >\n              <Plus className=\"h-4 w-4\" />\n              Add Equipment\n            </Button>\n          </PermissionGuard>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          <Input\n            placeholder=\"Search equipment...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-equipment-search\"\n          />\n        </div>\n        \n        <Select value={selectedAtoll} onValueChange={setSelectedAtoll}>\n          <SelectTrigger data-testid=\"select-filter-atoll\">\n            <SelectValue placeholder=\"Filter by atoll\" />\n          </SelectTrigger>\n          <SelectContent>\n            {maldivesAtolls.map((atoll) => (\n              <SelectItem key={atoll} value={atoll}>\n                {atoll}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n\n        <Select value={filterType} onValueChange={setFilterType}>\n          <SelectTrigger data-testid=\"select-filter-type\">\n            <SelectValue placeholder=\"Filter by type\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Types</SelectItem>\n            <SelectItem value=\"tools\">Tools</SelectItem>\n            <SelectItem value=\"electronics\">Electronics</SelectItem>\n            <SelectItem value=\"visual\">Visual</SelectItem>\n            <SelectItem value=\"network\">Network</SelectItem>\n            <SelectItem value=\"others\">Others</SelectItem>\n          </SelectContent>\n        </Select>\n\n        <Select value={filterStatus} onValueChange={setFilterStatus}>\n          <SelectTrigger data-testid=\"select-filter-status\">\n            <SelectValue placeholder=\"Filter by status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Status</SelectItem>\n            <SelectItem value=\"available\">Available</SelectItem>\n            <SelectItem value=\"in_use\">In Use</SelectItem>\n            <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n            <SelectItem value=\"damaged\">Damaged</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Equipment Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold\">{filteredEquipment.length}</div>\n            <div className=\"text-sm text-muted-foreground\">Total Equipment</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {filteredEquipment.filter(e => e.status === 'available').length}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Available</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {filteredEquipment.filter(e => e.status === 'in_use').length}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">In Use</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-2xl font-bold text-red-600\">\n              {filteredEquipment.filter(e => e.status === 'damaged').length}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Damaged</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Equipment List */}\n      {isLoading ? (\n        <div className=\"text-center py-8\">Loading equipment...</div>\n      ) : filteredEquipment.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Package className=\"h-16 w-16 mx-auto text-muted-foreground/40 mb-4\" />\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Equipment Found</h3>\n            <p className=\"text-muted-foreground max-w-md mx-auto mb-4\">\n              Start building your inventory by adding equipment items that can be tracked across different atolls.\n            </p>\n            <Button \n              onClick={() => setShowForm(true)}\n              data-testid=\"button-add-first-equipment\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Your First Equipment\n            </Button>\n          </CardContent>\n        </Card>\n      ) : selectedAtoll === \"All Atolls\" ? (\n        // Group by atoll and island when showing all\n        <div className=\"space-y-6\">\n          {Object.entries(equipmentByAtoll)\n            .sort(([a], [b]) => a.localeCompare(b))\n            .map(([atoll, islandGroups]) => {\n              const totalItems = Object.values(islandGroups).flat().length;\n              return (\n                <Card key={atoll}>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <MapPin className=\"h-5 w-5\" />\n                      {atoll} Atoll ({totalItems} items)\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {Object.entries(islandGroups)\n                      .sort(([a], [b]) => a.localeCompare(b))\n                      .map(([island, items]) => {\n                        const islandKey = `${atoll}-${island}`;\n                        const isIslandExpanded = expandedIslands.has(islandKey);\n                        return (\n                          <div key={islandKey} className=\"space-y-2\">\n                            <div \n                              className=\"flex items-center justify-between border-b pb-2 cursor-pointer hover:bg-gray-50 transition-colors p-2 rounded\"\n                              onClick={() => toggleIslandExpanded(islandKey)}\n                              data-testid={`button-toggle-island-${islandKey}`}\n                            >\n                              <div className=\"flex items-center gap-2\">\n                                <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                                <h4 className=\"font-medium text-sm text-gray-700\">\n                                  {island} ({items.length} items)\n                                </h4>\n                              </div>\n                              {isIslandExpanded ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n                            </div>\n                            {isIslandExpanded && (\n                              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 pl-4\">\n                                {items.map((item) => (\n                                  <EquipmentCard\n                                    key={item.id}\n                                    equipment={item}\n                                    onEdit={handleEdit}\n                                    onDelete={handleDelete}\n                                    isDeleting={deleteEquipmentMutation.isPending}\n                                    isExpanded={expandedEquipment.has(item.id)}\n                                    onToggleExpand={() => toggleEquipmentExpanded(item.id)}\n                                  />\n                                ))}\n                              </div>\n                            )}\n                          </div>\n                        );\n                      })}\n                  </CardContent>\n                </Card>\n              );\n            })}\n        </div>\n      ) : (\n        // Show grouped by island when filtered by specific atoll\n        <div className=\"space-y-4\">\n          {Object.entries(equipmentByAtoll)\n            .filter(([atoll]) => selectedAtoll === \"All Atolls\" || atoll === selectedAtoll)\n            .sort(([a], [b]) => a.localeCompare(b))\n            .map(([atoll, islandGroups]) => \n              Object.entries(islandGroups)\n                .sort(([a], [b]) => a.localeCompare(b))\n                .map(([island, items]) => (\n                  <Card key={`${atoll}-${island}`}>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"flex items-center gap-2 text-base\">\n                        <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n                        {selectedAtoll === \"All Atolls\" ? `${island}, ${atoll} Atoll` : island}\n                        <span className=\"text-sm font-normal text-gray-500\">({items.length} items)</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                        {items.map((item) => (\n                          <EquipmentCard\n                            key={item.id}\n                            equipment={item}\n                            onEdit={handleEdit}\n                            onDelete={handleDelete}\n                            isDeleting={deleteEquipmentMutation.isPending}\n                            isExpanded={expandedEquipment.has(item.id)}\n                            onToggleExpand={() => toggleEquipmentExpanded(item.id)}\n                          />\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n            ).flat()}\n        </div>\n      )}\n\n      {/* Delete Confirmation Dialog */}\n      <ConfirmDialog\n        isOpen={!!deletingEquipment}\n        onClose={() => setDeletingEquipment(null)}\n        onConfirm={() => {\n          if (deletingEquipment) {\n            deleteEquipmentMutation.mutate(deletingEquipment.id);\n            setDeletingEquipment(null);\n          }\n        }}\n        title=\"Delete Equipment\"\n        description={`Are you sure you want to delete \"${deletingEquipment?.name}\"? This will permanently remove this equipment from inventory.`}\n        confirmText=\"Delete Equipment\"\n        isLoading={deleteEquipmentMutation.isPending}\n      />\n    </div>\n  );\n}\n\ninterface EquipmentCardProps {\n  equipment: Equipment;\n  onEdit: (equipment: Equipment) => void;\n  onDelete: (id: string, name: string) => void;\n  isDeleting: boolean;\n  isExpanded: boolean;\n  onToggleExpand: () => void;\n}\n\nfunction EquipmentCard({ equipment, onEdit, onDelete, isDeleting, isExpanded, onToggleExpand }: EquipmentCardProps) {\n  const queryClient = useQueryClient();\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardContent className=\"p-3\">\n        {/* Compact header - always visible */}\n        <div \n          className=\"flex items-center justify-between cursor-pointer\"\n          onClick={onToggleExpand}\n          data-testid={`button-expand-equipment-${equipment.id}`}\n        >\n          <div className=\"flex items-center space-x-3 flex-1\">\n            <div>\n              <h3 className=\"font-semibold text-base\">{equipment.name}</h3>\n              <p className=\"text-sm text-muted-foreground capitalize\">\n                {equipment.type} • Qty: {equipment.quantity}\n              </p>\n            </div>\n            <Badge className={statusColors[equipment.status as keyof typeof statusColors]}>\n              {equipment.status.replace('_', ' ')}\n            </Badge>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            {/* Quick actions - always visible */}\n            <PermissionGuard permission=\"editEquipment\">\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onEdit(equipment);\n                }}\n                data-testid={`button-edit-equipment-${equipment.id}`}\n              >\n                <Edit className=\"h-4 w-4\" />\n              </Button>\n            </PermissionGuard>\n            <div onClick={(e) => e.stopPropagation()}>\n              <EquipmentTransferForm\n                equipment={equipment}\n                onSuccess={() => {\n                  // Refresh equipment list after transfer\n                  queryClient.invalidateQueries({ queryKey: ['/api/equipment'] });\n                }}\n              />\n            </div>\n            {isExpanded ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n          </div>\n        </div>\n\n        {/* Expanded details */}\n        {isExpanded && (\n          <div className=\"mt-4 pt-4 border-t border-gray-200 space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <MapPin className=\"h-4 w-4 text-gray-500\" />\n              <span className=\"text-sm\">\n                {equipment.atoll}\n                {equipment.island && ` • ${equipment.island}`}\n              </span>\n            </div>\n\n            {/* Equipment Transfer History - Moved to prominent position */}\n            <EquipmentTransferHistory \n              equipmentId={equipment.id}\n              equipmentName={equipment.name}\n            />\n            \n            <div className=\"flex gap-2 flex-wrap\">\n              <Badge className={conditionColors[equipment.condition as keyof typeof conditionColors]}>\n                {equipment.condition}\n              </Badge>\n            </div>\n\n            {equipment.description && (\n              <p className=\"text-sm text-gray-600 mt-2\">\n                {equipment.description}\n              </p>\n            )}\n\n            <div className=\"text-xs text-gray-500 mt-2\">\n              Added {new Date(equipment.createdAt || Date.now()).toLocaleDateString()}\n            </div>\n\n            {/* Delete action in expanded view */}\n            <div className=\"pt-3 border-t border-gray-100\">\n              <PermissionGuard permission=\"editEquipment\">\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={() => onDelete(equipment.id, equipment.name)}\n                  disabled={isDeleting}\n                  data-testid={`button-delete-equipment-${equipment.id}`}\n                >\n                  <Trash2 className=\"h-4 w-4 mr-1\" />\n                  Delete\n                </Button>\n              </PermissionGuard>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":23273},"client/src/components/user-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { insertUserSchema, type InsertUser, type User } from \"@shared/schema\";\nimport { X } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface UserFormProps {\n  user?: User;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport default function UserForm({ user, onSuccess, onCancel }: UserFormProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<InsertUser>({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      email: user?.email || \"\",\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      serviceNumber: user?.serviceNumber || \"\",\n      mobile: user?.mobile || \"\",\n      role: (user?.role as \"agent\" | \"coordinator\" | \"admin\" | \"attachment\") || \"agent\",\n      isActive: user?.isActive ?? true,\n    },\n  });\n\n  const onSubmit = async (data: InsertUser) => {\n    setIsSubmitting(true);\n    try {\n      const url = user ? `/api/users/${user.id}` : \"/api/users\";\n      const method = user ? \"PATCH\" : \"POST\";\n      \n      await apiRequest(method, url, data);\n      \n      toast({\n        title: \"Success\",\n        description: user ? \"User updated successfully\" : \"User created successfully\",\n      });\n      \n      onSuccess();\n    } catch (error: any) {\n      console.error(\"Error creating user:\", error);\n      toast({\n        title: \"Error\",\n        description: error?.message || `Failed to ${user ? 'update' : 'create'} user`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-2xl mx-2 sm:mx-auto\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n        <CardTitle>{user ? 'Edit User' : 'Add New User'}</CardTitle>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onCancel}\n          data-testid=\"button-cancel-user-form\"\n        >\n          <X className=\"h-4 w-4\" />\n        </Button>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"firstName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>First Name *</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter first name\"\n                        data-testid=\"input-first-name\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"lastName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Last Name *</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter last name\"\n                        data-testid=\"input-last-name\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email *</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"email\"\n                      placeholder=\"Enter email address\"\n                      data-testid=\"input-email\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"serviceNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Service Number</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter service number\"\n                        data-testid=\"input-service-number\"\n                        {...field}\n                        value={field.value || \"\"}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"mobile\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Mobile</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter mobile number\"\n                        data-testid=\"input-mobile\"\n                        {...field}\n                        value={field.value || \"\"}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"role\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Role</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-role\">\n                        <SelectValue placeholder=\"Select role\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"agent\">Agent</SelectItem>\n                      <SelectItem value=\"attachment\">Attachment</SelectItem>\n                      <SelectItem value=\"coordinator\">Coordinator</SelectItem>\n                      <SelectItem value=\"admin\">Admin</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-4 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onCancel}\n                data-testid=\"button-cancel\"\n                disabled={isSubmitting}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting}\n                data-testid=\"button-submit-user\"\n              >\n                {isSubmitting ? (user ? \"Updating...\" : \"Creating...\") : (user ? \"Update User\" : \"Create User\")}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7670},"client/src/components/tile-preload-control.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { Download, Database, Loader2, CheckCircle, Trash2 } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface PreloadStatus {\n  isPreloading: boolean;\n  completed: number;\n  total: number;\n  startTime?: number;\n}\n\ninterface DatabaseStats {\n  totalTiles: number;\n  totalSize: number;\n}\n\nexport function TilePreloadControl() {\n  const [status, setStatus] = useState<PreloadStatus>({ isPreloading: false, completed: 0, total: 0 });\n  const [databaseStats, setDatabaseStats] = useState<DatabaseStats>({ totalTiles: 0, totalSize: 0 });\n  const [isLoading, setIsLoading] = useState(false);\n  const [estimatedTimeRemaining, setEstimatedTimeRemaining] = useState<string>('');\n  const { toast } = useToast();\n\n  const fetchDatabaseStats = async () => {\n    try {\n      const response = await fetch('/api/cache/status');\n      if (response.ok) {\n        const data = await response.json();\n        setDatabaseStats(data);\n      }\n    } catch (error) {\n      console.warn('Failed to fetch database stats');\n    }\n  };\n\n  const fetchStatus = async () => {\n    try {\n      const response = await fetch('/api/tiles/preload/status');\n      if (response.ok) {\n        const data = await response.json();\n        setStatus(data);\n        \n        // Also fetch current database stats for accurate display\n        await fetchDatabaseStats();\n        \n        // Calculate ETA if preloading and we have meaningful data\n        if (data.isPreloading && data.completed > 100 && data.startTime) {\n          const elapsed = (Date.now() - data.startTime) / 1000; // seconds\n          const rate = data.completed / elapsed; // tiles per second\n          const remaining = data.total - data.completed;\n          const eta = remaining / rate; // seconds\n          \n          if (eta > 60) {\n            const hours = Math.floor(eta / 3600);\n            const minutes = Math.floor((eta % 3600) / 60);\n            const seconds = Math.floor(eta % 60);\n            \n            if (hours > 0) {\n              setEstimatedTimeRemaining(`${hours}h ${minutes}m ${seconds}s remaining`);\n            } else {\n              setEstimatedTimeRemaining(`${minutes}m ${seconds}s remaining`);\n            }\n          } else {\n            setEstimatedTimeRemaining(`${Math.floor(eta)}s remaining`);\n          }\n        } else if (!data.isPreloading) {\n          setEstimatedTimeRemaining('');\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to fetch preload status');\n    }\n  };\n\n  useEffect(() => {\n    fetchStatus();\n    fetchDatabaseStats();\n    \n    // Poll status every 3 seconds when preloading for more responsive updates\n    const interval = setInterval(() => {\n      if (status.isPreloading) {\n        fetchStatus();\n      } else {\n        // When not preloading, still update database stats periodically\n        fetchDatabaseStats();\n      }\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, [status.isPreloading]);\n\n  const startPreload = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/tiles/preload/start', { method: 'POST' });\n      if (response.ok) {\n        toast({\n          title: \"Preload Started\",\n          description: \"The complete Maldives map is being cached to the server.\",\n        });\n        fetchStatus();\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Error\",\n          description: error.message || \"Failed to start preload\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to start tile preload\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const clearServerCache = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/tiles/cache/clear-and-resync', { method: 'POST' });\n      if (response.ok) {\n        toast({\n          title: \"Server Cache Cleared\",\n          description: \"All server map tiles cleared. New preload will start automatically.\",\n        });\n        fetchStatus();\n        fetchDatabaseStats();\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Error\",\n          description: error.message || \"Failed to clear server cache\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to clear server cache\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const progress = status.total > 0 ? (status.completed / status.total) * 100 : 0;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Database className=\"h-5 w-5\" />\n          Server Map Preload\n        </CardTitle>\n        <CardDescription>\n          Cache the complete Maldives map to the server for faster loading across all users\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {status.isPreloading ? (\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <div className=\"flex items-center gap-2 text-sm text-blue-600\">\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n                Preloading map tiles... {status.completed} / {status.total}\n              </div>\n              <span className=\"text-sm font-medium text-blue-600\">\n                {progress.toFixed(1)}%\n              </span>\n            </div>\n            {estimatedTimeRemaining && (\n              <div className=\"text-center\">\n                <span className=\"text-xs text-orange-600 font-medium\">\n                  ⏱️ {estimatedTimeRemaining}\n                </span>\n              </div>\n            )}\n            <Progress value={progress} className=\"h-3\" />\n            <div className=\"text-xs text-gray-500 text-center\">\n              This process downloads all map tiles for the Maldives region\n              {!estimatedTimeRemaining && status.completed > 10 && (\n                <span className=\"block text-orange-600 mt-1\">⏱️ Calculating time remaining...</span>\n              )}\n            </div>\n          </div>\n        ) : databaseStats.totalTiles > 0 ? (\n          <div className=\"flex items-center gap-2 text-sm text-green-600\">\n            <CheckCircle className=\"h-4 w-4\" />\n            Map preload completed ({databaseStats.totalTiles.toLocaleString()} tiles cached)\n          </div>\n        ) : (\n          <div className=\"text-sm text-gray-600\">\n            No preload has been run yet. Start preload to cache all Maldives map tiles.\n            {databaseStats.totalTiles > 0 && (\n              <div className=\"text-xs text-gray-500 mt-1\">\n                Current cache: {databaseStats.totalTiles.toLocaleString()} tiles\n              </div>\n            )}\n          </div>\n        )}\n\n        <div className=\"flex flex-col gap-3\">\n          <Button \n            onClick={startPreload}\n            disabled={isLoading || status.isPreloading}\n            className=\"w-full\"\n            data-testid=\"button-start-preload\"\n          >\n            {isLoading ? (\n              <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n            ) : (\n              <Download className=\"h-4 w-4 mr-2\" />\n            )}\n            {status.isPreloading ? 'Preload Running...' : 'Start Complete Map Preload'}\n          </Button>\n\n          {databaseStats.totalTiles > 0 && (\n            <Button \n              onClick={clearServerCache}\n              disabled={isLoading || status.isPreloading}\n              variant=\"outline\"\n              className=\"w-full text-red-600 hover:text-red-700 border-red-200 hover:border-red-300\"\n              data-testid=\"button-clear-server-cache\"\n            >\n              {isLoading ? (\n                <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n              ) : (\n                <Trash2 className=\"h-4 w-4 mr-2\" />\n              )}\n              Clear Server Cache & Restart\n            </Button>\n          )}\n        </div>\n\n        <div className=\"text-xs text-gray-500\">\n          ⚠️ Admin only: This will download thousands of map tiles and may take several minutes\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8567},"client/src/components/ObjectUploader.tsx":{"content":"import { useState, useRef } from \"react\";\nimport type { ReactNode } from \"react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (result: any) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * Compresses an image file while maintaining reasonable quality\n * Targets around 100-200KB for optimal storage savings\n */\nasync function compressImage(file: File): Promise<Blob> {\n  console.log('Starting image compression for file:', file.name, 'Size:', file.size);\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      console.error('Failed to get canvas context');\n      reject(new Error('Canvas context not available'));\n      return;\n    }\n    \n    const img = new Image();\n    \n    img.onload = () => {\n      console.log('Image loaded successfully. Original dimensions:', img.width, 'x', img.height);\n      \n      // Calculate new dimensions (max 800px width while maintaining aspect ratio)\n      const maxWidth = 800;\n      const ratio = Math.min(maxWidth / img.width, maxWidth / img.height);\n      \n      canvas.width = img.width * ratio;\n      canvas.height = img.height * ratio;\n      \n      console.log('Compressed dimensions:', canvas.width, 'x', canvas.height);\n      \n      // Draw and compress the image\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n      \n      // Convert to blob with 75% quality (good balance of size/quality)\n      canvas.toBlob(\n        (blob) => {\n          if (blob) {\n            console.log('Image compression successful. New size:', blob.size);\n            resolve(blob);\n          } else {\n            console.error('Canvas toBlob returned null');\n            reject(new Error('Image compression failed - toBlob returned null'));\n          }\n        },\n        'image/jpeg',\n        0.75\n      );\n    };\n    \n    img.onerror = (error) => {\n      console.error('Failed to load image:', error);\n      reject(new Error('Failed to load image for compression'));\n    };\n    \n    img.src = URL.createObjectURL(file);\n    console.log('Image object URL created, waiting for load...');\n  });\n}\n\n/**\n * A simple file upload component using a standard file input with image compression\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (!file.type.startsWith('image/')) {\n      alert('Please select an image file');\n      return;\n    }\n\n    setIsUploading(true);\n\n    try {\n      // Compress the image to save storage space\n      const compressedFile = await compressImage(file);\n      \n      // Check compressed file size\n      if (compressedFile.size > maxFileSize) {\n        alert(`Compressed image is still too large (${Math.round(compressedFile.size / 1024)}KB). Please select a smaller image.`);\n        setIsUploading(false);\n        return;\n      }\n\n      const { method, url } = await onGetUploadParameters();\n      \n      const uploadResponse = await fetch(url, {\n        method,\n        body: compressedFile,\n        headers: {\n          'Content-Type': 'image/jpeg', // Always convert to JPEG for consistency\n        },\n      });\n\n      if (uploadResponse.ok) {\n        // Extract the object path from the presigned URL\n        // URL format: https://storage.googleapis.com/bucket-name/object-path?signed-params\n        const urlObj = new URL(url);\n        const fullPath = urlObj.pathname; // This gives us /bucket-name/uploads/uuid\n        \n        // Extract just the object path part (after the bucket name)\n        // Convert /bucket-name/.private/uploads/uuid to /objects/uploads/uuid\n        const pathParts = fullPath.split('/').filter(part => part.length > 0);\n        if (pathParts.length >= 3) {\n          // Skip bucket name and .private, use uploads/uuid part\n          const uploadsIndex = pathParts.findIndex(part => part === 'uploads');\n          if (uploadsIndex >= 0) {\n            const objectPath = `/objects/${pathParts.slice(uploadsIndex).join('/')}`;\n            console.log('Extracted object path:', objectPath);\n            \n            onComplete?.({\n              successful: [{ uploadURL: objectPath }]\n            });\n          } else {\n            throw new Error('Invalid upload URL - uploads path not found');\n          }\n        } else {\n          throw new Error('Invalid upload URL path format');\n        }\n      } else {\n        const errorText = await uploadResponse.text();\n        console.error('Upload failed:', errorText);\n        throw new Error(`Upload failed: ${uploadResponse.status}`);\n      }\n    } catch (error: any) {\n      console.error('Upload error:', error);\n      console.error('Error details:', {\n        message: error.message,\n        name: error.name,\n        stack: error.stack,\n        toString: error.toString()\n      });\n      const errorMessage = error.message || error.toString() || 'Unknown error occurred';\n      alert(`Failed to upload file: ${errorMessage}. Please try again.`);\n    } finally {\n      setIsUploading(false);\n      // Reset file input to allow re-uploading the same file\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  const handleButtonClick = () => {\n    if (!isUploading && fileInputRef.current) {\n      fileInputRef.current.click();\n    }\n  };\n\n  return (\n    <div>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={handleFileChange}\n        disabled={isUploading}\n        style={{ display: 'none' }}\n      />\n      <Button \n        type=\"button\" \n        className={buttonClassName}\n        disabled={isUploading}\n        onClick={handleButtonClick}\n      >\n        {isUploading ? 'Uploading...' : children}\n      </Button>\n    </div>\n  );\n}","size_bytes":6312},"client/src/components/admin-sections.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Label } from '@/components/ui/label';\nimport { \n  UserCog, \n  Users, \n  Database, \n  ArchiveRestore, \n  BarChart3, \n  X, \n  Search,\n  Download,\n  Trash2,\n  CheckCircle,\n  AlertTriangle,\n  Activity,\n  Monitor,\n  Settings,\n  FileText,\n  Globe\n} from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { ConfirmDialog } from '@/components/ConfirmDialog';\nimport { getUserDisplayInfo } from '@/lib/userDisplayUtils';\n\ninterface AdminSectionProps {\n  section: string;\n  onClose: () => void;\n}\n\nexport function AdminSection({ section, onClose }: AdminSectionProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showDeactivateConfirm, setShowDeactivateConfirm] = useState(false);\n  const [showActivateConfirm, setShowActivateConfirm] = useState(false);\n  const [showApprovalDialog, setShowApprovalDialog] = useState(false);\n  const [selectedPendingUser, setSelectedPendingUser] = useState<any>(null);\n  const [approvalAction, setApprovalAction] = useState<'approve' | 'reject'>('approve');\n\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n\n  const { data: events = [] } = useQuery({\n    queryKey: [\"/api/events\"],\n  });\n\n  const { data: islands = [] } = useQuery({\n    queryKey: [\"/api/islands\"],\n  });\n\n  // Pending users query\n  const { data: pendingUsers = [] } = useQuery({\n    queryKey: [\"/api/users/pending\"],\n    refetchInterval: 10000, // Refresh every 10 seconds\n  });\n\n\n  const bulkUpdateMutation = useMutation({\n    mutationFn: async ({ userIds, updates }: { userIds: string[]; updates: any }) => {\n      await Promise.all(\n        userIds.map(userId => \n          apiRequest(\"PATCH\", `/api/users/${userId}`, updates)\n        )\n      );\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"Users updated successfully\",\n      });\n      setSelectedUsers([]);\n    },\n  });\n\n\n\n  // User approval mutations\n  const approveUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest(\"PATCH\", `/api/users/${userId}/approve`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Success\",\n        description: \"User approved successfully\",\n      });\n      setShowApprovalDialog(false);\n      setSelectedPendingUser(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to approve user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest(\"PATCH\", `/api/users/${userId}/reject`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Success\",\n        description: \"User rejected successfully\",\n      });\n      setShowApprovalDialog(false);\n      setSelectedPendingUser(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to reject user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n\n  const renderBulkOperationsSection = () => {\n    const filteredUsers = (users as any[]).filter((user: any) =>\n      user.firstName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.lastName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.email?.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    return (\n      <>\n        <Card className=\"w-full max-w-4xl\">\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle>Bulk User Operations</CardTitle>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex gap-4\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search users...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-users\"\n                  />\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button\n                    onClick={() => setShowDeactivateConfirm(true)}\n                    disabled={selectedUsers.length === 0}\n                    variant=\"destructive\"\n                    data-testid=\"button-bulk-deactivate\"\n                  >\n                    Deactivate Selected\n                  </Button>\n                  <Button\n                    onClick={() => setShowActivateConfirm(true)}\n                    disabled={selectedUsers.length === 0}\n                    data-testid=\"button-bulk-activate\"\n                  >\n                    Activate Selected\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"border rounded\">\n                <div className=\"max-h-96 overflow-y-auto\">\n                  {filteredUsers.map((user: any) => (\n                    <div key={user.id} className=\"flex items-center space-x-3 p-3 border-b last:border-b-0\">\n                      <Checkbox\n                        checked={selectedUsers.includes(user.id)}\n                        onCheckedChange={(checked) => {\n                          if (checked) {\n                            setSelectedUsers([...selectedUsers, user.id]);\n                          } else {\n                            setSelectedUsers(selectedUsers.filter(id => id !== user.id));\n                          }\n                        }}\n                        data-testid={`checkbox-user-${user.id}`}\n                      />\n                      <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-sm font-medium\">\n                        {getUserDisplayInfo(user).initials}\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium\">{getUserDisplayInfo(user).displayName}</p>\n                        <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                      </div>\n                      <div className=\"text-sm\">\n                        <span className={`px-2 py-1 rounded text-xs ${\n                          user.role === 'admin' ? 'bg-red-100 text-red-800' :\n                          user.role === 'coordinator' ? 'bg-blue-100 text-blue-800' :\n                          'bg-gray-100 text-gray-800'\n                        }`}>\n                          {user.role}\n                        </span>\n                      </div>\n                      <div className=\"text-sm\">\n                        {user.isActive ? (\n                          <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                        ) : (\n                          <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                {selectedUsers.length} user(s) selected\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Confirmation Dialogs for User Operations */}\n        <ConfirmDialog\n          isOpen={showDeactivateConfirm}\n          onClose={() => setShowDeactivateConfirm(false)}\n          onConfirm={() => {\n            bulkUpdateMutation.mutate({ \n              userIds: selectedUsers, \n              updates: { isActive: false } \n            });\n            setShowDeactivateConfirm(false);\n          }}\n          title=\"Deactivate Users\"\n          description={`Are you sure you want to deactivate ${selectedUsers.length} selected user${selectedUsers.length > 1 ? 's' : ''}? This will prevent them from accessing the application.`}\n          confirmText=\"Deactivate Users\"\n          isLoading={bulkUpdateMutation.isPending}\n        />\n        \n        <ConfirmDialog\n          isOpen={showActivateConfirm}\n          onClose={() => setShowActivateConfirm(false)}\n          onConfirm={() => {\n            bulkUpdateMutation.mutate({ \n              userIds: selectedUsers, \n              updates: { isActive: true } \n            });\n            setShowActivateConfirm(false);\n          }}\n          title=\"Activate Users\"\n          description={`Are you sure you want to activate ${selectedUsers.length} selected user${selectedUsers.length > 1 ? 's' : ''}? This will allow them to access the application.`}\n          confirmText=\"Activate Users\"\n          variant=\"default\"\n          isLoading={bulkUpdateMutation.isPending}\n        />\n      </>\n    );\n  };\n\n  const renderSuspendedAccountsSection = () => {\n    const suspendedUsers = (users as any[]).filter((user: any) => !user.isActive);\n\n    return (\n      <Card className=\"w-full max-w-4xl\">\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Suspended Accounts</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {suspendedUsers.length === 0 ? (\n              <p className=\"text-center text-muted-foreground py-8\">\n                No suspended accounts found.\n              </p>\n            ) : (\n              <div className=\"space-y-3\">\n                {suspendedUsers.map((user: any) => (\n                  <div key={user.id} className=\"flex items-center justify-between p-3 border rounded\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-muted rounded-full flex items-center justify-center text-muted-foreground text-sm font-medium\">\n                        {getUserDisplayInfo(user).initials}\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">{getUserDisplayInfo(user).displayName}</p>\n                        <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                      </div>\n                    </div>\n                    <Button\n                      onClick={() => bulkUpdateMutation.mutate({ \n                        userIds: [user.id], \n                        updates: { isActive: true } \n                      })}\n                      size=\"sm\"\n                      data-testid={`button-reactivate-${user.id}`}\n                    >\n                      Reactivate\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n\n  const renderSystemAnalyticsSection = () => {\n    const activeUsers = (users as any[]).filter((user: any) => user.isActive).length;\n    const activeEvents = (events as any[]).filter((event: any) => event.status === 'active').length;\n    const completedEvents = (events as any[]).filter((event: any) => event.status === 'completed').length;\n\n    return (\n      <Card className=\"w-full max-w-4xl\">\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>System Analytics</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"border rounded p-4 text-center\">\n                <Users className=\"h-6 w-6 mx-auto mb-2 text-green-500\" />\n                <p className=\"text-2xl font-bold\">{activeUsers}</p>\n                <p className=\"text-xs text-muted-foreground\">Active Users</p>\n              </div>\n              <div className=\"border rounded p-4 text-center\">\n                <Activity className=\"h-6 w-6 mx-auto mb-2 text-blue-500\" />\n                <p className=\"text-2xl font-bold\">{activeEvents}</p>\n                <p className=\"text-xs text-muted-foreground\">Active Events</p>\n              </div>\n              <div className=\"border rounded p-4 text-center\">\n                <CheckCircle className=\"h-6 w-6 mx-auto mb-2 text-purple-500\" />\n                <p className=\"text-2xl font-bold\">{completedEvents}</p>\n                <p className=\"text-xs text-muted-foreground\">Completed Events</p>\n              </div>\n              <div className=\"border rounded p-4 text-center\">\n                <Database className=\"h-6 w-6 mx-auto mb-2 text-orange-500\" />\n                <p className=\"text-2xl font-bold\">{(islands as any[]).filter((i: any) => i.hasVisited).length}</p>\n                <p className=\"text-xs text-muted-foreground\">Visited Islands</p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <h3 className=\"font-semibold\">User Distribution</h3>\n              <div className=\"space-y-2\">\n                {['admin', 'coordinator', 'agent', 'attachment'].map(role => {\n                  const count = (users as any[]).filter((user: any) => user.role === role).length;\n                  const percentage = (users as any[]).length > 0 ? (count / (users as any[]).length * 100).toFixed(1) : 0;\n                  return (\n                    <div key={role} className=\"flex items-center justify-between p-2 border rounded\">\n                      <span className=\"capitalize font-medium\">{role}s</span>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-sm\">{count} users ({percentage}%)</span>\n                        <div className=\"w-20 h-2 bg-muted rounded\">\n                          <div \n                            className=\"h-full bg-primary rounded\" \n                            style={{ width: `${percentage}%` }}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const renderBackupRestoreSection = () => (\n    <Card className=\"w-full max-w-4xl\">\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <CardTitle>Archive & Restore</CardTitle>\n        <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n          <X className=\"h-4 w-4\" />\n        </Button>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold\">Archived Events Management</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Button variant=\"outline\" className=\"justify-start h-auto p-4\">\n                <div className=\"text-left\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <ArchiveRestore className=\"h-4 w-4\" />\n                    <span className=\"font-medium\">Archive Old Events</span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Archive completed events older than 6 months</p>\n                </div>\n              </Button>\n              <Button variant=\"outline\" className=\"justify-start h-auto p-4\">\n                <div className=\"text-left\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <Download className=\"h-4 w-4\" />\n                    <span className=\"font-medium\">Export Archives</span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Download archived events as CSV</p>\n                </div>\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold\">System Backup</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Button variant=\"outline\" className=\"justify-start h-auto p-4\">\n                <div className=\"text-left\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <Database className=\"h-4 w-4\" />\n                    <span className=\"font-medium\">Create Full Backup</span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Backup all data including users and events</p>\n                </div>\n              </Button>\n              <Button variant=\"outline\" className=\"justify-start h-auto p-4\">\n                <div className=\"text-left\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <ArchiveRestore className=\"h-4 w-4\" />\n                    <span className=\"font-medium\">Restore from Backup</span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Restore system from previous backup</p>\n                </div>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n\n  const renderSystemMonitorSection = () => (\n    <Card className=\"w-full max-w-4xl\">\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <Settings className=\"h-5 w-5\" />\n          System Monitor\n        </CardTitle>\n        <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n          <X className=\"h-4 w-4\" />\n        </Button>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"border rounded p-4 text-center\">\n              <Users className=\"h-6 w-6 mx-auto mb-2 text-green-500\" />\n              <p className=\"text-xl font-bold\">{(users as any[]).filter((u: any) => u.isActive).length}</p>\n              <p className=\"text-xs text-muted-foreground\">Active Users</p>\n            </div>\n            <div className=\"border rounded p-4 text-center\">\n              <Activity className=\"h-6 w-6 mx-auto mb-2 text-blue-500\" />\n              <p className=\"text-xl font-bold\">{(events as any[]).filter((e: any) => e.status === 'active').length}</p>\n              <p className=\"text-xs text-muted-foreground\">Active Events</p>\n            </div>\n            <div className=\"border rounded p-4 text-center\">\n              <Globe className=\"h-6 w-6 mx-auto mb-2 text-orange-500\" />\n              <p className=\"text-xl font-bold\">{(islands as any[]).filter((i: any) => i.hasVisited).length}</p>\n              <p className=\"text-xs text-muted-foreground\">Visited Islands</p>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold\">Environment</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"border rounded p-3\">\n                <p className=\"font-medium\">Mode</p>\n                <p className=\"text-sm text-muted-foreground\">Development</p>\n              </div>\n              <div className=\"border rounded p-3\">\n                <p className=\"font-medium\">Protocol</p>\n                <p className=\"text-sm text-muted-foreground\">{window.location.protocol}</p>\n              </div>\n              <div className=\"border rounded p-3\">\n                <p className=\"font-medium\">Host</p>\n                <p className=\"text-sm text-muted-foreground\">{window.location.host}</p>\n              </div>\n              <div className=\"border rounded p-3\">\n                <p className=\"font-medium\">User Agent</p>\n                <p className=\"text-sm text-muted-foreground truncate\">{navigator.userAgent.slice(0, 30)}...</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n\n  const renderUserApprovalSection = () => (\n    <Card className=\"w-full max-w-4xl mx-auto max-h-[80vh] overflow-hidden flex flex-col\">\n      <CardHeader className=\"flex-shrink-0\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center\">\n            <UserCog className=\"h-5 w-5 mr-2\" />\n            User Approvals\n          </CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"flex-1 overflow-auto\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <p className=\"text-sm text-muted-foreground\">\n              Approve or reject pending user registrations\n            </p>\n            <div className=\"text-sm font-medium\">\n              {(pendingUsers as any[]).length} pending approval{(pendingUsers as any[]).length !== 1 ? 's' : ''}\n            </div>\n          </div>\n\n          {(pendingUsers as any[]).length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <UserCog className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>No users pending approval</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {(pendingUsers as any[]).map((user: any) => (\n                <Card key={user.id} className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      {user.profileImageUrl ? (\n                        <div className=\"w-10 h-10 rounded-full overflow-hidden border-2 border-background shadow-sm\">\n                          <img \n                            src={user.profileImageUrl} \n                            alt={getUserDisplayInfo(user).displayName}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        </div>\n                      ) : (\n                        <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-semibold\">\n                          {getUserDisplayInfo(user).initials}\n                        </div>\n                      )}\n                      <div>\n                        <div className=\"font-semibold\">\n                          {getUserDisplayInfo(user).displayName}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {user.email}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          Registered: {new Date(user.createdAt).toLocaleDateString()}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"text-green-600 hover:text-green-700 hover:bg-green-50\"\n                        onClick={() => {\n                          setSelectedPendingUser(user);\n                          setApprovalAction('approve');\n                          setShowApprovalDialog(true);\n                        }}\n                        disabled={approveUserMutation.isPending || rejectUserMutation.isPending}\n                        data-testid={`button-approve-${user.id}`}\n                      >\n                        <CheckCircle className=\"h-4 w-4 mr-1\" />\n                        Approve\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                        onClick={() => {\n                          setSelectedPendingUser(user);\n                          setApprovalAction('reject');\n                          setShowApprovalDialog(true);\n                        }}\n                        disabled={approveUserMutation.isPending || rejectUserMutation.isPending}\n                        data-testid={`button-reject-${user.id}`}\n                      >\n                        <X className=\"h-4 w-4 mr-1\" />\n                        Reject\n                      </Button>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderDatabaseManagementSection = () => {\n    const [isClearing, setIsClearing] = useState(false);\n    const [isRefreshing, setIsRefreshing] = useState(false);\n\n    const clearAllMilestonesMutation = useMutation({\n      mutationFn: () => apiRequest(\"POST\", \"/api/admin/milestones/clear-all\"),\n      onSuccess: (data: any) => {\n        toast({\n          title: \"Success\",\n          description: `All user milestones cleared successfully. Deleted ${data.deletedCount} milestones.`,\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/milestones\"] });\n        setIsClearing(false);\n      },\n      onError: (error) => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to clear milestones. Please try again.\",\n          variant: \"destructive\",\n        });\n        setIsClearing(false);\n      },\n    });\n\n    const refreshAllMilestonesMutation = useMutation({\n      mutationFn: () => apiRequest(\"POST\", \"/api/admin/milestones/refresh-all\"),\n      onSuccess: (data: any) => {\n        toast({\n          title: \"Success\",\n          description: `Milestone refresh completed for all users. ${data.results.length} users processed.`,\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/milestones\"] });\n        setIsRefreshing(false);\n      },\n      onError: (error) => {\n        toast({\n          title: \"Error\",\n          description: \"Failed to refresh milestones. Please try again.\",\n          variant: \"destructive\",\n        });\n        setIsRefreshing(false);\n      },\n    });\n\n    return (\n      <Card className=\"w-full max-w-4xl bg-white\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <div className=\"flex items-center gap-2\">\n            <Database className=\"h-5 w-5 text-orange-500\" />\n            <CardTitle className=\"text-lg font-semibold\">Database Management</CardTitle>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            data-testid=\"button-close-database-management\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Milestone Management */}\n          <div>\n            <h3 className=\"text-md font-semibold mb-4 flex items-center gap-2\">\n              <Activity className=\"h-4 w-4 text-blue-500\" />\n              Milestone Management\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {/* Clear All Milestones */}\n              <div className=\"p-4 border rounded-lg\">\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div>\n                    <h4 className=\"font-medium text-red-600\">Clear All Milestones</h4>\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      Remove all milestone data for all users. This cannot be undone.\n                    </p>\n                  </div>\n                </div>\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setIsClearing(true);\n                    clearAllMilestonesMutation.mutate();\n                  }}\n                  disabled={clearAllMilestonesMutation.isPending || isClearing}\n                  data-testid=\"button-clear-all-milestones\"\n                >\n                  {(clearAllMilestonesMutation.isPending || isClearing) ? (\n                    \"Clearing...\"\n                  ) : (\n                    <>\n                      <Trash2 className=\"h-4 w-4 mr-1\" />\n                      Clear All Milestones\n                    </>\n                  )}\n                </Button>\n              </div>\n\n              {/* Refresh All Milestones */}\n              <div className=\"p-4 border rounded-lg\">\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div>\n                    <h4 className=\"font-medium text-blue-600\">Refresh All Milestones</h4>\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      Recalculate and update milestone progress for all users based on current data.\n                    </p>\n                  </div>\n                </div>\n                <Button\n                  variant=\"default\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setIsRefreshing(true);\n                    refreshAllMilestonesMutation.mutate();\n                  }}\n                  disabled={refreshAllMilestonesMutation.isPending || isRefreshing}\n                  data-testid=\"button-refresh-all-milestones\"\n                >\n                  {(refreshAllMilestonesMutation.isPending || isRefreshing) ? (\n                    \"Refreshing...\"\n                  ) : (\n                    <>\n                      <ArchiveRestore className=\"h-4 w-4 mr-1\" />\n                      Refresh All Milestones\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Cache Management */}\n          <div>\n            <h3 className=\"text-md font-semibold mb-4 flex items-center gap-2\">\n              <Monitor className=\"h-4 w-4 text-green-500\" />\n              Cache Management\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {/* Clear Frontend Cache */}\n              <div className=\"p-4 border rounded-lg\">\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div>\n                    <h4 className=\"font-medium text-green-600\">Clear Frontend Cache</h4>\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      Clear all cached data in the browser. Forces fresh data fetch.\n                    </p>\n                  </div>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    // Clear React Query cache\n                    queryClient.clear();\n                    toast({\n                      title: \"Success\",\n                      description: \"Frontend cache cleared successfully. All data will be fetched fresh.\",\n                    });\n                  }}\n                  data-testid=\"button-clear-frontend-cache\"\n                >\n                  <Settings className=\"h-4 w-4 mr-1\" />\n                  Clear Frontend Cache\n                </Button>\n              </div>\n\n              {/* Reset Client Cache & Reload */}\n              <div className=\"p-4 border rounded-lg\">\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div>\n                    <h4 className=\"font-medium text-blue-600\">Reset & Force Reload</h4>\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      Clear cache and immediately refetch milestone data to resolve duplicates.\n                    </p>\n                  </div>\n                </div>\n                <Button\n                  variant=\"default\"\n                  size=\"sm\"\n                  onClick={() => {\n                    // Clear cache and refetch milestone data\n                    queryClient.removeQueries({ queryKey: ['/api/milestones'] });\n                    queryClient.removeQueries({ queryKey: ['/api/milestones/stats'] });\n                    queryClient.invalidateQueries({ queryKey: ['/api/milestones'] });\n                    queryClient.invalidateQueries({ queryKey: ['/api/milestones/stats'] });\n                    toast({\n                      title: \"Success\",\n                      description: \"Client cache reset complete. Milestone data refreshed.\",\n                    });\n                  }}\n                  data-testid=\"button-reset-client-cache\"\n                >\n                  <Globe className=\"h-4 w-4 mr-1\" />\n                  Reset & Force Reload\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"text-xs text-gray-500 bg-yellow-50 p-3 rounded-lg border-l-4 border-yellow-400\">\n            <AlertTriangle className=\"h-4 w-4 inline mr-1\" />\n            <strong>Warning:</strong> Use these tools carefully. Clear all milestones will permanently delete milestone data. \n            Always ensure users refresh their browsers after clearing cache.\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const sections: Record<string, () => JSX.Element> = {\n    'user-approvals': renderUserApprovalSection,\n    'bulk-operations': renderBulkOperationsSection,\n    'suspended-accounts': renderSuspendedAccountsSection,\n    'system-analytics': renderSystemAnalyticsSection,\n    'backup-restore': renderBackupRestoreSection,\n    'system-monitor': renderSystemMonitorSection,\n    'database-management': renderDatabaseManagementSection,\n  };\n\n  const renderSection = sections[section];\n  if (!renderSection) return null;\n\n  const handleApprovalAction = () => {\n    if (!selectedPendingUser) return;\n    \n    if (approvalAction === 'approve') {\n      approveUserMutation.mutate(selectedPendingUser.id);\n    } else {\n      rejectUserMutation.mutate(selectedPendingUser.id);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      {renderSection()}\n      \n      <ConfirmDialog\n        isOpen={showApprovalDialog}\n        onClose={() => {\n          setShowApprovalDialog(false);\n          setSelectedPendingUser(null);\n        }}\n        onConfirm={handleApprovalAction}\n        title={approvalAction === 'approve' ? 'Approve User' : 'Reject User'}\n        description={\n          approvalAction === 'approve'\n            ? `Are you sure you want to approve ${getUserDisplayInfo(selectedPendingUser).displayName}? They will gain access to the system.`\n            : `Are you sure you want to reject ${getUserDisplayInfo(selectedPendingUser).displayName}? They will not be able to access the system.`\n        }\n        confirmText={approvalAction === 'approve' ? 'Approve User' : 'Reject User'}\n        cancelText=\"Cancel\"\n        variant={approvalAction === 'approve' ? 'default' : 'destructive'}\n        isLoading={approveUserMutation.isPending || rejectUserMutation.isPending}\n      />\n    </div>\n  );\n}","size_bytes":35989},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { User, Edit3, Save, X, Camera, Upload } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { getUserDisplayInfo } from \"@/lib/userDisplayUtils\";\n\nexport default function Profile() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    mobile: \"\",\n    serviceNumber: \"\",\n    profileImageUrl: \"\"\n  });\n\n  // Initialize form data when user data is available\n  useEffect(() => {\n    if (user) {\n      setFormData({\n        firstName: (user as any)?.firstName || \"\",\n        lastName: (user as any)?.lastName || \"\",\n        email: (user as any)?.email || \"\",\n        mobile: (user as any)?.mobile || \"\",\n        serviceNumber: (user as any)?.serviceNumber || \"\",\n        profileImageUrl: (user as any)?.profileImageUrl || \"\"\n      });\n    }\n  }, [user]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"PATCH\", \"/api/profile\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      setIsEditing(false);\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGetUploadParameters = async () => {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/objects/upload\");\n      const data = await response.json();\n      const uploadURL = data.uploadURL;\n      if (!uploadURL) {\n        throw new Error('No upload URL received from server');\n      }\n      return {\n        method: 'PUT' as const,\n        url: uploadURL,\n      };\n    } catch (error) {\n      console.error('Failed to get upload parameters:', error);\n      throw error;\n    }\n  };\n\n  const handleUploadComplete = async (result: any) => {\n    if (result.successful && result.successful[0]) {\n      const uploadURL = result.successful[0].uploadURL;\n      try {\n        const updateResponse = await apiRequest(\"PUT\", \"/api/profile/image\", {\n          profileImageURL: uploadURL,\n        });\n        const updateData = await updateResponse.json();\n        queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n        toast({\n          title: \"Profile picture updated\",\n          description: \"Your profile picture has been successfully updated.\",\n        });\n      } catch (error: any) {\n        console.error('Profile update failed:', error);\n        toast({\n          title: \"Upload failed\", \n          description: error.message || \"Failed to update profile picture\",\n          variant: \"destructive\",\n        });\n      }\n    } else {\n      toast({\n        title: \"Upload failed\",\n        description: \"No successful upload result received\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSave = () => {\n    updateProfileMutation.mutate(formData);\n  };\n\n  const handleCancel = () => {\n    // Reset form data to original values\n    if (user) {\n      setFormData({\n        firstName: (user as any)?.firstName || \"\",\n        lastName: (user as any)?.lastName || \"\",\n        email: (user as any)?.email || \"\",\n        mobile: (user as any)?.mobile || \"\",\n        serviceNumber: (user as any)?.serviceNumber || \"\",\n        profileImageUrl: (user as any)?.profileImageUrl || \"\"\n      });\n    }\n    setIsEditing(false);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"p-4 lg:p-6\">\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <p className=\"text-muted-foreground\">\n              Please log in to view your profile.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 lg:p-6\">\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">My Profile</h1>\n          <p className=\"text-muted-foreground\">Manage your account information and preferences</p>\n        </div>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Profile Information\n            </CardTitle>\n            <div className=\"flex gap-2\">\n              {isEditing ? (\n                <>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleCancel}\n                    disabled={updateProfileMutation.isPending}\n                    data-testid=\"button-cancel-edit\"\n                  >\n                    <X className=\"h-4 w-4 mr-2\" />\n                    Cancel\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    onClick={handleSave}\n                    disabled={updateProfileMutation.isPending}\n                    data-testid=\"button-save-profile\"\n                  >\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    {updateProfileMutation.isPending ? \"Saving...\" : \"Save\"}\n                  </Button>\n                </>\n              ) : (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setIsEditing(true)}\n                  data-testid=\"button-edit-profile\"\n                >\n                  <Edit3 className=\"h-4 w-4 mr-2\" />\n                  Edit Profile\n                </Button>\n              )}\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Profile Picture */}\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                {(user as any)?.profileImageUrl ? (\n                  <div className=\"w-20 h-20 rounded-full overflow-hidden border-4 border-background shadow-lg\">\n                    <img \n                      src={(user as any).profileImageUrl} \n                      alt=\"Profile\"\n                      className=\"w-full h-full object-cover\"\n                      data-testid=\"img-profile-picture\"\n                    />\n                  </div>\n                ) : (\n                  <div className=\"w-20 h-20 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-2xl font-bold border-4 border-background shadow-lg\">\n                    {getUserDisplayInfo(user as any).initials}\n                  </div>\n                )}\n                \n                {/* Upload Button */}\n                <div className=\"absolute -bottom-1 -right-1\">\n                  <ObjectUploader\n                    maxNumberOfFiles={1}\n                    maxFileSize={5242880} // 5MB\n                    onGetUploadParameters={handleGetUploadParameters}\n                    onComplete={handleUploadComplete}\n                    buttonClassName=\"h-8 w-8 rounded-full p-0 shadow-lg bg-primary hover:bg-primary/90\"\n                  >\n                    <Camera className=\"h-4 w-4 text-primary-foreground\" />\n                  </ObjectUploader>\n                </div>\n              </div>\n              \n              <div>\n                <p className=\"text-lg font-semibold\" data-testid=\"text-profile-name\">\n                  {getUserDisplayInfo(user as any).displayName}\n                </p>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"text-profile-role\">\n                  {(user as any)?.role?.charAt(0).toUpperCase() + (user as any)?.role?.slice(1)}\n                </p>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Click the camera icon to upload a profile picture\n                </p>\n              </div>\n            </div>\n\n            {/* Profile Form */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\">First Name</Label>\n                <Input\n                  id=\"firstName\"\n                  value={formData.firstName}\n                  onChange={(e) => handleInputChange('firstName', e.target.value)}\n                  disabled={!isEditing}\n                  data-testid=\"input-first-name\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\">Last Name</Label>\n                <Input\n                  id=\"lastName\"\n                  value={formData.lastName}\n                  onChange={(e) => handleInputChange('lastName', e.target.value)}\n                  disabled={!isEditing}\n                  data-testid=\"input-last-name\"\n                />\n              </div>\n\n              <div className=\"space-y-2 md:col-span-2\">\n                <Label htmlFor=\"email\">Email Address</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => handleInputChange('email', e.target.value)}\n                  disabled={!isEditing}\n                  data-testid=\"input-email\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"mobile\">Mobile Number</Label>\n                <Input\n                  id=\"mobile\"\n                  value={formData.mobile}\n                  onChange={(e) => handleInputChange('mobile', e.target.value)}\n                  disabled={!isEditing}\n                  placeholder=\"+960 XXX-XXXX\"\n                  data-testid=\"input-mobile\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"serviceNumber\">Service Number</Label>\n                <Input\n                  id=\"serviceNumber\"\n                  value={formData.serviceNumber}\n                  onChange={(e) => handleInputChange('serviceNumber', e.target.value)}\n                  disabled={!isEditing}\n                  data-testid=\"input-service-number\"\n                />\n              </div>\n            </div>\n\n            {/* Account Information */}\n            <div className=\"border-t pt-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Account Information</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>User ID</Label>\n                  <div className=\"p-2 bg-muted rounded text-sm\" data-testid=\"text-user-id\">\n                    {(user as any)?.id}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Account Status</Label>\n                  <div className=\"p-2 bg-muted rounded text-sm\" data-testid=\"text-account-status\">\n                    {(user as any)?.isActive ? (\n                      <span className=\"text-green-600\">Active</span>\n                    ) : (\n                      <span className=\"text-red-600\">Suspended</span>\n                    )}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Member Since</Label>\n                  <div className=\"p-2 bg-muted rounded text-sm\" data-testid=\"text-member-since\">\n                    {(user as any)?.createdAt ? \n                      new Date((user as any).createdAt).toLocaleDateString() : \n                      \"Unknown\"\n                    }\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Last Updated</Label>\n                  <div className=\"p-2 bg-muted rounded text-sm\" data-testid=\"text-last-updated\">\n                    {(user as any)?.updatedAt ? \n                      new Date((user as any).updatedAt).toLocaleDateString() : \n                      \"Never\"\n                    }\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13067},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}","size_bytes":5543},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl.js\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err: any) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":8415},"client/src/components/WalkieTalkie.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Mic, MicOff, Radio, Users, Volume2 } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface WalkieTalkieProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface ConnectedUser {\n  userId: string;\n  userName: string;\n}\n\nexport function WalkieTalkie({ isOpen, onClose }: WalkieTalkieProps) {\n  const { user } = useAuth();\n  const [isConnected, setIsConnected] = useState(false);\n  const [isTalking, setIsTalking] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [connectedUsers, setConnectedUsers] = useState<ConnectedUser[]>([]);\n  const [currentSpeaker, setCurrentSpeaker] = useState<string | null>(null);\n  \n  const wsRef = useRef<WebSocket | null>(null);\n  const mediaStreamRef = useRef<MediaStream | null>(null);\n  const peerConnectionsRef = useRef<Map<string, RTCPeerConnection>>(new Map());\n  const clientIdRef = useRef<string>(`client_${Date.now()}_${Math.random()}`);\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const audioElementsRef = useRef<Map<string, HTMLAudioElement>>(new Map());\n  \n  // Initialize WebSocket connection\n  useEffect(() => {\n    if (!isOpen || !user) return;\n    \n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/walkie-talkie`;\n    \n    const ws = new WebSocket(wsUrl);\n    wsRef.current = ws;\n    \n    ws.onopen = () => {\n      console.log('Connected to walkie talkie');\n      setIsConnected(true);\n      \n      // Join the walkie talkie channel\n      ws.send(JSON.stringify({\n        type: 'join',\n        clientId: clientIdRef.current,\n        userId: (user as any).id,\n        userName: `${(user as any).firstName} ${(user as any).lastName}`\n      }));\n    };\n    \n    ws.onmessage = async (event) => {\n      const data = JSON.parse(event.data);\n      \n      switch (data.type) {\n        case 'users-list':\n          setConnectedUsers(data.users);\n          break;\n          \n        case 'user-joined':\n          setConnectedUsers(prev => [...prev.filter(u => u.userId !== data.userId), {\n            userId: data.userId,\n            userName: data.userName\n          }]);\n          break;\n          \n        case 'user-left':\n          setConnectedUsers(prev => prev.filter(u => u.userId !== data.userId));\n          // Clean up peer connection\n          const pc = peerConnectionsRef.current.get(data.userId);\n          if (pc) {\n            pc.close();\n            peerConnectionsRef.current.delete(data.userId);\n          }\n          break;\n          \n        case 'audio-start':\n          setCurrentSpeaker(data.userName);\n          break;\n          \n        case 'audio-end':\n          setCurrentSpeaker(null);\n          break;\n          \n        case 'signal':\n          await handleSignalingMessage(data);\n          break;\n      }\n    };\n    \n    ws.onclose = () => {\n      setIsConnected(false);\n      setCurrentSpeaker(null);\n    };\n    \n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setIsConnected(false);\n    };\n    \n    return () => {\n      ws.close();\n      cleanupMedia();\n    };\n  }, [isOpen, user]);\n  \n  const cleanupMedia = () => {\n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => track.stop());\n      mediaStreamRef.current = null;\n    }\n    \n    peerConnectionsRef.current.forEach(pc => pc.close());\n    peerConnectionsRef.current.clear();\n    \n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n      audioContextRef.current = null;\n    }\n    \n    audioElementsRef.current.forEach(audio => {\n      audio.pause();\n      audio.srcObject = null;\n    });\n    audioElementsRef.current.clear();\n  };\n  \n  const createPeerConnection = (userId: string): RTCPeerConnection => {\n    const pc = new RTCPeerConnection({\n      iceServers: [\n        { urls: 'stun:stun.l.google.com:19302' },\n        { urls: 'stun:stun1.l.google.com:19302' }\n      ]\n    });\n    \n    pc.onicecandidate = (event) => {\n      if (event.candidate && wsRef.current) {\n        wsRef.current.send(JSON.stringify({\n          type: 'signal',\n          from: clientIdRef.current,\n          to: userId,\n          signal: {\n            type: 'ice-candidate',\n            candidate: event.candidate\n          }\n        }));\n      }\n    };\n    \n    pc.ontrack = (event) => {\n      console.log('Received remote stream from:', userId);\n      const audio = new Audio();\n      audio.srcObject = event.streams[0];\n      audio.play().catch(console.error);\n      audioElementsRef.current.set(userId, audio);\n    };\n    \n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => {\n        pc.addTrack(track, mediaStreamRef.current!);\n      });\n    }\n    \n    peerConnectionsRef.current.set(userId, pc);\n    return pc;\n  };\n  \n  const handleSignalingMessage = async (data: any) => {\n    const { from, signal } = data;\n    \n    let pc = peerConnectionsRef.current.get(from);\n    if (!pc) {\n      pc = createPeerConnection(from);\n    }\n    \n    switch (signal.type) {\n      case 'offer':\n        await pc.setRemoteDescription(signal.offer);\n        const answer = await pc.createAnswer();\n        await pc.setLocalDescription(answer);\n        \n        if (wsRef.current) {\n          wsRef.current.send(JSON.stringify({\n            type: 'signal',\n            from: clientIdRef.current,\n            to: from,\n            signal: {\n              type: 'answer',\n              answer: answer\n            }\n          }));\n        }\n        break;\n        \n      case 'answer':\n        await pc.setRemoteDescription(signal.answer);\n        break;\n        \n      case 'ice-candidate':\n        await pc.addIceCandidate(signal.candidate);\n        break;\n    }\n  };\n  \n  const startTalking = async () => {\n    try {\n      if (!mediaStreamRef.current) {\n        const stream = await navigator.mediaDevices.getUserMedia({ \n          audio: {\n            echoCancellation: true,\n            noiseSuppression: true,\n            autoGainControl: true\n          }\n        });\n        mediaStreamRef.current = stream;\n      }\n      \n      setIsTalking(true);\n      setIsListening(false);\n      \n      // Create peer connections for all connected users\n      for (const user of connectedUsers) {\n        if (user.userId !== (user as any).id) {\n          let pc = peerConnectionsRef.current.get(user.userId);\n          if (!pc) {\n            pc = createPeerConnection(user.userId);\n          }\n          \n          // Add audio track if not already added\n          const tracks = pc.getSenders().map(sender => sender.track);\n          const audioTrack = mediaStreamRef.current.getAudioTracks()[0];\n          if (!tracks.includes(audioTrack)) {\n            pc.addTrack(audioTrack, mediaStreamRef.current);\n          }\n          \n          // Create offer\n          const offer = await pc.createOffer();\n          await pc.setLocalDescription(offer);\n          \n          if (wsRef.current) {\n            wsRef.current.send(JSON.stringify({\n              type: 'signal',\n              from: clientIdRef.current,\n              to: user.userId,\n              signal: {\n                type: 'offer',\n                offer: offer\n              }\n            }));\n          }\n        }\n      }\n      \n      // Notify others that we're speaking\n      if (wsRef.current) {\n        wsRef.current.send(JSON.stringify({\n          type: 'audio-start',\n          clientId: clientIdRef.current,\n          userId: (user as any).id,\n          userName: `${(user as any).firstName} ${(user as any).lastName}`\n        }));\n      }\n      \n    } catch (error) {\n      console.error('Error starting to talk:', error);\n      alert('Could not access microphone. Please check permissions.');\n    }\n  };\n  \n  const stopTalking = () => {\n    setIsTalking(false);\n    setIsListening(true);\n    \n    // Notify others that we stopped speaking\n    if (wsRef.current) {\n      wsRef.current.send(JSON.stringify({\n        type: 'audio-end',\n        clientId: clientIdRef.current,\n        userId: (user as any).id\n      }));\n    }\n  };\n  \n  // Handle mouse/touch events for push-to-talk\n  const handleMouseDown = () => {\n    if (!isTalking && isConnected) {\n      startTalking();\n    }\n  };\n  \n  const handleMouseUp = () => {\n    if (isTalking) {\n      stopTalking();\n    }\n  };\n  \n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\" data-testid=\"walkie-talkie-overlay\">\n      <Card className=\"w-96 max-w-[90vw]\">\n        <CardContent className=\"p-6\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Radio className=\"w-5 h-5\" />\n              <h3 className=\"font-semibold\">Walkie Talkie</h3>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className={`w-3 h-3 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`} />\n              <span className=\"text-sm text-muted-foreground\">\n                {isConnected ? 'Connected' : 'Disconnected'}\n              </span>\n            </div>\n          </div>\n          \n          {/* Connected Users */}\n          <div className=\"mb-4\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Users className=\"w-4 h-4\" />\n              <span className=\"text-sm font-medium\">Connected ({connectedUsers.length})</span>\n            </div>\n            <div className=\"space-y-1 max-h-24 overflow-y-auto\">\n              {connectedUsers.map(connectedUser => (\n                <div key={connectedUser.userId} className=\"flex items-center space-x-2 text-sm\">\n                  <div className={`w-2 h-2 rounded-full ${\n                    currentSpeaker === connectedUser.userName ? 'bg-green-500 animate-pulse' : 'bg-gray-400'\n                  }`} />\n                  <span className={currentSpeaker === connectedUser.userName ? 'text-green-600 font-medium' : ''}>\n                    {connectedUser.userName}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          {/* Current Speaker */}\n          {currentSpeaker && (\n            <div className=\"mb-4 p-2 bg-green-50 rounded-lg border border-green-200\">\n              <div className=\"flex items-center space-x-2 text-green-700\">\n                <Volume2 className=\"w-4 h-4\" />\n                <span className=\"text-sm font-medium\">{currentSpeaker} is speaking</span>\n              </div>\n            </div>\n          )}\n          \n          {/* Push to Talk Button */}\n          <div className=\"text-center mb-4\">\n            <Button\n              className={`w-32 h-32 rounded-full text-lg font-semibold transition-all ${\n                isTalking \n                  ? 'bg-red-500 hover:bg-red-600 text-white scale-110' \n                  : 'bg-primary hover:bg-primary/90'\n              }`}\n              onMouseDown={handleMouseDown}\n              onMouseUp={handleMouseUp}\n              onTouchStart={handleMouseDown}\n              onTouchEnd={handleMouseUp}\n              disabled={!isConnected}\n              data-testid=\"push-to-talk-button\"\n            >\n              {isTalking ? <MicOff className=\"w-8 h-8\" /> : <Mic className=\"w-8 h-8\" />}\n            </Button>\n            <p className=\"mt-2 text-sm text-muted-foreground\">\n              {isTalking ? 'Release to stop' : 'Hold to talk'}\n            </p>\n          </div>\n          \n          {/* Status */}\n          <div className=\"text-center mb-4\">\n            {!isConnected && (\n              <p className=\"text-sm text-red-600\">Connecting...</p>\n            )}\n            {isConnected && connectedUsers.length === 0 && (\n              <p className=\"text-sm text-muted-foreground\">No other users connected</p>\n            )}\n          </div>\n          \n          {/* Close Button */}\n          <div className=\"flex justify-center\">\n            <Button variant=\"outline\" onClick={onClose} data-testid=\"button-close-walkie-talkie\">\n              Close\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12356},"client/src/components/Chat.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { MessageCircle, Send, Mic, MicOff, Play, Clock, Upload, Edit3, Check, X, Trash2, UserX } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface ChatProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onMarkAllRead?: (lastMessageId?: string) => void;\n}\n\ninterface ChatMessage {\n  id: string;\n  userId: string;\n  userName: string;\n  message?: string;\n  audioUrl?: string;\n  isAudio: boolean;\n  timestamp: Date;\n  isUploading?: boolean;\n}\n\ninterface ConnectedUser {\n  userId: string;\n  userName: string;\n}\n\nexport function Chat({ isOpen, onClose, onMarkAllRead }: ChatProps) {\n  const { user } = useAuth();\n\n  // Helper function to get proper user name\n  const getUserName = (userObj: any) => {\n    if (!userObj) return \"Unknown User\";\n    const firstName = userObj.firstName?.trim() || \"\";\n    const lastName = userObj.lastName?.trim() || \"\";\n    if (firstName && lastName) {\n      return `${firstName} ${lastName}`;\n    }\n    return firstName || lastName || userObj.email?.split('@')[0] || \"Unknown User\";\n  };\n\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [connectedUsers, setConnectedUsers] = useState<ConnectedUser[]>([]);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isUploading, setIsUploading] = useState(false);\n  \n  // Username selection states\n  const [chatUsername, setChatUsername] = useState(\"\");\n  const [isEditingUsername, setIsEditingUsername] = useState(false);\n  const [tempUsername, setTempUsername] = useState(\"\");\n  \n  const wsRef = useRef<WebSocket | null>(null);\n  const mediaStreamRef = useRef<MediaStream | null>(null);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const recordedChunksRef = useRef<Blob[]>([]);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const clientIdRef = useRef<string>(`client_${Date.now()}_${Math.random()}`);\n\n  // Scroll to bottom when new messages arrive\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n\n  // Load saved username from localStorage\n  useEffect(() => {\n    if (!user) return;\n    \n    const savedUsername = localStorage.getItem(`chat_username_${(user as any).id}`);\n    if (savedUsername) {\n      setChatUsername(savedUsername);\n    } else {\n      // Default to real name\n      setChatUsername(getUserName(user));\n    }\n  }, [user]);\n\n  // Initialize WebSocket connection\n  useEffect(() => {\n    if (!isOpen || !user) return;\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/chat`;\n    \n    wsRef.current = new WebSocket(wsUrl);\n    \n    wsRef.current.onopen = () => {\n      setIsConnected(true);\n      \n      // Join the chat\n      wsRef.current?.send(JSON.stringify({\n        type: 'join',\n        clientId: clientIdRef.current,\n        userId: (user as any).id,\n        userName: chatUsername || getUserName(user)\n      }));\n    };\n    \n    wsRef.current.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      handleWebSocketMessage(data);\n    };\n    \n    wsRef.current.onclose = () => {\n      setIsConnected(false);\n      setConnectedUsers([]);\n    };\n    \n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n      if (mediaStreamRef.current) {\n        mediaStreamRef.current.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, [isOpen, user]);\n\n  const handleWebSocketMessage = (data: any) => {\n    switch (data.type) {\n      case 'user-list':\n        setConnectedUsers(data.users || []);\n        break;\n      case 'text-message':\n        setMessages(prev => {\n          const newMessages = [...prev, {\n            id: data.messageId,\n            userId: data.userId,\n            userName: data.userName,\n            message: data.message,\n            isAudio: false,\n            timestamp: new Date(data.timestamp)\n          }];\n          \n          // Mark all messages as read when chat is open and viewing messages\n          if (isOpen && onMarkAllRead) {\n            onMarkAllRead(data.messageId);\n          }\n          \n          return newMessages;\n        });\n        break;\n      case 'audio-message':\n        setMessages(prev => {\n          const newMessages = [...prev, {\n            id: data.messageId,\n            userId: data.userId,\n            userName: data.userName,\n            audioUrl: data.audioUrl,\n            isAudio: true,\n            timestamp: new Date(data.timestamp)\n          }];\n          \n          // Mark all messages as read when chat is open and viewing messages\n          if (isOpen && onMarkAllRead) {\n            onMarkAllRead(data.messageId);\n          }\n          \n          return newMessages;\n        });\n        break;\n    }\n  };\n\n  const sendTextMessage = () => {\n    if (!newMessage.trim() || !wsRef.current || !isConnected) return;\n    \n    const messageId = `${(user as any).id}_${Date.now()}`;\n    \n    wsRef.current.send(JSON.stringify({\n      type: 'text-message',\n      messageId,\n      clientId: clientIdRef.current,\n      userId: (user as any).id,\n      userName: chatUsername || getUserName(user),\n      message: newMessage.trim(),\n      timestamp: new Date().toISOString()\n    }));\n    \n    setNewMessage(\"\");\n  };\n\n  const startAudioRecording = async () => {\n    if (isRecording || isUploading) return;\n    \n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      });\n      mediaStreamRef.current = stream;\n      \n      setIsRecording(true);\n      recordedChunksRef.current = [];\n      \n      if (MediaRecorder.isTypeSupported('audio/webm')) {\n        mediaRecorderRef.current = new MediaRecorder(stream, {\n          mimeType: 'audio/webm'\n        });\n      } else {\n        mediaRecorderRef.current = new MediaRecorder(stream);\n      }\n      \n      mediaRecorderRef.current.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          recordedChunksRef.current.push(event.data);\n        }\n      };\n      \n      mediaRecorderRef.current.start();\n    } catch (error) {\n      console.error('Could not access microphone:', error);\n      alert('Could not access microphone. Please check permissions.');\n    }\n  };\n\n  const stopAudioRecording = async () => {\n    if (!isRecording || !mediaRecorderRef.current) return;\n    \n    setIsRecording(false);\n    setIsUploading(true);\n    \n    mediaRecorderRef.current.addEventListener('stop', async () => {\n      await handleAudioUpload();\n    }, { once: true });\n    \n    mediaRecorderRef.current.stop();\n    \n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => track.stop());\n    }\n  };\n\n  const handleAudioUpload = async () => {\n    if (recordedChunksRef.current.length === 0) {\n      setIsUploading(false);\n      return;\n    }\n    \n    try {\n      // Create audio blob\n      const audioBlob = new Blob(recordedChunksRef.current, { \n        type: mediaRecorderRef.current?.mimeType || 'audio/webm' \n      });\n      \n      // Get upload URL\n      const uploadResponse = await apiRequest(\"POST\", \"/api/chat/upload\");\n      const uploadData = await uploadResponse.json();\n      \n      // Upload audio file\n      const uploadResult = await fetch(uploadData.uploadURL, {\n        method: 'PUT',\n        body: audioBlob,\n        headers: {\n          'Content-Type': audioBlob.type,\n        },\n      });\n\n      if (uploadResult.ok) {\n        // Update server with audio metadata\n        const metadataResponse = await apiRequest(\"PUT\", \"/api/chat/audio\", {\n          audioURL: uploadData.uploadURL,\n          userId: (user as any).id,\n          userName: chatUsername || getUserName(user)\n        });\n        \n        const metadata = await metadataResponse.json();\n        \n        // Send audio message via WebSocket\n        const messageId = `${(user as any).id}_${Date.now()}`;\n        wsRef.current?.send(JSON.stringify({\n          type: 'audio-message',\n          messageId,\n          clientId: clientIdRef.current,\n          userId: (user as any).id,\n          userName: chatUsername || getUserName(user),\n          audioUrl: metadata.audioPath,\n          timestamp: new Date().toISOString()\n        }));\n      }\n    } catch (error) {\n      console.error('Failed to upload audio:', error);\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const playAudio = (audioUrl: string) => {\n    const audio = new Audio(audioUrl);\n    audio.play().catch(console.error);\n  };\n\n  // Username management functions\n  const saveUsername = (newUsername: string) => {\n    if (!user || !newUsername.trim()) return;\n    \n    const trimmedUsername = newUsername.trim();\n    setChatUsername(trimmedUsername);\n    localStorage.setItem(`chat_username_${(user as any).id}`, trimmedUsername);\n    \n    // If connected, rejoin with new username\n    if (wsRef.current && isConnected) {\n      wsRef.current.send(JSON.stringify({\n        type: 'join',\n        clientId: clientIdRef.current,\n        userId: (user as any).id,\n        userName: trimmedUsername\n      }));\n    }\n  };\n\n  const startEditingUsername = () => {\n    setTempUsername(chatUsername);\n    setIsEditingUsername(true);\n  };\n\n  const cancelEditingUsername = () => {\n    setTempUsername(\"\");\n    setIsEditingUsername(false);\n  };\n\n  const confirmUsernameEdit = () => {\n    if (tempUsername.trim()) {\n      saveUsername(tempUsername);\n    }\n    setIsEditingUsername(false);\n    setTempUsername(\"\");\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString('en-US', { \n      hour12: false, \n      hour: '2-digit', \n      minute: '2-digit'\n    });\n  };\n\n  // Admin functions for deleting messages\n  const isAdmin = (user as any)?.role === 'admin';\n\n  const deleteMessage = async (messageId: string) => {\n    try {\n      await apiRequest(\"DELETE\", `/api/chat/messages/${messageId}`);\n      // Remove message from local state\n      setMessages(prev => prev.filter(msg => msg.id !== messageId));\n    } catch (error) {\n      console.error('Error deleting message:', error);\n      alert('Failed to delete message');\n    }\n  };\n\n  const deleteAllMessagesFromUser = async (userId: string, userName: string) => {\n    if (!confirm(`Are you sure you want to delete all messages from ${userName}?`)) {\n      return;\n    }\n\n    try {\n      await apiRequest(\"DELETE\", `/api/chat/messages/user/${userId}`);\n      // Remove all messages from this user from local state\n      setMessages(prev => prev.filter(msg => msg.userId !== userId));\n    } catch (error) {\n      console.error('Error deleting user messages:', error);\n      alert('Failed to delete user messages');\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\" data-testid=\"chat-overlay\">\n      <Card className=\"w-[600px] max-w-[95vw] h-[600px] max-h-[90vh] flex flex-col\">\n        <CardContent className=\"p-6 flex-1 flex flex-col min-h-0\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-2\">\n              <MessageCircle className=\"w-5 h-5\" />\n              <h2 className=\"text-lg font-semibold\">Team Chat</h2>\n              <span className={`text-xs px-2 py-1 rounded ${\n                isConnected ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n              }`}>\n                {isConnected ? `Connected (${connectedUsers.length})` : 'Connecting...'}\n              </span>\n            </div>\n          </div>\n\n          {/* Username Section */}\n          <div className=\"mb-4 p-3 bg-muted/20 rounded-lg\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-muted-foreground\">Your username:</span>\n                {isEditingUsername ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <Input\n                      value={tempUsername}\n                      onChange={(e) => setTempUsername(e.target.value)}\n                      onKeyPress={(e) => e.key === 'Enter' && confirmUsernameEdit()}\n                      placeholder=\"Enter username\"\n                      className=\"h-8 text-sm\"\n                      maxLength={30}\n                      data-testid=\"input-username\"\n                    />\n                    <Button\n                      size=\"sm\"\n                      onClick={confirmUsernameEdit}\n                      disabled={!tempUsername.trim()}\n                      className=\"h-8 w-8 p-0\"\n                      data-testid=\"button-confirm-username\"\n                    >\n                      <Check className=\"w-3 h-3\" />\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={cancelEditingUsername}\n                      className=\"h-8 w-8 p-0\"\n                      data-testid=\"button-cancel-username\"\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                ) : (\n                  <>\n                    <span className=\"font-medium text-sm\" data-testid=\"text-current-username\">\n                      {chatUsername || getUserName(user)}\n                    </span>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={startEditingUsername}\n                      className=\"h-6 w-6 p-0\"\n                      title=\"Edit username\"\n                      data-testid=\"button-edit-username\"\n                    >\n                      <Edit3 className=\"w-3 h-3\" />\n                    </Button>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Messages */}\n          <div className=\"flex-1 border rounded-lg p-4 bg-muted/10 overflow-y-auto min-h-0 space-y-3\">\n            {messages.length === 0 ? (\n              <p className=\"text-sm text-muted-foreground text-center py-8\">\n                No messages yet. Start the conversation!\n              </p>\n            ) : (\n              messages.map((msg) => (\n                <div key={msg.id} className=\"flex flex-col space-y-1 group\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm font-medium\">{msg.userName}</span>\n                    <div className=\"flex items-center space-x-1 text-xs text-muted-foreground\">\n                      <Clock className=\"w-3 h-3\" />\n                      <span>{formatTime(msg.timestamp)}</span>\n                    </div>\n                    {/* Admin controls */}\n                    {isAdmin && (\n                      <div className=\"flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"h-6 w-6 p-0 text-red-500 hover:text-red-700\"\n                          onClick={() => deleteMessage(msg.id)}\n                          title=\"Delete message\"\n                          data-testid={`button-delete-message-${msg.id}`}\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </Button>\n                        {msg.userId !== (user as any)?.id && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"h-6 w-6 p-0 text-red-500 hover:text-red-700\"\n                            onClick={() => deleteAllMessagesFromUser(msg.userId, msg.userName)}\n                            title={`Delete all messages from ${msg.userName}`}\n                            data-testid={`button-delete-user-messages-${msg.userId}`}\n                          >\n                            <UserX className=\"w-3 h-3\" />\n                          </Button>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                  {msg.isAudio ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm text-muted-foreground\">🎵 Audio message</span>\n                      {msg.isUploading && (\n                        <Upload className=\"w-3 h-3 text-blue-500 animate-spin\" />\n                      )}\n                      {msg.audioUrl && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"h-6 w-6 p-0\"\n                          onClick={() => playAudio(msg.audioUrl!)}\n                          title=\"Play audio\"\n                          data-testid={`button-play-audio-${msg.id}`}\n                        >\n                          <Play className=\"w-3 h-3\" />\n                        </Button>\n                      )}\n                    </div>\n                  ) : (\n                    <p className=\"text-sm bg-background rounded-lg px-3 py-2 max-w-fit\" data-testid={`message-text-${msg.id}`}>{msg.message}</p>\n                  )}\n                </div>\n              ))\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* Input */}\n          <div className=\"flex items-center space-x-2 mt-4\">\n            <Input\n              placeholder=\"Type a message...\"\n              value={newMessage}\n              onChange={(e) => setNewMessage(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && sendTextMessage()}\n              disabled={!isConnected}\n              data-testid=\"input-message\"\n            />\n            <Button\n              onClick={sendTextMessage}\n              disabled={!newMessage.trim() || !isConnected}\n              size=\"sm\"\n              data-testid=\"button-send-message\"\n            >\n              <Send className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              onClick={isRecording ? stopAudioRecording : startAudioRecording}\n              disabled={!isConnected || isUploading}\n              size=\"sm\"\n              variant={isRecording ? \"destructive\" : \"default\"}\n              data-testid=\"button-audio-record\"\n              title={isRecording ? \"Stop recording\" : \"Record audio message\"}\n            >\n              {isUploading ? (\n                <Upload className=\"w-4 h-4 animate-spin\" />\n              ) : isRecording ? (\n                <MicOff className=\"w-4 h-4\" />\n              ) : (\n                <Mic className=\"w-4 h-4\" />\n              )}\n            </Button>\n          </div>\n\n          {/* Close Button */}\n          <div className=\"flex justify-center pt-4 border-t\">\n            <Button variant=\"outline\" onClick={onClose} data-testid=\"button-close-chat\">\n              Close\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":19477},"client/src/components/ExportButton.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Download, FileText, FileDown } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ExportButtonProps {\n  dataType: 'events' | 'users' | 'islands' | 'equipment';\n  label: string;\n  className?: string;\n}\n\nexport function ExportButton({ dataType, label, className = \"\" }: ExportButtonProps) {\n  const [isExporting, setIsExporting] = useState(false);\n  const { toast } = useToast();\n\n  const handleExport = async (format: 'csv' | 'json') => {\n    setIsExporting(true);\n    \n    try {\n      const response = await fetch(`/api/export/${dataType}?format=${format}`, {\n        method: 'GET',\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Export failed');\n      }\n\n      // Create download link\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      \n      // Set filename based on response headers or format\n      const contentDisposition = response.headers.get('Content-Disposition');\n      let filename = `${dataType}_export.${format}`;\n      if (contentDisposition) {\n        const filenameMatch = contentDisposition.match(/filename=\"(.+)\"/);\n        if (filenameMatch) {\n          filename = filenameMatch[1];\n        }\n      }\n      \n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n\n      toast({\n        title: \"Export Successful\",\n        description: `${label} exported successfully as ${format.toUpperCase()}`,\n      });\n    } catch (error: any) {\n      console.error('Export error:', error);\n      toast({\n        title: \"Export Failed\",\n        description: error.message || `Failed to export ${label}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"outline\" \n          className={className}\n          disabled={isExporting}\n          data-testid={`button-export-${dataType}`}\n        >\n          <Download className=\"h-4 w-4 mr-2\" />\n          {isExporting ? 'Exporting...' : `Export ${label}`}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem \n          onClick={() => handleExport('csv')}\n          disabled={isExporting}\n          data-testid={`option-export-${dataType}-csv`}\n        >\n          <FileText className=\"h-4 w-4 mr-2\" />\n          Export as CSV\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => handleExport('json')}\n          disabled={isExporting}\n          data-testid={`option-export-${dataType}-json`}\n        >\n          <FileDown className=\"h-4 w-4 mr-2\" />\n          Export as JSON\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":3237},"client/src/components/MapLocationPicker.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, useMapEvents, Marker, Popup, useMap } from 'react-leaflet';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';\nimport { MapPin, Navigation, Target } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\n\n// Fix for default markers in Leaflet with React\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n});\n\ninterface MapLocationPickerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onLocationSelect: (location: { latitude: number; longitude: number; address: string }) => void;\n  initialLocation?: { latitude: number; longitude: number; address: string };\n  title?: string;\n}\n\n// Direct OpenStreetMap tile layer for reliable loading\nfunction DirectTileLayer() {\n  return (\n    <TileLayer\n      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      attribution=\"© OpenStreetMap contributors\"\n      maxZoom={18}\n      minZoom={1}\n      subdomains={['a', 'b', 'c']}\n    />\n  );\n}\n\n// Component to automatically center and zoom map when location changes\nfunction MapController({ center, zoom }: { center: [number, number]; zoom: number }) {\n  const map = useMap();\n  \n  useEffect(() => {\n    map.setView(center, zoom, {\n      animate: true,\n      duration: 1.5\n    });\n  }, [map, center, zoom]);\n  \n  return null;\n}\n\n// Component to handle map clicks and update marker position\nfunction LocationSelector({ onLocationChange, selectedLocation }: {\n  onLocationChange: (lat: number, lng: number) => void;\n  selectedLocation: [number, number] | null;\n}) {\n  useMapEvents({\n    click: (e) => {\n      onLocationChange(e.latlng.lat, e.latlng.lng);\n    },\n  });\n\n  return selectedLocation ? (\n    <Marker position={selectedLocation}>\n      <Popup>\n        <div className=\"p-2\">\n          <strong className=\"text-sm\">Selected Location</strong>\n          <br />\n          <span className=\"text-xs text-gray-600\">\n            {selectedLocation[0].toFixed(6)}, {selectedLocation[1].toFixed(6)}\n          </span>\n        </div>\n      </Popup>\n    </Marker>\n  ) : null;\n}\n\nexport function MapLocationPicker({ \n  isOpen, \n  onClose, \n  onLocationSelect, \n  initialLocation,\n  title = \"Select Location on Map\"\n}: MapLocationPickerProps) {\n  const { toast } = useToast();\n  const [selectedLocation, setSelectedLocation] = useState<[number, number] | null>(\n    initialLocation ? [initialLocation.latitude, initialLocation.longitude] : null\n  );\n  const [address, setAddress] = useState(initialLocation?.address || '');\n  const [isGettingLocation, setIsGettingLocation] = useState(false);\n  const [locationAccuracy, setLocationAccuracy] = useState<number | null>(null);\n  const [shouldZoomIn, setShouldZoomIn] = useState(!!initialLocation);\n\n  // Default to center of Maldives\n  const maldivesCenter: [number, number] = [3.2028, 73.2207];\n  const mapCenter = selectedLocation || maldivesCenter;\n\n  const handleLocationChange = (lat: number, lng: number) => {\n    setSelectedLocation([lat, lng]);\n    setShouldZoomIn(true); // Always zoom when manually selecting on map\n    setLocationAccuracy(null); // Clear GPS accuracy for manual selection\n    // Auto-generate a simple address description\n    setAddress(`Location: ${lat.toFixed(6)}, ${lng.toFixed(6)}`);\n    \n    toast({\n      title: \"Location Selected\",\n      description: `Coordinates: ${lat.toFixed(4)}, ${lng.toFixed(4)}`,\n    });\n  };\n\n  const handleGetCurrentLocation = () => {\n    setIsGettingLocation(true);\n    if (navigator.geolocation) {\n      const timeoutId = setTimeout(() => {\n        setIsGettingLocation(false);\n        toast({\n          title: \"Location Timeout\",\n          description: \"Location request timed out. Please try again or select manually on the map.\",\n          variant: \"destructive\",\n        });\n      }, 10000); // 10 second timeout\n\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          clearTimeout(timeoutId);\n          const { latitude, longitude, accuracy } = position.coords;\n          \n          setSelectedLocation([latitude, longitude]);\n          setLocationAccuracy(accuracy);\n          setAddress(`Current Location: ${latitude.toFixed(6)}, ${longitude.toFixed(6)}`);\n          setIsGettingLocation(false);\n          \n          // Only zoom in if GPS accuracy is good (≤50 meters)\n          const isAccurate = accuracy <= 50;\n          setShouldZoomIn(isAccurate);\n          \n          if (isAccurate) {\n            toast({\n              title: \"Accurate Location Found\",\n              description: `GPS accuracy: ${accuracy.toFixed(0)}m - Zooming in for precise view`,\n            });\n          } else {\n            toast({\n              title: \"Location Found (Low Accuracy)\",\n              description: `GPS accuracy: ${accuracy.toFixed(0)}m - Location marked but not zoomed. Try again for better accuracy.`,\n              variant: \"default\",\n            });\n          }\n        },\n        (error) => {\n          clearTimeout(timeoutId);\n          console.error('Error getting current location:', error);\n          setIsGettingLocation(false);\n          \n          let errorMessage = \"Could not get your current location\";\n          switch(error.code) {\n            case error.PERMISSION_DENIED:\n              errorMessage = \"Location access denied. Please grant location permissions and try again.\";\n              break;\n            case error.POSITION_UNAVAILABLE:\n              errorMessage = \"Location information unavailable. Please select manually on the map.\";\n              break;\n            case error.TIMEOUT:\n              errorMessage = \"Location request timed out. Please try again.\";\n              break;\n          }\n          \n          toast({\n            title: \"Location Error\",\n            description: errorMessage,\n            variant: \"destructive\",\n          });\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 30000 // 30 seconds cache for fresher location\n        }\n      );\n    } else {\n      setIsGettingLocation(false);\n      toast({\n        title: \"Not Supported\",\n        description: \"Geolocation is not supported by this browser\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleConfirm = () => {\n    if (selectedLocation) {\n      const locationData = {\n        latitude: selectedLocation[0],\n        longitude: selectedLocation[1],\n        address: address || `Location: ${selectedLocation[0].toFixed(6)}, ${selectedLocation[1].toFixed(6)}`\n      };\n      \n      // Call the callback function\n      onLocationSelect(locationData);\n      \n      toast({\n        title: \"Location Confirmed\",\n        description: \"Location has been set for your event\",\n      });\n      \n      onClose();\n    }\n  };\n\n  const handleCancel = () => {\n    // Reset to initial values\n    if (initialLocation) {\n      setSelectedLocation([initialLocation.latitude, initialLocation.longitude]);\n      setAddress(initialLocation.address);\n    } else {\n      setSelectedLocation(null);\n      setAddress('');\n    }\n    onClose();\n  };\n\n  return (\n    <div className=\"dialog-overlay-modal\">\n      <Dialog open={isOpen} onOpenChange={handleCancel}>\n        <DialogContent \n          className=\"max-w-4xl h-[80vh] flex flex-col p-0\"\n        >\n        <DialogHeader className=\"p-6 pb-0 flex-shrink-0\">\n          <DialogTitle className=\"flex items-center gap-2\">\n            <MapPin className=\"h-5 w-5\" />\n            {title}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"flex-1 overflow-y-auto p-6 pt-4 space-y-4\">\n          {/* Controls */}\n          <div className=\"flex flex-col sm:flex-row gap-2\">\n            <div className=\"flex-1\">\n              <Input\n                value={address}\n                onChange={(e) => setAddress(e.target.value)}\n                placeholder=\"Enter location description...\"\n                data-testid=\"input-location-address\"\n              />\n            </div>\n            <Button\n              onClick={handleGetCurrentLocation}\n              disabled={isGettingLocation}\n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-current-location\"\n            >\n              <Navigation className=\"h-4 w-4\" />\n              {isGettingLocation ? 'Getting...' : 'My Location'}\n            </Button>\n          </div>\n\n\n          {/* Map */}\n          <div className=\"h-[300px] w-full border rounded-md overflow-hidden\">\n            <MapContainer\n              center={mapCenter}\n              zoom={shouldZoomIn ? 15 : 7}\n              style={{ height: '100%', width: '100%' }}\n              className=\"cursor-crosshair\"\n            >\n              <DirectTileLayer />\n              <MapController \n                center={mapCenter} \n                zoom={shouldZoomIn ? 15 : 7} \n              />\n              <LocationSelector \n                onLocationChange={handleLocationChange}\n                selectedLocation={selectedLocation}\n              />\n            </MapContainer>\n          </div>\n\n          {/* Selected coordinates display */}\n          {selectedLocation && (\n            <div className=\"text-sm bg-blue-50 p-3 rounded-md\">\n              <div className=\"flex items-center gap-2\">\n                <MapPin className=\"h-4 w-4 text-blue-600\" />\n                <strong className=\"text-blue-800\">Selected Coordinates:</strong>\n              </div>\n              <div className=\"ml-6 text-blue-700\">\n                Latitude: {selectedLocation[0].toFixed(6)} | Longitude: {selectedLocation[1].toFixed(6)}\n                {locationAccuracy !== null && locationAccuracy !== undefined && (\n                  <div className=\"mt-1\">\n                    GPS Accuracy: ±{locationAccuracy.toFixed(0)}m \n                    {locationAccuracy <= 50 ? (\n                      <span className=\"text-green-600 font-medium\"> (High Accuracy)</span>\n                    ) : (\n                      <span className=\"text-orange-600 font-medium\"> (Low Accuracy)</span>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n\n        <DialogFooter className=\"p-6 pt-0 flex-shrink-0 border-t bg-gray-50\">\n          <Button\n            variant=\"outline\"\n            onClick={handleCancel}\n            data-testid=\"button-cancel-location\"\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={handleConfirm}\n            disabled={!selectedLocation}\n            data-testid=\"button-confirm-location\"\n          >\n            Confirm Location\n          </Button>\n        </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":11209},"client/src/pages/event-share.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useRoute } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { CalendarDays, MapPin, Users, Contact, MessageSquare, Clock, Navigation, Share2 } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\n\n// Fix for default markers in Leaflet with React\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n});\n\n// Custom tile layer that uses the server's cached tiles\nfunction CachedTileLayer() {\n  const map = useRoute()[1]?.params;\n\n  useEffect(() => {\n    // This will be handled by the MapContainer's TileLayer component\n  }, []);\n\n  return (\n    <TileLayer\n      url=\"/api/tiles/{z}/{x}/{y}\"\n      attribution=\"© OpenStreetMap contributors\"\n      maxZoom={18}\n      minZoom={1}\n    />\n  );\n}\n\nexport default function EventShare() {\n  const [match, params] = useRoute('/share/event/:id');\n  const { toast } = useToast();\n  const [currentLocation, setCurrentLocation] = useState<[number, number] | null>(null);\n\n  const eventId = params?.id;\n\n  // Fetch event data using public endpoint (no auth required)\n  const { data: event, isLoading, error } = useQuery({\n    queryKey: ['/api/public/events', eventId],\n    queryFn: async () => {\n      const response = await fetch(`/api/public/events/${eventId}`);\n      if (!response.ok) {\n        throw new Error('Event not found');\n      }\n      return response.json();\n    },\n    enabled: !!eventId,\n  });\n\n  // Get user's current location\n  const getCurrentLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setCurrentLocation([position.coords.latitude, position.coords.longitude]);\n        },\n        (error) => {\n          console.error('Error getting location:', error);\n        }\n      );\n    }\n  };\n\n  // Share functionality\n  const handleShare = async () => {\n    const shareUrl = window.location.href;\n    \n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: `${event.title} - Maldives Event`,\n          text: `Join us at ${event.title} in ${event.island}, ${event.atoll}`,\n          url: shareUrl,\n        });\n      } catch (error) {\n        // Fallback to clipboard copy\n        copyToClipboard(shareUrl);\n      }\n    } else {\n      copyToClipboard(shareUrl);\n    }\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text).then(() => {\n      toast({\n        title: \"Link Copied\",\n        description: \"Event link copied to clipboard\",\n      });\n    });\n  };\n\n  const getDirections = () => {\n    if (event?.id) {\n      window.location.href = `/map?event=${event.id}`;\n    }\n  };\n\n  useEffect(() => {\n    // Set page title and meta tags for sharing\n    if (event) {\n      document.title = `${event.title} - Maldives Event`;\n      \n      // Update meta tags for better social sharing\n      const updateMetaTag = (property: string, content: string) => {\n        let meta = document.querySelector(`meta[property=\"${property}\"]`) as HTMLMetaElement;\n        if (!meta) {\n          meta = document.createElement('meta');\n          meta.setAttribute('property', property);\n          document.head.appendChild(meta);\n        }\n        meta.content = content;\n      };\n\n      updateMetaTag('og:title', `${event.title} - Maldives Event`);\n      updateMetaTag('og:description', `Join us at ${event.title} in ${event.island}, ${event.atoll}. ${event.comment || ''}`);\n      updateMetaTag('og:type', 'website');\n      updateMetaTag('og:url', window.location.href);\n      \n      // Add event-specific meta tags\n      updateMetaTag('event:location', `${event.island}, ${event.atoll}`);\n      if (event.latitude && event.longitude) {\n        updateMetaTag('event:coordinates', `${event.latitude},${event.longitude}`);\n      }\n    }\n  }, [event]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (error || !event) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <Card className=\"max-w-md w-full mx-4\">\n          <CardContent className=\"p-6 text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Event Not Found</h1>\n            <p className=\"text-gray-600 mb-4\">The event you're looking for doesn't exist or has been removed.</p>\n            <Button onClick={() => window.location.href = '/'}>\n              Go to Homepage\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const eventDate = new Date(event.createdAt || Date.now());\n  const hasLocation = event.latitude && event.longitude;\n  const eventCoords: [number, number] | null = hasLocation \n    ? [parseFloat(event.latitude), parseFloat(event.longitude)]\n    : null;\n\n  // Default center on Maldives if no specific location\n  const mapCenter: [number, number] = eventCoords || [3.2028, 73.2207];\n  const mapZoom = eventCoords ? 14 : 7;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-4xl mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center\">\n                <CalendarDays className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900\">Maldives Events</h1>\n                <p className=\"text-sm text-gray-600\">Shared Event Details</p>\n              </div>\n            </div>\n            <Button \n              onClick={handleShare}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-share-event\"\n            >\n              <Share2 className=\"h-4 w-4\" />\n              Share\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-4xl mx-auto px-4 py-6 space-y-6\">\n        {/* Event Details Card */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-start justify-between\">\n              <div className=\"space-y-2\">\n                <CardTitle className=\"text-2xl\">{event.title}</CardTitle>\n                <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                  <div className=\"flex items-center gap-1\">\n                    <MapPin className=\"h-4 w-4\" />\n                    <span>{event.island}, {event.atoll}</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Clock className=\"h-4 w-4\" />\n                    <span>{eventDate.toLocaleDateString()}</span>\n                  </div>\n                </div>\n              </div>\n              <Badge \n                variant={event.status === 'active' ? 'default' : \n                       event.status === 'completed' ? 'secondary' : 'outline'}\n              >\n                {event.status}\n              </Badge>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Event Location */}\n            {event.eventLocation && (\n              <div>\n                <h3 className=\"font-semibold text-sm text-gray-700 mb-1\">Event Location</h3>\n                <p className=\"text-gray-900\">{event.eventLocation}</p>\n              </div>\n            )}\n\n            {/* Waiting Location */}\n            {event.waitingLocation && (\n              <div>\n                <h3 className=\"font-semibold text-sm text-gray-700 mb-1\">Waiting Location</h3>\n                <p className=\"text-gray-900\">{event.waitingLocation}</p>\n              </div>\n            )}\n\n            {/* Contact */}\n            {event.contact && (\n              <div>\n                <h3 className=\"font-semibold text-sm text-gray-700 mb-1 flex items-center gap-1\">\n                  <Contact className=\"h-4 w-4\" />\n                  Contact\n                </h3>\n                <p className=\"text-gray-900\">{event.contact}</p>\n              </div>\n            )}\n\n            {/* Comment */}\n            {event.comment && (\n              <div>\n                <h3 className=\"font-semibold text-sm text-gray-700 mb-1 flex items-center gap-1\">\n                  <MessageSquare className=\"h-4 w-4\" />\n                  Details\n                </h3>\n                <p className=\"text-gray-900\">{event.comment}</p>\n              </div>\n            )}\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-3 pt-4\">\n              {hasLocation && (\n                <Button \n                  onClick={getDirections}\n                  className=\"flex items-center gap-2\"\n                  data-testid=\"button-get-directions\"\n                >\n                  <Navigation className=\"h-4 w-4\" />\n                  Get Directions\n                </Button>\n              )}\n              <Button \n                onClick={getCurrentLocation}\n                variant=\"outline\"\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-my-location\"\n              >\n                <MapPin className=\"h-4 w-4\" />\n                My Location\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Map Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <MapPin className=\"h-5 w-5\" />\n              Event Location Map\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"h-[400px] w-full\">\n              <MapContainer\n                center={mapCenter}\n                zoom={mapZoom}\n                style={{ height: '100%', width: '100%' }}\n              >\n                <CachedTileLayer />\n                \n                {/* Event Location Marker */}\n                {eventCoords && (\n                  <Marker position={eventCoords}>\n                    <Popup>\n                      <div className=\"p-2\">\n                        <strong className=\"text-sm\">{event.title}</strong>\n                        <br />\n                        <span className=\"text-xs text-gray-600\">\n                          {event.island}, {event.atoll}\n                        </span>\n                        <br />\n                        <span className=\"text-xs text-gray-500\">\n                          {eventCoords[0].toFixed(4)}, {eventCoords[1].toFixed(4)}\n                        </span>\n                      </div>\n                    </Popup>\n                  </Marker>\n                )}\n\n                {/* User's Current Location */}\n                {currentLocation && (\n                  <Marker \n                    position={currentLocation}\n                    icon={L.icon({\n                      iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png',\n                      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n                      iconSize: [25, 41],\n                      iconAnchor: [12, 41],\n                      popupAnchor: [1, -34],\n                      shadowSize: [41, 41]\n                    })}\n                  >\n                    <Popup>\n                      <div className=\"p-2\">\n                        <strong className=\"text-sm\">Your Location</strong>\n                        <br />\n                        <span className=\"text-xs text-gray-600\">\n                          {currentLocation[0].toFixed(4)}, {currentLocation[1].toFixed(4)}\n                        </span>\n                      </div>\n                    </Popup>\n                  </Marker>\n                )}\n              </MapContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className=\"text-center text-sm text-gray-500\">\n          <p>Powered by Maldives Event Manager</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12840},"client/src/components/ConfirmDialog.tsx":{"content":"import {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface ConfirmDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: () => void;\n  title: string;\n  description: string;\n  confirmText?: string;\n  cancelText?: string;\n  variant?: \"default\" | \"destructive\";\n  isLoading?: boolean;\n}\n\nexport function ConfirmDialog({\n  isOpen,\n  onClose,\n  onConfirm,\n  title,\n  description,\n  confirmText = \"Continue\",\n  cancelText = \"Cancel\",\n  variant = \"destructive\",\n  isLoading = false,\n}: ConfirmDialogProps) {\n  return (\n    <AlertDialog open={isOpen} onOpenChange={onClose}>\n      <AlertDialogContent data-testid=\"confirm-dialog\">\n        <AlertDialogHeader>\n          <AlertDialogTitle data-testid=\"confirm-dialog-title\">\n            {title}\n          </AlertDialogTitle>\n          <AlertDialogDescription data-testid=\"confirm-dialog-description\">\n            {description}\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel \n            onClick={onClose}\n            disabled={isLoading}\n            data-testid=\"confirm-dialog-cancel\"\n          >\n            {cancelText}\n          </AlertDialogCancel>\n          <AlertDialogAction \n            onClick={onConfirm}\n            disabled={isLoading}\n            className={variant === \"destructive\" ? \"bg-red-600 hover:bg-red-700\" : \"\"}\n            data-testid=\"confirm-dialog-confirm\"\n          >\n            {isLoading ? \"Processing...\" : confirmText}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}","size_bytes":1762},"client/src/pages/pending-approval.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle, Phone } from \"lucide-react\";\n\nexport default function PendingApproval() {\n  const handleCall = () => {\n    window.location.href = \"tel:9947180\";\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary to-secondary flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardContent className=\"p-8\">\n          <div className=\"text-center mb-8\">\n            <img \n              src=\"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=100\" \n              alt=\"Maldives islands view\" \n              className=\"mx-auto rounded-lg mb-4 h-20 w-full object-cover\"\n            />\n            <AlertCircle className=\"w-16 h-16 text-yellow-500 mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-bold text-card-foreground mb-4\">Account Pending Approval</h1>\n          </div>\n          \n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <p className=\"text-muted-foreground\">\n                Please wait till admin approves you to use the app or call 9947180\n              </p>\n            </div>\n\n            <div className=\"space-y-4\">\n              <Button \n                onClick={handleCall}\n                className=\"w-full\"\n                variant=\"outline\"\n                data-testid=\"button-call-admin\"\n              >\n                <Phone className=\"w-4 h-4 mr-2\" />\n                Call Admin: 9947180\n              </Button>\n\n              <Button \n                onClick={handleLogout}\n                className=\"w-full\"\n                variant=\"secondary\"\n                data-testid=\"button-logout\"\n              >\n                Logout\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2030},"client/src/components/equipment-transfer-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { Equipment } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogHeader, \n  DialogTitle, \n  DialogTrigger \n} from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { usePermissions } from \"@/hooks/usePermissions\";\nimport { ArrowRight, Move } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst transferSchema = z.object({\n  quantityToMove: z.number().min(1, \"Quantity must be at least 1\"),\n  destinationAtoll: z.string().min(1, \"Destination atoll is required\"),\n  destinationIsland: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ntype TransferForm = z.infer<typeof transferSchema>;\n\ninterface EquipmentTransferFormProps {\n  equipment: Equipment;\n  onSuccess?: () => void;\n}\n\nexport default function EquipmentTransferForm({ equipment, onSuccess }: EquipmentTransferFormProps) {\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { canTransferEquipment } = usePermissions();\n  \n  // Fetch islands data for dynamic dropdown\n  const { data: islandsData = [] } = useQuery({\n    queryKey: [\"/api/islands\"],\n  });\n\n  const form = useForm<TransferForm>({\n    resolver: zodResolver(transferSchema),\n    defaultValues: {\n      quantityToMove: 1,\n      destinationAtoll: \"\",\n      destinationIsland: \"\",\n      notes: \"\",\n    }\n  });\n\n  const transferMutation = useMutation({\n    mutationFn: async (data: TransferForm) => {\n      const response = await apiRequest('POST', `/api/equipment/${equipment.id}/transfer`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/equipment'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/equipment/transfers'] });\n      toast({\n        title: \"Equipment Transferred\",\n        description: `Successfully moved ${form.getValues('quantityToMove')} ${equipment.name} to ${form.getValues('destinationAtoll')}`,\n      });\n      form.reset();\n      setOpen(false);\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Transfer Failed\",\n        description: error.message || \"Failed to transfer equipment\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const onSubmit = (data: TransferForm) => {\n    if (data.quantityToMove > equipment.quantity) {\n      toast({\n        title: \"Invalid Quantity\",\n        description: `Cannot move ${data.quantityToMove} items. Only ${equipment.quantity} available.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    transferMutation.mutate(data);\n  };\n\n  const isTransferDisabled = equipment.quantity <= 0 || equipment.status === \"transferred\" || !canTransferEquipment;\n\n  // Get unique atolls from islands data\n  const atolls = Array.from(new Set((islandsData as any[]).map((island: any) => island.atoll))).sort();\n  \n  // Filter islands by selected atoll\n  const availableIslands = form.watch(\"destinationAtoll\") \n    ? (islandsData as any[]).filter((island: any) => island.atoll === form.watch(\"destinationAtoll\"))\n    : (islandsData as any[]);\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          disabled={isTransferDisabled}\n          data-testid={`button-transfer-${equipment.id}`}\n        >\n          <Move className=\"w-4 h-4 mr-2\" />\n          Transfer\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"title-transfer-equipment\">Transfer Equipment</DialogTitle>\n          <DialogDescription>\n            Move {equipment.name} from {equipment.atoll} to another location\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"bg-muted p-3 rounded-lg mb-4\" data-testid=\"transfer-source-info\">\n          <div className=\"flex items-center gap-2 text-sm\">\n            <div className=\"font-medium\">From:</div>\n            <div>{equipment.atoll}{equipment.island ? ` - ${equipment.island}` : \"\"}</div>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm\">\n            <div className=\"font-medium\">Available:</div>\n            <div data-testid=\"text-available-quantity\">{equipment.quantity} units</div>\n          </div>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"quantityToMove\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Quantity to Move</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      min={1}\n                      max={equipment.quantity}\n                      {...field}\n                      value={field.value || \"\"}\n                      onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : \"\")}\n                      data-testid=\"input-transfer-quantity\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <ArrowRight className=\"w-4 h-4\" />\n              <span>Transfer to destination</span>\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"destinationAtoll\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Destination Atoll</FormLabel>\n                  <Select \n                    onValueChange={(value) => {\n                      field.onChange(value);\n                      // Clear island selection when atoll changes\n                      form.setValue(\"destinationIsland\", \"\");\n                    }} \n                    defaultValue={field.value}\n                  >\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-destination-atoll\">\n                        <SelectValue placeholder=\"Select destination atoll\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {atolls.map((atoll, index) => (\n                        <SelectItem key={`transfer-atoll-${index}`} value={atoll}>\n                          {atoll}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"destinationIsland\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Destination Island</FormLabel>\n                  <Select \n                    onValueChange={field.onChange}\n                    value={field.value || \"\"}\n                    disabled={!form.watch(\"destinationAtoll\")}\n                  >\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-destination-island\">\n                        <SelectValue placeholder={form.watch(\"destinationAtoll\") ? \"Select Island\" : \"Select Atoll First\"} />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {availableIslands.map((island: any) => (\n                        <SelectItem key={island.id} value={island.name}>\n                          {island.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Transfer Notes (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Reason for transfer, contact person, etc...\"\n                      rows={3}\n                      {...field}\n                      data-testid=\"input-transfer-notes\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-2 pt-2\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setOpen(false)}\n                data-testid=\"button-cancel-transfer\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={transferMutation.isPending}\n                data-testid=\"button-confirm-transfer\"\n              >\n                {transferMutation.isPending ? \"Transferring...\" : \"Transfer Equipment\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9818},"client/src/components/simple-map.tsx":{"content":"import { useEffect, useRef, useState, useCallback } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, useMap } from 'react-leaflet';\nimport { Icon, LatLngTuple } from 'leaflet';\nimport L from 'leaflet';\nimport { useQuery } from '@tanstack/react-query';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLocationTracking } from '@/hooks/useLocationTracking';\nimport { Calendar, MapPin, Users, Clock, Search, Navigation, X, ChevronLeft, ChevronRight, MapIcon, Route, Target } from 'lucide-react';\nimport { format } from 'date-fns';\nimport * as polyline from 'polyline';\nimport { routingService } from '@/lib/routingService';\nimport ModernDirectionsPanel from './ModernDirectionsPanel';\nimport type { Event, Island, IslandWithUserVisitStatus } from '@shared/schema';\n\n// Maldives coordinates (central position)\nconst MALDIVES_CENTER: LatLngTuple = [3.2028, 73.2207];\nconst DEFAULT_ZOOM = 7;\nconst MAX_ZOOM = 18;\n\n// Maldives bounds to ensure proper fit\nconst MALDIVES_BOUNDS: [LatLngTuple, LatLngTuple] = [\n  [-0.5, 72.5], // Southwest corner\n  [7.5, 74.0]   // Northeast corner  \n];\n\n// Custom event marker icon\nconst eventIcon = new Icon({\n  iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n  iconSize: [25, 41],\n  iconAnchor: [12, 41],\n  popupAnchor: [1, -34],\n  shadowSize: [41, 41]\n});\n\n// Dynamic location marker creator - now direction-aware\nconst createLocationIcon = (deviceHeading: number, isCompassEnabled: boolean) => {\n  return new L.DivIcon({\n    html: `\n      <div class=\"current-location-marker\">\n        <div class=\"location-pulse\"></div>\n        <div class=\"location-marker ${isCompassEnabled ? 'directional-marker' : 'dot-marker'}\" \n             style=\"transform: rotate(${isCompassEnabled ? deviceHeading : 0}deg)\">\n          ${isCompassEnabled ? '▲' : ''}\n        </div>\n      </div>\n    `,\n    className: 'custom-location-icon',\n    iconSize: [40, 40],\n    iconAnchor: [20, 20],\n    popupAnchor: [0, -20]\n  });\n};\n\ninterface SimpleMapProps {\n  selectedEventId?: string | null;\n  onEventSelect?: (eventId: string | null) => void;\n  className?: string;\n  autoDirections?: boolean;\n}\n\n// Component to handle map center changes and ensure proper bounds\nfunction MapController({ \n  eventId, \n  events, \n  islandCoords,\n  userLocation,\n  isZoomLocked\n}: { \n  eventId?: string | null; \n  events: Event[];\n  islandCoords: Record<string, { lat: number; lng: number; atoll: string }>;\n  userLocation?: [number, number] | null;\n  isZoomLocked: boolean;\n}) {\n  const map = useMap();\n  \n  useEffect(() => {\n    // Set max bounds for Maldives region\n    map.setMaxBounds(MALDIVES_BOUNDS);\n    \n    if (eventId && events.length > 0) {\n      // Find the selected event\n      const selectedEvent = events.find(event => event.id === eventId);\n      \n      if (selectedEvent) {\n        let eventLat, eventLng;\n        \n        // Use event's actual coordinates if available, fallback to island coordinates\n        if (selectedEvent.latitude && selectedEvent.longitude) {\n          eventLat = parseFloat(selectedEvent.latitude);\n          eventLng = parseFloat(selectedEvent.longitude);\n        } else {\n          const coords = islandCoords[`${selectedEvent.atoll}_${selectedEvent.island}`];\n          if (coords) {\n            eventLat = coords.lat;\n            eventLng = coords.lng;\n          }\n        }\n        \n        if (eventLat && eventLng && !isNaN(eventLat) && !isNaN(eventLng)) {\n          // Navigate to the event location - respect zoom lock\n          if (isZoomLocked) {\n            // Only change position, keep current zoom when locked\n            map.panTo([eventLat, eventLng], { animate: true, duration: 1 });\n          } else {\n            // Normal behavior when not zoom locked\n            map.setView([eventLat, eventLng], 12, { animate: true, duration: 1 });\n          }\n        }\n      }\n    } else if (userLocation && !isZoomLocked) {\n      // Only set view to user location if not zoom locked (this should only happen on initial load)\n      map.setView(userLocation, MAX_ZOOM, { animate: true, duration: 1 });\n    } else if (!userLocation && !isZoomLocked) {\n      // Final fallback to Maldives center only if not zoom locked\n      map.setView(MALDIVES_CENTER, DEFAULT_ZOOM);\n    }\n  }, [eventId, events, islandCoords, userLocation, map, isZoomLocked]);\n  \n  return null;\n}\n\nexport function SimpleMap({ selectedEventId, onEventSelect, className, autoDirections }: SimpleMapProps) {\n  const mapRef = useRef<L.Map>(null);\n  const [mapReady, setMapReady] = useState(false);\n  const [userLocation, setUserLocation] = useState<[number, number] | null>(null);\n  const [locationLoaded, setLocationLoaded] = useState(false);\n  const [isZoomLocked, setIsZoomLocked] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filteredIslands, setFilteredIslands] = useState<Island[]>([]);\n  const [showSearchResults, setShowSearchResults] = useState(false);\n  \n  // Direction-based map rotation state\n  const [isDirectionMode, setIsDirectionMode] = useState(false);\n  const [previousLocation, setPreviousLocation] = useState<[number, number] | null>(null);\n  const [currentBearing, setCurrentBearing] = useState<number>(0);\n  const [locationHistory, setLocationHistory] = useState<Array<{lat: number, lng: number, timestamp: number}>>([]);\n  \n  // Compass state\n  const [isCompassEnabled, setIsCompassEnabled] = useState(false);\n  const [deviceHeading, setDeviceHeading] = useState<number>(0);\n  const [isWatchingLocation, setIsWatchingLocation] = useState(false);\n  const [userInteracted, setUserInteracted] = useState(false);\n  const watchId = useRef<number | null>(null);\n  const isMoving = useRef<boolean>(false);\n  const interactionTimeout = useRef<number | null>(null);\n  \n  // Directions state\n  const [directionsMode, setDirectionsMode] = useState(false);\n  const [routeCoordinates, setRouteCoordinates] = useState<[number, number][]>([]);\n  const [routeInstructions, setRouteInstructions] = useState<string[]>([]);\n  const [routeDistance, setRouteDistance] = useState<string>('');\n  const [routeDuration, setRouteDuration] = useState<string>('');\n  const [isLoadingDirections, setIsLoadingDirections] = useState(false);\n  \n  const { toast } = useToast();\n\n  // Calculate bearing between two points\n  const calculateBearing = useCallback((startLat: number, startLng: number, endLat: number, endLng: number): number => {\n    const dLng = (endLng - startLng) * Math.PI / 180;\n    const startLatRad = startLat * Math.PI / 180;\n    const endLatRad = endLat * Math.PI / 180;\n    \n    const y = Math.sin(dLng) * Math.cos(endLatRad);\n    const x = Math.cos(startLatRad) * Math.sin(endLatRad) - Math.sin(startLatRad) * Math.cos(endLatRad) * Math.cos(dLng);\n    \n    let bearing = Math.atan2(y, x) * 180 / Math.PI;\n    return (bearing + 360) % 360; // Normalize to 0-360\n  }, []);\n\n  // Update map rotation based on bearing\n  const updateMapRotation = useCallback((bearing: number) => {\n    const map = mapRef.current;\n    if (!map || !isDirectionMode) return;\n    \n    // Rotate the map so the bearing direction points up\n    const rotation = -bearing; // Negative because we want to rotate the map, not the direction\n    \n    // Apply CSS transform to rotate the map container\n    const mapContainer = map.getContainer();\n    if (mapContainer) {\n      mapContainer.style.transform = `rotate(${rotation}deg)`;\n      mapContainer.style.transformOrigin = 'center center';\n    }\n  }, [isDirectionMode]);\n\n  // Location tracking for automatic island visit detection\n  const { \n    isTracking, \n    nearbyIslands,\n    checkLocationForIslandVisits \n  } = useLocationTracking({\n    enabled: true,\n    checkInterval: 45000, // 45 seconds for map context\n    showToasts: true\n  });\n\n  // Fetch events data\n  const { data: events = [], isLoading: eventsLoading } = useQuery<Event[]>({\n    queryKey: ['/api/events'],\n    enabled: mapReady\n  });\n\n  // Fetch islands data\n  const { data: islands = [], isLoading: islandsLoading } = useQuery<IslandWithUserVisitStatus[]>({\n    queryKey: ['/api/islands'],\n    enabled: mapReady\n  });\n\n  // Create a map of island keys (atoll_island) to coordinates to handle same-named islands\n  const islandCoords = islands.reduce((acc, island) => {\n    if (island.latitude && island.longitude) {\n      const key = `${island.atoll}_${island.name}`;\n      acc[key] = {\n        lat: parseFloat(island.latitude),\n        lng: parseFloat(island.longitude),\n        atoll: island.atoll\n      };\n    }\n    return acc;\n  }, {} as Record<string, { lat: number; lng: number; atoll: string }>);\n\n  const handleMapReady = () => {\n    setMapReady(true);\n    // Automatically get user location when map is ready\n    if (!locationLoaded) {\n      getUserLocationOnLoad();\n    }\n  };\n\n  // Get user's current location automatically on load\n  const getUserLocationOnLoad = () => {\n    if (!navigator.geolocation) {\n      setLocationLoaded(true);\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        const { latitude, longitude } = position.coords;\n        const newLocation: [number, number] = [latitude, longitude];\n        setUserLocation(newLocation);\n        \n        // Add to location history for direction calculation\n        const now = Date.now();\n        setLocationHistory(prev => {\n          const updated = [...prev, { lat: latitude, lng: longitude, timestamp: now }];\n          // Keep only last 5 positions for bearing calculation\n          return updated.slice(-5);\n        });\n        setLocationLoaded(true);\n        setIsZoomLocked(true); // Lock zoom when user location is acquired\n        if (mapRef.current) {\n          mapRef.current.setView([latitude, longitude], MAX_ZOOM);\n        }\n        \n        // Check for nearby islands and mark visited\n        try {\n          await checkLocationForIslandVisits(latitude, longitude);\n        } catch (error) {\n          // Silent fail for island checking on auto-load\n        }\n      },\n      (error) => {\n        // Silently fail on auto-load, user can manually trigger location later\n        setLocationLoaded(true);\n      },\n      { enableHighAccuracy: true, timeout: 10000, maximumAge: 60000 }\n    );\n  };\n\n  // Continuous location watching for direction mode\n  useEffect(() => {\n    if (!isDirectionMode || !navigator.geolocation) return;\n\n    let watchId: number;\n    \n    const watchOptions = {\n      enableHighAccuracy: true,\n      timeout: 10000,\n      maximumAge: 5000\n    };\n\n    const handlePositionUpdate = (position: GeolocationPosition) => {\n      const { latitude, longitude } = position.coords;\n      const newLocation: [number, number] = [latitude, longitude];\n      \n      setUserLocation(newLocation);\n      \n      // Calculate bearing if we have previous location\n      if (previousLocation) {\n        const bearing = calculateBearing(\n          previousLocation[0], previousLocation[1],\n          latitude, longitude\n        );\n        \n        // Only update if movement is significant (> 5 meters approx)\n        const distance = calculateDistance(\n          previousLocation[0], previousLocation[1],\n          latitude, longitude\n        );\n        \n        if (distance > 0.00005) { // ~5 meters in degrees\n          setCurrentBearing(bearing);\n          updateMapRotation(bearing);\n        }\n      }\n      \n      setPreviousLocation(newLocation);\n    };\n\n    watchId = navigator.geolocation.watchPosition(\n      handlePositionUpdate,\n      (error) => {\n        console.error('Direction tracking error:', error);\n      },\n      watchOptions\n    );\n\n    return () => {\n      if (watchId) {\n        navigator.geolocation.clearWatch(watchId);\n      }\n    };\n  }, [isDirectionMode, previousLocation, calculateBearing, updateMapRotation]);\n\n  // Calculate distance between two points (simple approximation)\n  const calculateDistance = useCallback((lat1: number, lng1: number, lat2: number, lng2: number): number => {\n    const dlat = lat2 - lat1;\n    const dlng = lng2 - lng1;\n    return Math.sqrt(dlat * dlat + dlng * dlng);\n  }, []);\n\n  // Toggle direction mode\n  const toggleDirectionMode = useCallback(() => {\n    setIsDirectionMode(prev => {\n      const newMode = !prev;\n      \n      if (!newMode) {\n        // Reset map rotation when disabling direction mode\n        const map = mapRef.current;\n        if (map) {\n          const mapContainer = map.getContainer();\n          if (mapContainer) {\n            mapContainer.style.transform = 'rotate(0deg)';\n          }\n        }\n        setPreviousLocation(null);\n        setCurrentBearing(0);\n      } else {\n        // Start direction tracking\n        if (userLocation) {\n          setPreviousLocation(userLocation);\n        }\n      }\n      \n      toast({\n        title: newMode ? \"Direction Mode Enabled\" : \"Direction Mode Disabled\",\n        description: newMode ? \"Map will now rotate based on your movement direction\" : \"Map rotation reset to north-up\",\n      });\n      \n      return newMode;\n    });\n  }, [userLocation, toast]);\n\n  // Compass functionality\n  const requestCompassPermission = async () => {\n    if ('DeviceOrientationEvent' in window) {\n      if (typeof (DeviceOrientationEvent as any).requestPermission === 'function') {\n        const permission = await (DeviceOrientationEvent as any).requestPermission();\n        return permission === 'granted';\n      }\n      return true; // Android devices don't require permission\n    }\n    return false;\n  };\n\n  const toggleCompass = async () => {\n    if (!isCompassEnabled) {\n      const hasPermission = await requestCompassPermission();\n      if (!hasPermission) {\n        toast({\n          title: \"Compass Permission Denied\",\n          description: \"Please allow device orientation access to use the compass.\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n      \n      setIsCompassEnabled(true);\n      toast({\n        title: \"Compass Enabled\",\n        description: \"Device compass is now active\"\n      });\n      \n      // Start continuous location tracking\n      startContinuousLocationTracking();\n    } else {\n      setIsCompassEnabled(false);\n      stopContinuousLocationTracking();\n      toast({\n        title: \"Compass Disabled\",\n        description: \"Device compass is now inactive\"\n      });\n    }\n  };\n\n  // Enhanced location tracking with battery optimization\n  const lastPanTime = useRef<number>(0);\n  const lastLocation = useRef<[number, number] | null>(null);\n\n  const resetUserInteraction = () => {\n    if (interactionTimeout.current) {\n      clearTimeout(interactionTimeout.current);\n    }\n    interactionTimeout.current = window.setTimeout(() => {\n      setUserInteracted(false);\n    }, 5000); // Reset after 5 seconds of no interaction\n  };\n\n  const startContinuousLocationTracking = () => {\n    if (!navigator.geolocation || watchId.current !== null) return;\n    \n    setIsWatchingLocation(true);\n    \n    // Use dynamic accuracy based on movement\n    const getWatchOptions = (isMoving: boolean) => ({\n      enableHighAccuracy: isMoving,\n      timeout: isMoving ? 10000 : 20000,\n      maximumAge: isMoving ? 3000 : 10000\n    });\n\n    const locationHandler = (position: GeolocationPosition) => {\n      const { latitude, longitude, speed } = position.coords;\n      const newLocation: [number, number] = [latitude, longitude];\n      \n      // Movement detection for battery optimization\n      const currentlyMoving = Boolean((speed !== null && speed > 0.5) || // 0.5 m/s threshold\n                                      (lastLocation.current && \n                                       calculateDistance(lastLocation.current[0], lastLocation.current[1], latitude, longitude) > 0.00001));\n      \n      // Track movement state changes for dynamic accuracy\n      if (currentlyMoving !== isMoving.current) {\n        isMoving.current = currentlyMoving;\n        \n        // Restart tracking with appropriate accuracy\n        if (watchId.current !== null) {\n          navigator.geolocation.clearWatch(watchId.current);\n          watchId.current = navigator.geolocation.watchPosition(\n            locationHandler,\n            (error) => console.error('Location tracking error:', error),\n            getWatchOptions(currentlyMoving)\n          );\n        }\n      }\n      \n      // Only update if significant movement or first location\n      if (!lastLocation.current || currentlyMoving) {\n        setUserLocation(newLocation);\n        lastLocation.current = newLocation;\n        \n        // Smart map following - only if compass enabled and user hasn't interacted\n        const now = Date.now();\n        if (mapRef.current && isCompassEnabled && !userInteracted && (now - lastPanTime.current > 1000)) {\n          mapRef.current.panTo([latitude, longitude]);\n          lastPanTime.current = now;\n        }\n        \n        // Check for nearby islands when moving\n        if (currentlyMoving) {\n          checkLocationForIslandVisits(latitude, longitude).catch(() => {\n            // Silent error handling\n          });\n        }\n      }\n    };\n\n    watchId.current = navigator.geolocation.watchPosition(\n      locationHandler,\n      (error) => {\n        console.error('Continuous location error:', error);\n      },\n      getWatchOptions(false) // Start with low accuracy\n    );\n  };\n\n  const stopContinuousLocationTracking = () => {\n    if (watchId.current !== null) {\n      navigator.geolocation.clearWatch(watchId.current);\n      watchId.current = null;\n    }\n    setIsWatchingLocation(false);\n    lastLocation.current = null;\n    lastPanTime.current = 0;\n  };\n\n  // Device orientation handling with cross-platform support\n  useEffect(() => {\n    if (!isCompassEnabled) return;\n\n    const handleOrientation = (event: DeviceOrientationEvent) => {\n      let heading: number | null = null;\n\n      // iOS Safari uses webkitCompassHeading (0-360, 0 = North)\n      if ('webkitCompassHeading' in event && (event as any).webkitCompassHeading !== null) {\n        heading = (event as any).webkitCompassHeading;\n      }\n      // Android and other browsers use alpha with screen orientation compensation\n      else if (event.alpha !== null) {\n        // Get screen orientation\n        const screenOrientation = screen.orientation?.angle || 0;\n        // Adjust for screen orientation and convert to compass heading\n        heading = (360 - event.alpha - screenOrientation) % 360;\n      }\n\n      if (heading !== null) {\n        // Smooth the heading changes to reduce jitter\n        setDeviceHeading(prev => {\n          const diff = ((heading! - prev + 540) % 360) - 180;\n          return Math.abs(diff) < 2 ? prev : prev + diff * 0.3;\n        });\n      }\n    };\n\n    // Request permission on iOS\n    if (typeof (DeviceOrientationEvent as any).requestPermission === 'function') {\n      (DeviceOrientationEvent as any).requestPermission().then((permission: string) => {\n        if (permission === 'granted') {\n          window.addEventListener('deviceorientation', handleOrientation);\n        }\n      });\n    } else {\n      window.addEventListener('deviceorientation', handleOrientation);\n    }\n\n    return () => {\n      window.removeEventListener('deviceorientation', handleOrientation);\n    };\n  }, [isCompassEnabled]);\n\n  // Map interaction detection to suspend auto-follow\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map || !isCompassEnabled) return;\n\n    const handleMapInteraction = () => {\n      setUserInteracted(true);\n      resetUserInteraction();\n    };\n\n    // Listen for map interactions\n    map.on('dragstart', handleMapInteraction);\n    map.on('zoomstart', handleMapInteraction);\n    map.on('mousedown', handleMapInteraction);\n    map.on('touchstart', handleMapInteraction);\n\n    return () => {\n      map.off('dragstart', handleMapInteraction);\n      map.off('zoomstart', handleMapInteraction);\n      map.off('mousedown', handleMapInteraction);\n      map.off('touchstart', handleMapInteraction);\n    };\n  }, [isCompassEnabled]);\n\n  // Page visibility optimization for battery saving\n  useEffect(() => {\n    if (!isWatchingLocation) return;\n\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        // Pause location tracking when tab is hidden\n        if (watchId.current !== null) {\n          navigator.geolocation.clearWatch(watchId.current);\n          watchId.current = null;\n        }\n      } else {\n        // Resume location tracking when tab becomes visible\n        startContinuousLocationTracking();\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [isWatchingLocation]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      stopContinuousLocationTracking();\n      if (interactionTimeout.current) {\n        clearTimeout(interactionTimeout.current);\n      }\n    };\n  }, []);\n\n  // Get user's current location (manual trigger)\n  const getUserLocation = async () => {\n    if (!navigator.geolocation) {\n      toast({\n        title: \"Geolocation not supported\",\n        description: \"Your browser doesn't support geolocation.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Request compass permission synchronously in user gesture (iOS requirement)\n    let compassEnabled = isCompassEnabled;\n    if (!compassEnabled) {\n      const hasCompassPermission = await requestCompassPermission();\n      if (hasCompassPermission) {\n        setIsCompassEnabled(true);\n        compassEnabled = true;\n      }\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        const { latitude, longitude } = position.coords;\n        const newLocation: [number, number] = [latitude, longitude];\n        setUserLocation(newLocation);\n        setPreviousLocation(newLocation);\n        setIsZoomLocked(true); // Lock zoom when user location is acquired\n        \n        // Start continuous tracking if compass was enabled\n        if (compassEnabled && !isWatchingLocation) {\n          startContinuousLocationTracking();\n        }\n        \n        if (mapRef.current) {\n          mapRef.current.setView([latitude, longitude], MAX_ZOOM);\n        }\n        toast({\n          title: \"Location found\",\n          description: `Located at ${latitude.toFixed(6)}, ${longitude.toFixed(6)} with ${position.coords.accuracy}m accuracy`\n        });\n        \n        // Check for nearby islands and mark visited\n        try {\n          await checkLocationForIslandVisits(latitude, longitude);\n        } catch (error) {\n          // Don't show error toast for island checking as it has its own error handling\n        }\n      },\n      (error) => {\n        let message = \"Unable to retrieve your location.\";\n        if (error.code === error.PERMISSION_DENIED) {\n          message = \"Location access denied. Please enable location permissions.\";\n        }\n        toast({\n          title: \"Location error\",\n          description: message,\n          variant: \"destructive\"\n        });\n      },\n      { enableHighAccuracy: true, timeout: 15000, maximumAge: 0 }\n    );\n  };\n\n  // Navigation functions for events\n  const navigateToNextEvent = () => {\n    if (events.length === 0) return;\n    \n    const currentIndex = selectedEventId \n      ? events.findIndex(event => event.id === selectedEventId)\n      : -1;\n    \n    const nextIndex = currentIndex < events.length - 1 ? currentIndex + 1 : 0;\n    const nextEvent = events[nextIndex];\n    \n    onEventSelect?.(nextEvent.id);\n    toast({\n      title: \"Next Event\",\n      description: `Navigating to: ${nextEvent.title}`,\n    });\n  };\n\n  const navigateToPreviousEvent = () => {\n    if (events.length === 0) return;\n    \n    const currentIndex = selectedEventId \n      ? events.findIndex(event => event.id === selectedEventId)\n      : -1;\n    \n    const prevIndex = currentIndex > 0 ? currentIndex - 1 : events.length - 1;\n    const prevEvent = events[prevIndex];\n    \n    onEventSelect?.(prevEvent.id);\n    toast({\n      title: \"Previous Event\",\n      description: `Navigating to: ${prevEvent.title}`,\n    });\n  };\n\n  const showAllEvents = () => {\n    onEventSelect?.(null);\n    toast({\n      title: \"Show All Events\",\n      description: \"Showing all events on the map\",\n    });\n  };\n\n  // Get current event details for display\n  const getCurrentEvent = () => {\n    if (!selectedEventId) return null;\n    return events.find(event => event.id === selectedEventId);\n  };\n\n  // Update filtered islands when search query changes\n  useEffect(() => {\n    if (searchQuery.trim()) {\n      const filtered = islands.filter(island => \n        island.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        island.atoll.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n      setFilteredIslands(filtered);\n      setShowSearchResults(filtered.length > 0);\n    } else {\n      setFilteredIslands([]);\n      setShowSearchResults(false);\n    }\n  }, [searchQuery]);\n\n  const selectIsland = (island: Island) => {\n    if (island.latitude && island.longitude && mapRef.current) {\n      const lat = parseFloat(island.latitude);\n      const lng = parseFloat(island.longitude);\n      if (!isNaN(lat) && !isNaN(lng)) {\n        if (isZoomLocked) {\n          // Only change position, keep current zoom when locked\n          mapRef.current.panTo([lat, lng]);\n        } else {\n          // Normal behavior when not zoom locked\n          mapRef.current.setView([lat, lng], 12);\n        }\n        setSearchQuery(island.name);\n        setShowSearchResults(false);\n      }\n    }\n  };\n\n  const clearSearch = () => {\n    setSearchQuery('');\n    setShowSearchResults(false);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'bg-green-500';\n      case 'active': return 'bg-blue-500';\n      case 'planned': return 'bg-yellow-500';\n      case 'cancelled': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const formatEventDate = (dateStr: string | Date | null) => {\n    try {\n      if (!dateStr) return 'No date';\n      return format(new Date(dateStr), 'MMM dd, yyyy');\n    } catch {\n      return String(dateStr);\n    }\n  };\n\n  // Directions functions\n  const getDirections = async (startLat: number, startLng: number, endLat: number, endLng: number) => {\n    setIsLoadingDirections(true);\n    try {\n      // Use the improved routing service\n      const route = await routingService.getRoute([startLat, startLng], [endLat, endLng], { profile: 'walking' });\n      \n      if (route) {\n        // Extract turn-by-turn instructions\n        const instructions: string[] = route.steps.map(step => step.instruction);\n        \n        // Format distance and duration\n        const distance = (route.distance / 1000).toFixed(1) + ' km';\n        const duration = Math.round(route.duration / 60) + ' min';\n        setRouteCoordinates(route.coordinates);\n        setRouteInstructions(instructions);\n        setRouteDistance(distance);\n        setRouteDuration(duration);\n        setDirectionsMode(true);\n        \n        toast({\n          title: \"Directions Found\",\n          description: `Route: ${distance}, ${duration}`,\n        });\n      } else {\n        throw new Error('No route found from routing service');\n      }\n    } catch (error) {\n      console.error('Error getting directions:', error);\n      toast({\n        title: \"Directions Error\", \n        description: \"Could not get directions. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoadingDirections(false);\n    }\n  };\n\n  const getDirectionsToEvent = () => {\n    if (!userLocation) {\n      toast({\n        title: \"Location Required\",\n        description: \"Please enable location access to get directions.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!selectedEventId) {\n      toast({\n        title: \"Event Required\",\n        description: \"Please select an event to get directions.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const currentEvent = getCurrentEvent();\n    if (!currentEvent) return;\n\n    let eventLat, eventLng;\n    if (currentEvent.latitude && currentEvent.longitude) {\n      eventLat = parseFloat(currentEvent.latitude);\n      eventLng = parseFloat(currentEvent.longitude);\n    } else {\n      const coords = islandCoords[currentEvent.island];\n      if (coords) {\n        eventLat = coords.lat;\n        eventLng = coords.lng;\n      }\n    }\n\n    if (eventLat && eventLng && !isNaN(eventLat) && !isNaN(eventLng)) {\n      setDirectionsMode(true);\n      getDirections(userLocation[0], userLocation[1], eventLat, eventLng);\n    } else {\n      toast({\n        title: \"Event Location Error\",\n        description: \"Could not find coordinates for this event.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const clearDirections = () => {\n    setDirectionsMode(false);\n    setRouteCoordinates([]);\n    setRouteInstructions([]);\n    setRouteDistance('');\n    setRouteDuration('');\n  };\n\n\n  // Auto-trigger directions when autoDirections prop is true and conditions are met\n  useEffect(() => {\n    if (autoDirections && selectedEventId && events.length > 0 && !directionsMode) {\n      // Get user location first, then trigger directions\n      if (!navigator.geolocation) {\n        toast({\n          title: \"Geolocation not supported\",\n          description: \"Your browser doesn't support geolocation.\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setUserLocation([latitude, longitude]);\n          setIsZoomLocked(true); // Lock zoom when user location is acquired\n          \n          // Set map view to max zoom when location is acquired\n          if (mapRef.current) {\n            mapRef.current.setView([latitude, longitude], MAX_ZOOM);\n          }\n          \n          // Delay to ensure events and location are ready\n          setTimeout(() => {\n            const currentEvent = events.find(event => event.id === selectedEventId);\n            if (!currentEvent) return;\n\n            let eventLat, eventLng;\n            if (currentEvent.latitude && currentEvent.longitude) {\n              eventLat = parseFloat(currentEvent.latitude);\n              eventLng = parseFloat(currentEvent.longitude);\n            } else {\n              const coords = islandCoords[currentEvent.island];\n              if (coords) {\n                eventLat = coords.lat;\n                eventLng = coords.lng;\n              }\n            }\n\n            if (eventLat && eventLng && !isNaN(eventLat) && !isNaN(eventLng)) {\n              setDirectionsMode(true);\n              getDirections(latitude, longitude, eventLat, eventLng);\n            }\n          }, 1000);\n        },\n        (error) => {\n          let message = \"Unable to retrieve your location for directions.\";\n          if (error.code === error.PERMISSION_DENIED) {\n            message = \"Location access denied. Please enable location permissions for directions.\";\n          }\n          toast({\n            title: \"Location error\",\n            description: message,\n            variant: \"destructive\",\n          });\n        },\n        { enableHighAccuracy: true, timeout: 15000, maximumAge: 0 }\n      );\n    }\n  }, [autoDirections, selectedEventId, events, directionsMode, islandCoords]);\n\n  if (eventsLoading || islandsLoading) {\n    return (\n      <div className={`${className} flex items-center justify-center bg-gray-50`}>\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\n          <p className=\"text-gray-600\">Loading map data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`${className} relative`}>\n      {/* Compact mobile navigation */}\n      <div className=\"absolute top-2 left-2 right-2 z-[1000] space-y-2\">\n        {/* Combined event navigation and directions - single compact row */}\n        {events.length > 0 && (\n          <div className=\"flex items-center gap-1 bg-white/95 backdrop-blur-sm border border-white/20 shadow-lg rounded-lg px-2 py-1\">\n            {/* Event navigation */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={navigateToPreviousEvent}\n              disabled={events.length === 0}\n              className=\"h-7 w-7 p-0 hover:bg-gray-100/80\"\n              data-testid=\"button-previous-event\"\n            >\n              <ChevronLeft className=\"w-3 h-3\" />\n            </Button>\n            \n            <div className=\"flex-1 text-center px-1\">\n              {selectedEventId && getCurrentEvent() ? (\n                <span className=\"text-xs font-medium text-blue-600 truncate block\">\n                  {getCurrentEvent()?.title}\n                </span>\n              ) : (\n                <span className=\"text-xs text-gray-500\">All Events</span>\n              )}\n            </div>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={navigateToNextEvent}\n              disabled={events.length === 0}\n              className=\"h-7 w-7 p-0 hover:bg-gray-100/80\"\n              data-testid=\"button-next-event\"\n            >\n              <ChevronRight className=\"w-3 h-3\" />\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={showAllEvents}\n              className=\"text-xs px-2 py-1 h-7 hover:bg-gray-100/80\"\n              data-testid=\"button-show-all-events\"\n            >\n              All\n            </Button>\n            \n            {/* Directions controls in same row */}\n            {selectedEventId && (\n              <>\n                <div className=\"w-px h-4 bg-gray-300 mx-1\"></div>\n                {!directionsMode ? (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={getDirectionsToEvent}\n                    disabled={!userLocation || isLoadingDirections}\n                    className=\"text-xs px-2 py-1 h-7 hover:bg-gray-100/80 flex items-center gap-1\"\n                    data-testid=\"button-get-directions\"\n                  >\n                    <Navigation className=\"w-3 h-3\" />\n                    {isLoadingDirections ? \"...\" : \"Route\"}\n                  </Button>\n                ) : (\n                  <div className=\"flex items-center gap-1\">\n                    <span className=\"text-xs text-green-600 font-medium\">\n                      {routeDistance}\n                    </span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={clearDirections}\n                      className=\"text-xs px-1 py-1 h-7 hover:bg-gray-100/80\"\n                      data-testid=\"button-clear-directions\"\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        )}\n      </div>\n      \n      {/* Search bar and location controls - more compact */}\n      <div className=\"absolute top-16 left-2 right-2 z-[1000] flex gap-2\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-400 w-3 h-3\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search islands...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-7 pr-8 py-1.5 text-sm bg-white/95 backdrop-blur-sm border-white/20 shadow-lg rounded-lg focus:bg-white transition-all h-8\"\n              data-testid=\"input-island-search\"\n            />\n            {searchQuery && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={clearSearch}\n                className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-5 w-5 p-0 hover:bg-gray-100/80\"\n              >\n                <X className=\"w-2.5 h-2.5\" />\n              </Button>\n            )}\n            \n            {/* Search results dropdown */}\n            {showSearchResults && filteredIslands.length > 0 && (\n              <div className=\"absolute top-full left-0 right-0 mt-1 bg-white/95 backdrop-blur-sm border border-white/20 rounded-lg shadow-lg max-h-32 overflow-y-auto z-50\">\n                {filteredIslands.map((island) => (\n                  <button\n                    key={island.id}\n                    onClick={() => selectIsland(island)}\n                    className=\"w-full text-left px-3 py-2 hover:bg-blue-50/80 border-b border-gray-100 last:border-b-0 transition-colors\"\n                    data-testid={`search-result-${island.id}`}\n                  >\n                    <div className=\"text-sm font-medium\">{island.name}</div>\n                    <div className=\"text-xs text-gray-600\">{island.atoll}</div>\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n          \n          <Button\n            onClick={getUserLocation}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white shadow-lg rounded-lg px-2 py-1.5 h-8 text-xs\"\n            data-testid=\"button-my-location\"\n          >\n            <Navigation className=\"w-3 h-3 mr-1\" />\n            Location\n          </Button>\n          \n          <Button\n            onClick={toggleDirectionMode}\n            className={`${\n              isDirectionMode \n                ? 'bg-orange-600 hover:bg-orange-700' \n                : 'bg-gray-600 hover:bg-gray-700'\n            } text-white shadow-lg rounded-lg px-2 py-1.5 h-8 text-xs transition-colors`}\n            data-testid=\"button-direction-mode\"\n            title={isDirectionMode ? \"Disable direction mode\" : \"Enable direction mode - map will rotate based on your movement\"}\n          >\n            <Navigation className={`w-3 h-3 mr-1 transition-transform ${isDirectionMode ? 'rotate-45' : ''}`} />\n            {isDirectionMode ? 'Direction' : 'North Up'}\n          </Button>\n          \n        </div>\n\n        {/* Custom zoom controls positioned below search */}\n        <div className=\"absolute top-28 left-2 z-[1000] flex flex-col gap-1\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => mapRef.current?.zoomIn()}\n            className=\"w-8 h-8 p-0 bg-white/95 backdrop-blur-sm border-white/20 shadow-lg hover:bg-white\"\n            data-testid=\"button-zoom-in\"\n          >\n            +\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => mapRef.current?.zoomOut()}\n            className=\"w-8 h-8 p-0 bg-white/95 backdrop-blur-sm border-white/20 shadow-lg hover:bg-white\"\n            data-testid=\"button-zoom-out\"\n          >\n            −\n          </Button>\n        </div>\n\n        \n      <div className={`${className} w-full`}>\n        <MapContainer\n          center={MALDIVES_CENTER}\n          zoom={DEFAULT_ZOOM}\n          style={{ height: '100%', width: '100%' }}\n          bounds={MALDIVES_BOUNDS}\n          boundsOptions={{ padding: [20, 20] }}\n          maxBounds={MALDIVES_BOUNDS}\n          minZoom={6}\n          maxZoom={18}\n          zoomControl={false}\n            ref={mapRef}\n            whenReady={handleMapReady}\n            data-testid=\"map-container\"\n          >\n            <TileLayer\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n              attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            />\n            \n            <MapController \n              eventId={selectedEventId} \n              events={events} \n              islandCoords={islandCoords}\n              userLocation={userLocation}\n              isZoomLocked={isZoomLocked}\n            />\n            \n            {/* Render user location marker */}\n            {userLocation && (\n              <Marker\n                position={userLocation}\n                icon={createLocationIcon(deviceHeading, isCompassEnabled)}\n                data-testid=\"marker-user-location\"\n              >\n                <Popup>\n                  <div className=\"p-2\">\n                    <h4 className=\"font-semibold\">Your Location</h4>\n                    <p className=\"text-sm text-gray-600\">\n                      Lat: {userLocation[0].toFixed(6)}<br />\n                      Lng: {userLocation[1].toFixed(6)}\n                    </p>\n                  </div>\n                </Popup>\n              </Marker>\n            )}\n            \n            {/* Render event markers */}\n            {events.map((event) => {\n              // Use event's actual coordinates if available, fallback to island coordinates\n              let eventLat, eventLng, eventAtoll;\n              \n              if (event.latitude && event.longitude) {\n                eventLat = parseFloat(event.latitude);\n                eventLng = parseFloat(event.longitude);\n                eventAtoll = event.atoll; // Use event's stored atoll directly\n              } else {\n                const coords = islandCoords[`${event.atoll}_${event.island}`];\n                if (!coords) return null;\n                eventLat = coords.lat;\n                eventLng = coords.lng;\n                eventAtoll = coords.atoll;\n              }\n              \n              if (isNaN(eventLat) || isNaN(eventLng)) return null;\n              \n              return (\n                <Marker\n                  key={`event-${event.id}`}\n                  position={[eventLat, eventLng]}\n                  icon={eventIcon}\n                  eventHandlers={{\n                    click: () => onEventSelect?.(event.id)\n                  }}\n                  data-testid={`marker-event-${event.id}`}\n                >\n                  <Popup>\n                    <div className=\"p-3 min-w-[250px]\">\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <h4 className=\"font-semibold text-lg\">{event.title}</h4>\n                        <Badge \n                          variant=\"outline\" \n                          className={`ml-2 ${getStatusColor(event.status)} text-white`}\n                        >\n                          {event.status}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex items-center text-gray-600\">\n                          <MapPin className=\"w-4 h-4 mr-1\" />\n                          {event.island}, {eventAtoll}\n                        </div>\n                        \n                        <div className=\"flex items-center text-gray-600\">\n                          <Calendar className=\"w-4 h-4 mr-1\" />\n                          {formatEventDate(event.createdAt)}\n                        </div>\n                        \n                        <div className=\"flex items-center text-gray-600\">\n                          <Users className=\"w-4 h-4 mr-1\" />\n                          {event.participantCount} participants\n                        </div>\n                        \n                        {(event.latitude && event.longitude) && (\n                          <div className=\"flex items-center text-gray-600\">\n                            <span className=\"text-xs\">\n                              Lat: {parseFloat(event.latitude).toFixed(4)}, Lng: {parseFloat(event.longitude).toFixed(4)}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                      \n                      {event.comment && (\n                        <p className=\"mt-2 text-sm text-gray-700 border-t pt-2\">\n                          {event.comment}\n                        </p>\n                      )}\n                    </div>\n                  </Popup>\n                </Marker>\n              );\n            })}\n            \n            {/* Enhanced route visualization with gradients and arrows */}\n            {directionsMode && routeCoordinates.length > 0 && (\n              <>\n                {/* Route shadow for depth - render first so gradient sits on top */}\n                <Polyline\n                  positions={routeCoordinates}\n                  pathOptions={{\n                    color: \"#1E40AF\",\n                    weight: 8,\n                    opacity: 0.3,\n                    className: \"route-line-shadow\"\n                  }}\n                />\n                \n                {/* Render gradient route segments */}\n                {routeCoordinates.slice(0, -1).map((coord, index) => {\n                  const nextCoord = routeCoordinates[index + 1];\n                  const progress = index / (routeCoordinates.length - 1);\n                  \n                  // Interpolate color from blue to green based on progress\n                  const startR = 59, startG = 130, startB = 246;  // #3B82F6 (blue)\n                  const endR = 16, endG = 185, endB = 129;        // #10B981 (green)\n                  \n                  const r = Math.round(startR + (endR - startR) * progress);\n                  const g = Math.round(startG + (endG - startG) * progress);\n                  const b = Math.round(startB + (endB - startB) * progress);\n                  const segmentColor = `rgb(${r}, ${g}, ${b})`;\n                  \n                  return (\n                    <Polyline\n                      key={`route-segment-${index}`}\n                      positions={[coord, nextCoord]}\n                      pathOptions={{\n                        color: segmentColor,\n                        weight: 6,\n                        opacity: 0.9,\n                        className: \"route-line-gradient-segment\"\n                      }}\n                    />\n                  );\n                })}\n                \n                {/* Direction arrows along the route */}\n                {routeCoordinates.slice(0, -1).map((coord, index) => {\n                  // Show arrows every 5th coordinate to avoid clutter\n                  if (index % 5 !== 0) return null;\n                  \n                  const nextCoord = routeCoordinates[index + 1];\n                  if (!nextCoord) return null;\n                  \n                  // Calculate bearing for arrow rotation\n                  const bearing = calculateBearing(coord[0], coord[1], nextCoord[0], nextCoord[1]);\n                  \n                  return (\n                    <Marker\n                      key={`route-arrow-${index}`}\n                      position={coord}\n                      icon={new L.DivIcon({\n                        html: `<div class=\"route-direction-arrow\" style=\"--rotation: ${bearing}deg;\">\n                          <span class=\"arrow-glyph\">▲</span>\n                        </div>`,\n                        className: 'route-arrow-icon',\n                        iconSize: [16, 16],\n                        iconAnchor: [8, 8]\n                      })}\n                    />\n                  );\n                })}\n                \n                {/* Route markers for turn points */}\n                {routeInstructions.map((instruction, index) => {\n                  if (index === 0 || index === routeInstructions.length - 1) return null;\n                  const segmentIndex = Math.floor((index / routeInstructions.length) * routeCoordinates.length);\n                  const position = routeCoordinates[segmentIndex];\n                  if (!position) return null;\n                  \n                  return (\n                    <Marker\n                      key={`route-step-${index}`}\n                      position={position}\n                      icon={new L.DivIcon({\n                        html: `<div class=\"route-step-marker\">\n                          <div class=\"route-step-number\">${index + 1}</div>\n                        </div>`,\n                        className: 'route-step-icon',\n                        iconSize: [24, 24],\n                        iconAnchor: [12, 12]\n                      })}\n                    >\n                      <Popup>\n                        <div className=\"p-2\">\n                          <div className=\"font-semibold text-sm\">Step {index + 1}</div>\n                          <div className=\"text-xs text-gray-600 mt-1\">{instruction}</div>\n                        </div>\n                      </Popup>\n                    </Marker>\n                  );\n                })}\n              </>\n            )}\n        </MapContainer>\n      </div>\n      \n      {/* Modern directions panel with slide-up animation */}\n      {directionsMode && routeInstructions.length > 0 && (\n        <ModernDirectionsPanel\n          routeInstructions={routeInstructions}\n          routeDistance={routeDistance}\n          routeDuration={routeDuration}\n          isLoadingDirections={isLoadingDirections}\n          onClose={clearDirections}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":49375},"client/src/components/equipment-transfer-history.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { History, ChevronDown, ChevronUp, ArrowRight, User, Calendar, FileText } from \"lucide-react\";\nimport { type EquipmentTransferWithUser } from \"../../../shared/schema\";\n\ninterface EquipmentTransferHistoryProps {\n  equipmentId: string;\n  equipmentName: string;\n}\n\nexport default function EquipmentTransferHistory({ equipmentId, equipmentName }: EquipmentTransferHistoryProps) {\n  const [isExpanded, setIsExpanded] = useState(true); // Expanded by default\n\n  const { data: transfers = [], isLoading, error } = useQuery<EquipmentTransferWithUser[]>({\n    queryKey: ['/api/equipment/transfers/with-users', equipmentId],\n    queryFn: () => fetch(`/api/equipment/transfers/with-users?equipmentId=${equipmentId}`).then(res => res.json()),\n    // Always fetch data - removed enabled condition\n    staleTime: 30 * 1000, // 30 seconds\n  });\n\n  const formatUserName = (user: EquipmentTransferWithUser['transferredByUser']) => {\n    if (user.firstName && user.lastName) {\n      return `${user.firstName} ${user.lastName}`;\n    }\n    if (user.serviceNumber) {\n      return `Service #${user.serviceNumber}`;\n    }\n    return user.email || \"Unknown User\";\n  };\n\n  const formatDate = (date: string | Date | null) => {\n    if (!date) return \"Unknown Date\";\n    const dateObj = date instanceof Date ? date : new Date(date);\n    return dateObj.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"mt-4 border-l-4 border-blue-500 pl-3 bg-blue-50/30 p-3 rounded-r-md\">\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={() => setIsExpanded(!isExpanded)}\n        className=\"w-full justify-between hover:bg-blue-100/50 font-semibold text-blue-700\"\n        data-testid={`button-toggle-transfer-history-${equipmentId}`}\n      >\n        <div className=\"flex items-center gap-2\">\n          <History className=\"h-5 w-5 text-blue-600\" />\n          <span>Transfer History</span>\n          {!isLoading && transfers.length > 0 && (\n            <Badge variant=\"secondary\" className=\"ml-2 bg-blue-100 text-blue-800\">\n              {transfers.length} movements\n            </Badge>\n          )}\n          {!isLoading && transfers.length === 0 && (\n            <Badge variant=\"outline\" className=\"ml-2 text-gray-500\">\n              No history\n            </Badge>\n          )}\n        </div>\n        {isExpanded ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n      </Button>\n\n      {isExpanded && (\n        <div className=\"mt-3 space-y-3\" data-testid={`transfer-history-${equipmentId}`}>\n          {isLoading && (\n            <div className=\"text-center py-4 text-sm text-muted-foreground\">\n              Loading transfer history...\n            </div>\n          )}\n\n          {error && (\n            <div className=\"text-center py-4 text-sm text-destructive\">\n              Failed to load transfer history\n            </div>\n          )}\n\n          {!isLoading && !error && transfers.length === 0 && (\n            <Card className=\"bg-muted/30\">\n              <CardContent className=\"p-4 text-center\">\n                <History className=\"h-8 w-8 mx-auto text-muted-foreground/50 mb-2\" />\n                <p className=\"text-sm text-muted-foreground\">\n                  No transfer history available for {equipmentName}\n                </p>\n              </CardContent>\n            </Card>\n          )}\n\n          {transfers.length > 0 && (\n            <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n              {transfers.map((transfer, index) => (\n                <Card key={transfer.id} className=\"transition-all hover:shadow-sm\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"space-y-3\">\n                      {/* Transfer header with user info */}\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <User className=\"h-4 w-4 text-blue-600\" />\n                          <div>\n                            <div className=\"font-medium text-sm\" data-testid={`transfer-user-${transfer.id}`}>\n                              {formatUserName(transfer.transferredByUser)}\n                            </div>\n                            {transfer.transferredByUser.serviceNumber && (\n                              <div className=\"text-xs text-muted-foreground\">\n                                Service #{transfer.transferredByUser.serviceNumber}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                          <Calendar className=\"h-3 w-3\" />\n                          <span data-testid={`transfer-date-${transfer.id}`}>\n                            {formatDate(transfer.transferredAt)}\n                          </span>\n                        </div>\n                      </div>\n\n                      <Separator />\n\n                      {/* Transfer details */}\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"font-medium\">Quantity Moved:</span>\n                            <Badge variant=\"outline\" data-testid={`transfer-quantity-${transfer.id}`}>\n                              {transfer.quantityMoved} units\n                            </Badge>\n                          </div>\n                        </div>\n\n                        {/* From/To locations */}\n                        <div className=\"flex items-center gap-3 text-sm\">\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium text-muted-foreground mb-1\">From:</div>\n                            <div data-testid={`transfer-from-${transfer.id}`}>\n                              {transfer.fromAtoll}\n                              {transfer.fromIsland && ` - ${transfer.fromIsland}`}\n                            </div>\n                          </div>\n                          \n                          <ArrowRight className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n                          \n                          <div className=\"flex-1\">\n                            <div className=\"font-medium text-muted-foreground mb-1\">To:</div>\n                            <div data-testid={`transfer-to-${transfer.id}`}>\n                              {transfer.toAtoll}\n                              {transfer.toIsland && ` - ${transfer.toIsland}`}\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Notes if available */}\n                        {transfer.notes && (\n                          <div className=\"mt-3 pt-2 border-t border-muted\">\n                            <div className=\"flex items-start gap-2 text-sm\">\n                              <FileText className=\"h-3 w-3 text-muted-foreground mt-0.5 flex-shrink-0\" />\n                              <div>\n                                <div className=\"font-medium text-muted-foreground mb-1\">Notes:</div>\n                                <div className=\"text-muted-foreground\" data-testid={`transfer-notes-${transfer.id}`}>\n                                  {transfer.notes}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8213},"shared/geolocation-utils.ts":{"content":"/**\n * Utility functions for geolocation calculations\n */\n\n// Configuration constants\nexport const ISLAND_VISITING_DISTANCE_METERS = 500; // Default visiting distance threshold\n\n/**\n * Calculate the distance between two geographic coordinates using the Haversine formula\n * @param lat1 Latitude of first point\n * @param lon1 Longitude of first point  \n * @param lat2 Latitude of second point\n * @param lon2 Longitude of second point\n * @returns Distance in meters\n */\nexport function calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {\n  const R = 6371000; // Earth's radius in meters\n  const dLat = toRadians(lat2 - lat1);\n  const dLon = toRadians(lon2 - lon1);\n  \n  const a = \n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *\n    Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  \n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // Distance in meters\n}\n\n/**\n * Convert degrees to radians\n */\nfunction toRadians(degrees: number): number {\n  return degrees * (Math.PI / 180);\n}\n\n/**\n * Check if a user location is within visiting distance of an island\n */\nexport function isWithinVisitingDistance(\n  userLat: number, \n  userLon: number, \n  islandLat: number, \n  islandLon: number,\n  visitingDistanceMeters: number = ISLAND_VISITING_DISTANCE_METERS\n): boolean {\n  const distance = calculateDistance(userLat, userLon, islandLat, islandLon);\n  return distance <= visitingDistanceMeters;\n}\n\n/**\n * Find all islands within visiting distance of user location\n */\nexport function findNearbyIslands(\n  userLat: number,\n  userLon: number, \n  islands: Array<{id: string, latitude: string | null, longitude: string | null, name: string}>,\n  visitingDistanceMeters: number = ISLAND_VISITING_DISTANCE_METERS\n): Array<{id: string, name: string, distance: number}> {\n  const nearbyIslands: Array<{id: string, name: string, distance: number}> = [];\n  \n  for (const island of islands) {\n    if (!island.latitude || !island.longitude) continue;\n    \n    const islandLat = parseFloat(island.latitude);\n    const islandLon = parseFloat(island.longitude);\n    \n    if (isNaN(islandLat) || isNaN(islandLon)) continue;\n    \n    const distance = calculateDistance(userLat, userLon, islandLat, islandLon);\n    \n    if (distance <= visitingDistanceMeters) {\n      nearbyIslands.push({\n        id: island.id,\n        name: island.name,\n        distance: Math.round(distance)\n      });\n    }\n  }\n  \n  return nearbyIslands.sort((a, b) => a.distance - b.distance);\n}","size_bytes":2546},"client/src/hooks/useLocationTracking.ts":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { useToast } from './use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useAuth } from './useAuth';\n\ninterface LocationResult {\n  nearbyIslands: Array<{id: string, name: string, distance: number}>;\n  newlyVisited: Array<{id: string, name: string}>;\n  message: string;\n}\n\ninterface UseLocationTrackingOptions {\n  enabled?: boolean;\n  checkInterval?: number; // milliseconds\n  trackingRadius?: number; // meters (not used in this hook, handled by backend)\n  showToasts?: boolean;\n}\n\nexport function useLocationTracking(options: UseLocationTrackingOptions = {}) {\n  const { \n    enabled = true, \n    checkInterval = 30000, // 30 seconds\n    showToasts = true \n  } = options;\n  \n  const { toast } = useToast();\n  const { isAuthenticated } = useAuth();\n  \n  const [isTracking, setIsTracking] = useState(false);\n  const [lastLocation, setLastLocation] = useState<{lat: number, lng: number} | null>(null);\n  const [lastCheckTime, setLastCheckTime] = useState<number | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [nearbyIslands, setNearbyIslands] = useState<Array<{id: string, name: string, distance: number}>>([]);\n\n  const checkLocationForIslandVisits = useCallback(async (latitude: number, longitude: number) => {\n    try {\n      setError(null);\n      const response = await apiRequest('POST', '/api/islands/check-location', {\n        latitude, \n        longitude\n      });\n      \n      const result: LocationResult = await response.json();\n\n      setNearbyIslands(result.nearbyIslands);\n      \n      // Show toast for newly visited islands\n      if (showToasts && result.newlyVisited.length > 0) {\n        toast({\n          title: \"🏝️ Island Visited!\",\n          description: result.message,\n          duration: 5000,\n        });\n        \n        // Invalidate islands query to refresh the visited count in dashboard\n        queryClient.invalidateQueries({ queryKey: ['/api/islands'] });\n      }\n      \n      return result;\n    } catch (error: any) {\n      const errorMessage = error.message || 'Failed to check location for island visits';\n      setError(errorMessage);\n      \n      if (showToasts) {\n        toast({\n          title: \"Location Check Failed\",\n          description: errorMessage,\n          variant: \"destructive\",\n        });\n      }\n      \n      throw error;\n    }\n  }, [toast, showToasts]);\n\n  const getCurrentLocationAndCheck = useCallback(async () => {\n    if (!navigator.geolocation || !isAuthenticated) {\n      return;\n    }\n\n    return new Promise<LocationResult | null>((resolve) => {\n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          const { latitude, longitude } = position.coords;\n          const newLocation = { lat: latitude, lng: longitude };\n          \n          try {\n            const result = await checkLocationForIslandVisits(latitude, longitude);\n            setLastLocation(newLocation);\n            setLastCheckTime(Date.now());\n            resolve(result);\n          } catch (error) {\n            resolve(null);\n          }\n        },\n        (error) => {\n          let message = \"Unable to get your location\";\n          if (error.code === error.PERMISSION_DENIED) {\n            message = \"Location permission denied. Please enable location access to track island visits.\";\n          }\n          setError(message);\n          \n          if (showToasts && error.code === error.PERMISSION_DENIED) {\n            toast({\n              title: \"Location Permission Needed\",\n              description: message,\n              variant: \"destructive\",\n            });\n          }\n          resolve(null);\n        },\n        { \n          enableHighAccuracy: true, \n          timeout: 15000, \n          maximumAge: 30000 // Use cached location if it's less than 30 seconds old\n        }\n      );\n    });\n  }, [isAuthenticated, checkLocationForIslandVisits, showToasts, toast]);\n\n  const startTracking = useCallback(() => {\n    if (!enabled || !isAuthenticated) return;\n    \n    setIsTracking(true);\n    setError(null);\n    \n    // Initial check\n    getCurrentLocationAndCheck();\n    \n    // Set up periodic checking\n    const interval = setInterval(() => {\n      getCurrentLocationAndCheck();\n    }, checkInterval);\n    \n    return () => {\n      clearInterval(interval);\n      setIsTracking(false);\n    };\n  }, [enabled, isAuthenticated, getCurrentLocationAndCheck, checkInterval]);\n\n  const stopTracking = useCallback(() => {\n    setIsTracking(false);\n  }, []);\n\n  // Manual check function for immediate location checking\n  const checkNow = useCallback(() => {\n    return getCurrentLocationAndCheck();\n  }, [getCurrentLocationAndCheck]);\n\n  // Auto-start tracking when component mounts and conditions are met\n  useEffect(() => {\n    if (!enabled || !isAuthenticated) return;\n    \n    const cleanup = startTracking();\n    return cleanup;\n  }, [enabled, isAuthenticated, startTracking]);\n\n  return {\n    isTracking,\n    lastLocation,\n    lastCheckTime,\n    error,\n    nearbyIslands,\n    startTracking,\n    stopTracking,\n    checkNow,\n    checkLocationForIslandVisits\n  };\n}","size_bytes":5171},"client/src/components/island-check-in.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { usePermissions } from \"@/hooks/usePermissions\";\nimport { MapPin, CheckCircle, ChevronDown, ChevronUp, Users, Package, Wrench, Search, History, Calendar, Clock } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport type { IslandWithUserVisitStatus, Equipment, IslandVisit } from \"@shared/schema\";\n\ninterface IslandCheckInProps {\n  className?: string;\n}\n\nexport default function IslandCheckIn({ className }: IslandCheckInProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [showEquipmentDialog, setShowEquipmentDialog] = useState(false);\n  const [selectedIslandForCheckIn, setSelectedIslandForCheckIn] = useState<IslandWithUserVisitStatus | null>(null);\n  const [selectedEquipment, setSelectedEquipment] = useState<Set<string>>(new Set());\n  const [selectedAtoll, setSelectedAtoll] = useState<string>(\"\");\n  const [selectedIslandId, setSelectedIslandId] = useState<string>(\"\");\n  const [showVisitHistory, setShowVisitHistory] = useState(false);\n  const { toast } = useToast();\n  const { canCheckInWithEquipment } = usePermissions();\n  const queryClient = useQueryClient();\n\n  // Fetch islands data\n  const { data: islands = [], isLoading } = useQuery<IslandWithUserVisitStatus[]>({\n    queryKey: [\"/api/islands\"],\n  });\n\n  // Fetch equipment data - only available equipment with quantity > 0\n  const { data: equipment = [] } = useQuery<Equipment[]>({\n    queryKey: [\"/api/equipment\"],\n    select: (data) => data.filter((eq: any) => eq.status === \"available\" && eq.quantity > 0),\n  });\n\n  // Fetch visit history for selected island\n  const { data: visitHistory = [], isLoading: isLoadingHistory } = useQuery<Array<IslandVisit & { equipmentUsed: string[] }>>({\n    queryKey: [\"/api/island-visits\", selectedIslandId],\n    queryFn: async () => {\n      if (!selectedIslandId) return [];\n      const response = await fetch(`/api/island-visits?islandId=${selectedIslandId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch visit history');\n      }\n      return response.json();\n    },\n    enabled: !!selectedIslandId,\n  });\n\n  // Check-in mutation\n  const checkInMutation = useMutation({\n    mutationFn: async ({ islandId, equipmentIds }: { islandId: string; equipmentIds: string[] }) => {\n      const response = await apiRequest('POST', `/api/islands/${islandId}/check-in`, { equipmentIds });\n      return response.json();\n    },\n    onSuccess: (result: any) => {\n      // Invalidate both islands and equipment caches to refresh the UI\n      queryClient.invalidateQueries({ queryKey: ['/api/islands'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/equipment'] });\n      \n      // Invalidate milestone caches so badges update immediately\n      queryClient.invalidateQueries({ queryKey: ['/api/milestones'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/milestones/stats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/milestones/history'] });\n      \n      // Invalidate visit history for this island\n      queryClient.invalidateQueries({ queryKey: ['/api/island-visits', selectedIslandForCheckIn?.id] });\n      \n      toast({\n        title: result.alreadyVisited ? \"Already Visited\" : \"Check-in Successful! 🏝️\",\n        description: result.message,\n        variant: result.alreadyVisited ? \"default\" : \"default\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Check-in Failed\",\n        description: error?.message || \"Failed to check in to island\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCheckIn = (island: IslandWithUserVisitStatus) => {\n    setSelectedIslandForCheckIn(island);\n    setSelectedEquipment(new Set());\n    \n    // If user can't check in with equipment (attachment role), proceed directly without equipment selection\n    if (!canCheckInWithEquipment) {\n      checkInMutation.mutate({\n        islandId: island.id,\n        equipmentIds: [] // Empty array for attachment users\n      });\n      setSelectedIslandForCheckIn(null);\n    } else {\n      // Show equipment selection dialog for users who can select equipment\n      setShowEquipmentDialog(true);\n    }\n  };\n\n  const handleConfirmCheckIn = () => {\n    if (!selectedIslandForCheckIn) return;\n\n    const equipmentIds = Array.from(selectedEquipment);\n    checkInMutation.mutate(\n      { \n        islandId: selectedIslandForCheckIn.id, \n        equipmentIds \n      }\n    );\n    \n    setShowEquipmentDialog(false);\n    setSelectedIslandForCheckIn(null);\n    setSelectedEquipment(new Set());\n  };\n\n  const handleCancelCheckIn = () => {\n    setShowEquipmentDialog(false);\n    setSelectedIslandForCheckIn(null);\n    setSelectedEquipment(new Set());\n  };\n\n  const toggleEquipmentSelection = (equipmentId: string) => {\n    const newSelection = new Set(selectedEquipment);\n    if (newSelection.has(equipmentId)) {\n      newSelection.delete(equipmentId);\n    } else {\n      newSelection.add(equipmentId);\n    }\n    setSelectedEquipment(newSelection);\n  };\n\n  // Get unique atolls for dropdown\n  const uniqueAtolls = Array.from(new Set(islands.map(island => island.atoll))).sort();\n  \n  // Get islands for selected atoll\n  const islandsInSelectedAtoll = selectedAtoll \n    ? islands.filter(island => island.atoll === selectedAtoll).sort((a, b) => a.name.localeCompare(b.name))\n    : [];\n  \n  // Get selected island object\n  const selectedIsland = selectedIslandId \n    ? islands.find(island => island.id === selectedIslandId) \n    : null;\n  \n  // Handle atoll selection\n  const handleAtollChange = (atoll: string) => {\n    setSelectedAtoll(atoll);\n    setSelectedIslandId(\"\"); // Clear island selection when atoll changes\n  };\n  \n  // Handle island selection and trigger check-in\n  const handleIslandSelect = (islandId: string) => {\n    setSelectedIslandId(islandId);\n    const island = islands.find(i => i.id === islandId);\n    if (island) {\n      handleCheckIn(island);\n    }\n  };\n  \n  // Group equipment by atoll and island for better organization\n  const groupEquipmentByLocation = (equipmentList: Equipment[]) => {\n    const grouped = equipmentList.reduce((acc, eq) => {\n      const key = eq.island ? `${eq.atoll} - ${eq.island}` : eq.atoll;\n      if (!acc[key]) {\n        acc[key] = [];\n      }\n      acc[key].push(eq);\n      return acc;\n    }, {} as Record<string, Equipment[]>);\n    \n    // Sort locations alphabetically\n    return Object.keys(grouped)\n      .sort()\n      .map(location => ({\n        location,\n        equipment: grouped[location]\n      }));\n  };\n  \n  const equipmentByLocation = groupEquipmentByLocation(equipment);\n\n  if (isLoading) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"p-4\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-4 bg-muted rounded mb-2\"></div>\n            <div className=\"h-4 bg-muted rounded mb-2\"></div>\n            <div className=\"h-4 bg-muted rounded\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <MapPin className=\"h-5 w-5 text-primary\" />\n            Island Check-in\n          </CardTitle>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setIsExpanded(!isExpanded)}\n            data-testid=\"button-toggle-checkin\"\n          >\n            {isExpanded ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n          </Button>\n        </div>\n        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n          <div className=\"flex items-center gap-1\">\n            <MapPin className=\"h-4 w-4 text-blue-600\" />\n            <span>{uniqueAtolls.length} atolls</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Users className=\"h-4 w-4 text-green-600\" />\n            <span>{islands.length} islands</span>\n          </div>\n        </div>\n      </CardHeader>\n\n      {isExpanded && (\n        <CardContent className=\"pt-0\">\n          {/* Dropdown Selection Interface */}\n          <div className=\"space-y-4\">\n            {/* Atoll Selection */}\n            <div className=\"space-y-2\">\n              <label htmlFor=\"atoll-select\" className=\"text-sm font-medium text-muted-foreground\">\n                Select Atoll\n              </label>\n              <Select value={selectedAtoll} onValueChange={handleAtollChange}>\n                <SelectTrigger id=\"atoll-select\" data-testid=\"select-atoll\">\n                  <SelectValue placeholder=\"Choose an atoll...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {uniqueAtolls.map((atoll) => (\n                    <SelectItem key={atoll} value={atoll}>\n                      {atoll.replace(/ atoll$/i, '')}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Island Selection */}\n            <div className=\"space-y-2\">\n              <label htmlFor=\"island-select\" className=\"text-sm font-medium text-muted-foreground\">\n                Select Island\n              </label>\n              <Select \n                value={selectedIslandId} \n                onValueChange={handleIslandSelect}\n                disabled={!selectedAtoll}\n              >\n                <SelectTrigger id=\"island-select\" data-testid=\"select-island\">\n                  <SelectValue placeholder={selectedAtoll ? \"Choose an island...\" : \"Select an atoll first\"} />\n                </SelectTrigger>\n                <SelectContent>\n                  {islandsInSelectedAtoll.map((island) => (\n                    <SelectItem key={island.id} value={island.id}>\n                      {island.name}\n                      {island.hasVisited && (\n                        <span className=\"ml-2 text-xs text-green-600\">\n                          ✓ Visited\n                        </span>\n                      )}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Instructions */}\n            <div className=\"p-3 bg-muted/50 rounded-lg\">\n              <p className=\"text-sm text-muted-foreground\">\n                <strong>Instructions:</strong> Select an atoll first, then choose an island to check in. \n                Islands can be checked into multiple times for repeat visits.\n              </p>\n            </div>\n\n            {/* Selected Island Info */}\n            {selectedIsland && (\n              <div className=\"space-y-3\">\n                <div className=\"p-3 border rounded-lg bg-card\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"font-medium\" data-testid={`text-selected-island-${selectedIsland.id}`}>\n                        {selectedIsland.name}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {selectedIsland.atoll}\n                        {selectedIsland.lastVisited && (\n                          <span className=\"ml-2\">\n                            • Last visited: {new Date(selectedIsland.lastVisited).toLocaleDateString()}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                    {selectedIsland.hasVisited && (\n                      <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700 dark:bg-green-900/50 dark:text-green-300\">\n                        <CheckCircle className=\"h-3 w-3 mr-1\" />\n                        Visited Before\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n\n                {/* Visit History Section */}\n                {selectedIsland.hasVisited && visitHistory.length > 0 && (\n                  <div className=\"border rounded-lg bg-card\">\n                    <Collapsible open={showVisitHistory} onOpenChange={setShowVisitHistory}>\n                      <CollapsibleTrigger asChild>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"w-full p-3 h-auto justify-between text-left hover:bg-muted/50\"\n                          data-testid=\"button-toggle-visit-history\"\n                        >\n                          <div className=\"flex items-center gap-2\">\n                            <History className=\"h-4 w-4 text-primary\" />\n                            <span className=\"font-medium\">Visit History</span>\n                            <Badge variant=\"outline\" className=\"ml-1\">\n                              {visitHistory.length} {visitHistory.length === 1 ? 'visit' : 'visits'}\n                            </Badge>\n                          </div>\n                          {showVisitHistory ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n                        </Button>\n                      </CollapsibleTrigger>\n                      <CollapsibleContent className=\"px-3 pb-3\">\n                        <Separator className=\"mb-3\" />\n                        {isLoadingHistory ? (\n                          <div className=\"text-center py-4\">\n                            <div className=\"animate-pulse\">\n                              <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                              <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                            </div>\n                          </div>\n                        ) : (\n                          <ScrollArea className=\"max-h-48\">\n                            <div className=\"space-y-3\">\n                              {visitHistory.map((visit) => (\n                                <div key={visit.id} className=\"p-3 bg-muted/30 rounded-lg\" data-testid={`visit-${visit.id}`}>\n                                  <div className=\"flex items-start justify-between\">\n                                    <div className=\"flex-1\">\n                                      <div className=\"flex items-center gap-2 mb-1\">\n                                        <Calendar className=\"h-3 w-3 text-muted-foreground\" />\n                                        <span className=\"text-sm font-medium\">\n                                          {visit.visitedAt ? format(new Date(visit.visitedAt), 'MMM dd, yyyy') : 'Unknown date'}\n                                        </span>\n                                        <Clock className=\"h-3 w-3 text-muted-foreground ml-2\" />\n                                        <span className=\"text-xs text-muted-foreground\">\n                                          {visit.visitedAt ? format(new Date(visit.visitedAt), 'h:mm a') : 'Unknown time'}\n                                        </span>\n                                      </div>\n                                      {visit.equipmentUsed && visit.equipmentUsed.length > 0 && (\n                                        <div className=\"mt-2\">\n                                          <div className=\"text-xs text-muted-foreground mb-1\">Equipment brought:</div>\n                                          <div className=\"flex flex-wrap gap-1\">\n                                            {visit.equipmentUsed.map((eq, index) => (\n                                              <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                                <Package className=\"h-2 w-2 mr-1\" />\n                                                {eq}\n                                              </Badge>\n                                            ))}\n                                          </div>\n                                        </div>\n                                      )}\n                                    </div>\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                          </ScrollArea>\n                        )}\n                      </CollapsibleContent>\n                    </Collapsible>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {islands.length === 0 && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <MapPin className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                <p className=\"text-sm\">No islands available</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      )}\n      \n      {/* Equipment Selection Dialog */}\n      <Dialog open={showEquipmentDialog} onOpenChange={setShowEquipmentDialog}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Package className=\"h-5 w-5\" />\n              Select Equipment for Check-in\n            </DialogTitle>\n            <DialogDescription>\n              Choose which equipment you're bringing to {selectedIslandForCheckIn?.name}. \n              You can select multiple items or proceed without equipment.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"py-4\">\n            <ScrollArea className=\"h-72\">\n              <div className=\"space-y-3\">\n                {equipment.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Wrench className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">No equipment available</p>\n                  </div>\n                ) : (\n                  equipmentByLocation.map((locationGroup) => (\n                    <div key={locationGroup.location} className=\"space-y-2\">\n                      <div className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide px-2\">\n                        {locationGroup.location}\n                      </div>\n                      <div className=\"space-y-2 pl-2\">\n                        {locationGroup.equipment.map((eq: any) => (\n                          <div key={eq.id} className=\"flex items-center space-x-3 p-2 rounded-lg border hover:bg-muted/50\">\n                            <Checkbox\n                              id={eq.id}\n                              checked={selectedEquipment.has(eq.id)}\n                              onCheckedChange={() => toggleEquipmentSelection(eq.id)}\n                              data-testid={`checkbox-equipment-${eq.id}`}\n                            />\n                            <div className=\"flex-1\">\n                              <div className=\"font-medium text-sm\" data-testid={`text-equipment-${eq.id}`}>\n                                {eq.name}\n                              </div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                {eq.type} • {eq.condition} • Qty: {eq.quantity}\n                              </div>\n                              {eq.description && (\n                                <div className=\"text-xs text-muted-foreground mt-1\">\n                                  {eq.description}\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </ScrollArea>\n          </div>\n          \n          <div className=\"flex justify-between gap-2\">\n            <Button\n              variant=\"outline\"\n              onClick={handleCancelCheckIn}\n              data-testid=\"button-cancel-checkin\"\n            >\n              Cancel\n            </Button>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"secondary\"\n                onClick={() => {\n                  setSelectedEquipment(new Set());\n                  handleConfirmCheckIn();\n                }}\n                disabled={checkInMutation.isPending}\n                data-testid=\"button-checkin-no-equipment\"\n              >\n                Check In Without Equipment\n              </Button>\n              <Button\n                onClick={handleConfirmCheckIn}\n                disabled={checkInMutation.isPending}\n                data-testid=\"button-confirm-checkin\"\n              >\n                {checkInMutation.isPending ? \"Checking In...\" : `Check In${selectedEquipment.size > 0 ? ` (${selectedEquipment.size} items)` : \"\"}`}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </Card>\n  );\n}","size_bytes":21668},"client/src/components/milestone-badges.tsx":{"content":"import { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { useQuery } from '@tanstack/react-query';\nimport type { UserMilestone } from '@shared/schema';\nimport { Trophy, Target, MapPin, Waves } from 'lucide-react';\n\nexport function MilestoneBadges() {\n  const { data: milestones = [], isLoading } = useQuery<UserMilestone[]>({\n    queryKey: ['/api/milestones'],\n    staleTime: 0, // Always fetch fresh data\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  const { data: stats } = useQuery<{ totalIslands: number; totalVisits: number; uniqueAtolls: number }>({\n    queryKey: ['/api/milestones/stats'],\n    staleTime: 0, // Always fetch fresh data\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Trophy className=\"w-5 h-5 text-yellow-500\" />\n            Milestones & Achievements\n          </CardTitle>\n          <CardDescription>Your exploration progress and badges</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center text-gray-500\">Loading achievements...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Defensive deduplication: Remove duplicates by milestone name, keep highest level\n  const uniqueMilestones = milestones.reduce((acc, current) => {\n    const existing = acc.find(m => m.milestoneName === current.milestoneName && m.milestoneType === current.milestoneType);\n    \n    if (!existing) {\n      acc.push(current);\n    } else {\n      // Keep the one with higher milestone level (more advanced/correct)\n      if (current.milestoneLevel > existing.milestoneLevel) {\n        const index = acc.findIndex(m => m.milestoneName === existing.milestoneName && m.milestoneType === existing.milestoneType);\n        acc[index] = current;\n        console.warn(`Duplicate milestone name detected: ${current.milestoneName}`, {\n          kept: current,\n          discarded: existing\n        });\n      } else {\n        console.warn(`Duplicate milestone name detected: ${current.milestoneName}`, {\n          kept: existing, \n          discarded: current\n        });\n      }\n    }\n    return acc;\n  }, [] as UserMilestone[]);\n\n  // Separate achieved and in-progress milestones, sorted by target value (low to high)\n  const achievedMilestones = uniqueMilestones\n    .filter(m => m.progress >= m.targetValue)\n    .sort((a, b) => a.targetValue - b.targetValue);\n  const inProgressMilestones = uniqueMilestones\n    .filter(m => m.progress < m.targetValue)\n    .sort((a, b) => a.targetValue - b.targetValue);\n\n  return (\n    <Card className=\"data-testid-milestone-badges\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Trophy className=\"w-5 h-5 text-yellow-500\" />\n          Milestones & Achievements\n        </CardTitle>\n        <CardDescription>\n          Your exploration progress and badges\n          {stats && (\n            <span className=\"ml-2 text-sm\">\n              • {stats.totalIslands} islands • {stats.uniqueAtolls} atolls • {stats.totalVisits} visits\n            </span>\n          )}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Achieved Milestones */}\n        {achievedMilestones.length > 0 && (\n          <div>\n            <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n              <Trophy className=\"w-4 h-4 text-yellow-500\" />\n              Earned Badges ({achievedMilestones.length})\n            </h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n              {achievedMilestones.map((milestone) => (\n                <MilestoneBadge\n                  key={milestone.id}\n                  milestone={milestone}\n                  isAchieved={true}\n                  data-testid={`badge-achieved-${milestone.milestoneLevel}`}\n                />\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* In Progress Milestones */}\n        {inProgressMilestones.length > 0 && (\n          <div>\n            <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n              <Target className=\"w-4 h-4 text-blue-500\" />\n              Next Goals ({inProgressMilestones.length})\n            </h4>\n            <div className=\"space-y-3\">\n              {inProgressMilestones.slice(0, 5).map((milestone) => (\n                <MilestoneBadge\n                  key={milestone.id}\n                  milestone={milestone}\n                  isAchieved={false}\n                  data-testid={`badge-progress-${milestone.milestoneLevel}`}\n                />\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* No milestones message */}\n        {milestones.length === 0 && (\n          <div className=\"text-center py-8 text-gray-500\">\n            <MapPin className=\"w-12 h-12 mx-auto mb-3 text-gray-300\" />\n            <p className=\"text-lg font-medium\">Start Your Journey!</p>\n            <p className=\"text-sm\">Check in to your first island to earn your first milestone badge.</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface MilestoneBadgeProps {\n  milestone: UserMilestone;\n  isAchieved: boolean;\n  className?: string;\n  'data-testid'?: string;\n}\n\nfunction MilestoneBadge({ milestone, isAchieved, className = '', ...props }: MilestoneBadgeProps) {\n  const progressPercentage = Math.min((milestone.progress / milestone.targetValue) * 100, 100);\n  \n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'island_visits':\n        return <MapPin className=\"w-4 h-4\" />;\n      case 'atolls_visited':\n        return <Waves className=\"w-4 h-4\" />;\n      default:\n        return <Target className=\"w-4 h-4\" />;\n    }\n  };\n\n  if (isAchieved) {\n    return (\n      <div\n        className={`relative p-4 rounded-lg border-2 bg-gradient-to-br from-white to-gray-50 shadow-sm hover:shadow-md transition-shadow ${className}`}\n        style={{ borderColor: milestone.badgeColor }}\n        {...props}\n      >\n        <div className=\"flex items-start gap-3\">\n          <div \n            className=\"flex-shrink-0 w-12 h-12 rounded-full flex items-center justify-center text-white text-xl shadow-lg\"\n            style={{ backgroundColor: milestone.badgeColor }}\n          >\n            {milestone.badgeIcon}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <h5 className=\"font-semibold text-sm truncate\">{milestone.milestoneName}</h5>\n              <Badge variant=\"default\" className=\"text-xs px-2 py-0.5\" style={{ backgroundColor: milestone.badgeColor }}>\n                ✓ Level {milestone.milestoneLevel}\n              </Badge>\n            </div>\n            <p className=\"text-xs text-gray-600 mb-2\">{milestone.description}</p>\n            <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n              {getTypeIcon(milestone.milestoneType)}\n              <span className=\"font-medium\">{milestone.progress}/{milestone.targetValue}</span>\n              <span>Completed!</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={`p-4 rounded-lg border border-gray-200 bg-white hover:bg-gray-50 transition-colors ${className}`}\n      {...props}\n    >\n      <div className=\"flex items-start gap-3\">\n        <div className=\"flex-shrink-0 w-10 h-10 rounded-full bg-gray-100 flex items-center justify-center text-gray-400\">\n          {milestone.badgeIcon}\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2 mb-1\">\n            <h5 className=\"font-semibold text-sm text-gray-700 truncate\">{milestone.milestoneName}</h5>\n            <Badge variant=\"outline\" className=\"text-xs px-2 py-0.5\">\n              Level {milestone.milestoneLevel}\n            </Badge>\n          </div>\n          <p className=\"text-xs text-gray-600 mb-3\">{milestone.description}</p>\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between text-xs\">\n              <div className=\"flex items-center gap-1 text-gray-500\">\n                {getTypeIcon(milestone.milestoneType)}\n                <span>{milestone.progress}/{milestone.targetValue}</span>\n              </div>\n              <span className=\"font-medium text-gray-700\">{progressPercentage.toFixed(0)}%</span>\n            </div>\n            <Progress value={progressPercentage} className=\"h-2\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport function MilestoneQuickStats() {\n  const { data: stats, isLoading } = useQuery<{ totalIslands: number; totalVisits: number; uniqueAtolls: number }>({\n    queryKey: ['/api/milestones/stats'],\n    staleTime: 0, // Always fetch fresh data\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  const { data: milestones = [] } = useQuery<UserMilestone[]>({\n    queryKey: ['/api/milestones'],\n    staleTime: 0, // Always fetch fresh data\n    refetchOnMount: true,\n    refetchOnWindowFocus: true,\n  });\n\n  if (isLoading || !stats) {\n    return (\n      <div className=\"flex gap-4\">\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-gray-300\">-</div>\n          <div className=\"text-xs text-gray-500\">Islands</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-gray-300\">-</div>\n          <div className=\"text-xs text-gray-500\">Atolls</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-gray-300\">-</div>\n          <div className=\"text-xs text-gray-500\">Badges</div>\n        </div>\n      </div>\n    );\n  }\n\n  const achievedMilestones = milestones.filter(m => m.progress >= m.targetValue);\n\n  return (\n    <div className=\"flex gap-4\" data-testid=\"milestone-quick-stats\">\n      <div className=\"text-center\">\n        <div className=\"text-2xl font-bold text-blue-600\">{stats.totalIslands}</div>\n        <div className=\"text-xs text-gray-500\">Islands</div>\n      </div>\n      <div className=\"text-center\">\n        <div className=\"text-2xl font-bold text-emerald-600\">{stats.uniqueAtolls}</div>\n        <div className=\"text-xs text-gray-500\">Atolls</div>\n      </div>\n      <div className=\"text-center\">\n        <div className=\"text-2xl font-bold text-yellow-600\">{achievedMilestones.length}</div>\n        <div className=\"text-xs text-gray-500\">Badges</div>\n      </div>\n    </div>\n  );\n}","size_bytes":10700},"shared/permissions.ts":{"content":"export type UserRole = 'attachment' | 'agent' | 'coordinator' | 'admin';\n\nexport const ROLES: Record<string, UserRole> = {\n  ATTACHMENT: 'attachment',\n  AGENT: 'agent', \n  COORDINATOR: 'coordinator',\n  ADMIN: 'admin'\n} as const;\n\nexport interface Permission {\n  viewMap: boolean;\n  viewEvents: boolean;\n  editEvents: boolean;\n  viewMembers: boolean;\n  editMembers: boolean;\n  viewEquipment: boolean;\n  editEquipment: boolean;\n  transferEquipment: boolean;\n  checkInWithEquipment: boolean;\n  checkInBasic: boolean;\n  accessAdminPanel: boolean;\n}\n\nexport const ROLE_PERMISSIONS: Record<UserRole, Permission> = {\n  attachment: {\n    viewMap: true,\n    viewEvents: true,\n    editEvents: false,\n    viewMembers: true,\n    editMembers: false,\n    viewEquipment: false,\n    editEquipment: false,\n    transferEquipment: false,\n    checkInWithEquipment: false,\n    checkInBasic: true,\n    accessAdminPanel: false,\n  },\n  agent: {\n    viewMap: true,\n    viewEvents: true,\n    editEvents: false,\n    viewMembers: true,\n    editMembers: false,\n    viewEquipment: true,\n    editEquipment: true,\n    transferEquipment: true,\n    checkInWithEquipment: true,\n    checkInBasic: true,\n    accessAdminPanel: false,\n  },\n  coordinator: {\n    viewMap: true,\n    viewEvents: true,\n    editEvents: true,\n    viewMembers: true,\n    editMembers: true,\n    viewEquipment: true,\n    editEquipment: true,\n    transferEquipment: true,\n    checkInWithEquipment: true,\n    checkInBasic: true,\n    accessAdminPanel: false,\n  },\n  admin: {\n    viewMap: true,\n    viewEvents: true,\n    editEvents: true,\n    viewMembers: true,\n    editMembers: true,\n    viewEquipment: true,\n    editEquipment: true,\n    transferEquipment: true,\n    checkInWithEquipment: true,\n    checkInBasic: true,\n    accessAdminPanel: true,\n  },\n};\n\nexport function hasPermission(userRole: UserRole | undefined, permission: keyof Permission): boolean {\n  if (!userRole) return false;\n  return ROLE_PERMISSIONS[userRole]?.[permission] ?? false;\n}\n\nexport function canAccessRoute(userRole: UserRole | undefined, route: string): boolean {\n  if (!userRole) return false;\n  \n  const permissions = ROLE_PERMISSIONS[userRole];\n  \n  switch (route) {\n    case '/map':\n      return permissions.viewMap;\n    case '/events':\n      return permissions.viewEvents;\n    case '/members':\n      return permissions.viewMembers;\n    case '/equipment':\n      return permissions.viewEquipment;\n    case '/admin':\n      return permissions.accessAdminPanel;\n    default:\n      return true; // Allow access to other routes like dashboard\n  }\n}\n\nexport function getRoleDisplayName(role: UserRole): string {\n  switch (role) {\n    case 'attachment':\n      return 'Attachment';\n    case 'agent':\n      return 'Agent';\n    case 'coordinator':\n      return 'Coordinator';\n    case 'admin':\n      return 'Administrator';\n    default:\n      return 'Unknown';\n  }\n}\n\nexport function getRoleColor(role: UserRole): string {\n  switch (role) {\n    case 'attachment':\n      return 'text-gray-600 bg-gray-100';\n    case 'agent':\n      return 'text-blue-600 bg-blue-100';\n    case 'coordinator':\n      return 'text-green-600 bg-green-100';\n    case 'admin':\n      return 'text-red-600 bg-red-100';\n    default:\n      return 'text-gray-600 bg-gray-100';\n  }\n}","size_bytes":3255},"client/src/components/PermissionGuard.tsx":{"content":"import { ReactNode } from 'react';\nimport { usePermissions, useConditionalRender, PermissionGuardProps, RoleGuardProps } from '@/hooks/usePermissions';\nimport { UserRole } from '@shared/permissions';\n\n// Component wrapper for permission-based rendering\nexport function PermissionGuard({ permission, fallback = null, children }: PermissionGuardProps) {\n  const canRender = useConditionalRender(permission);\n  \n  if (!canRender) {\n    return <>{fallback}</>;\n  }\n  \n  return <>{children}</>;\n}\n\n// Role-based component wrapper\nexport function RoleGuard({ allowedRoles, fallback = null, children }: RoleGuardProps) {\n  const { userRole, isLoading } = usePermissions();\n  \n  if (isLoading) {\n    return <>{fallback}</>;\n  }\n  \n  if (!userRole || !allowedRoles.includes(userRole)) {\n    return <>{fallback}</>;\n  }\n  \n  return <>{children}</>;\n}\n\n// Convenience components for specific roles\ninterface AdminOnlyProps {\n  fallback?: ReactNode;\n  children: ReactNode;\n}\n\nexport function AdminOnly({ fallback = null, children }: AdminOnlyProps) {\n  return (\n    <RoleGuard allowedRoles={['admin']} fallback={fallback}>\n      {children}\n    </RoleGuard>\n  );\n}\n\ninterface CoordinatorPlusProps {\n  fallback?: ReactNode;\n  children: ReactNode;\n}\n\nexport function CoordinatorPlus({ fallback = null, children }: CoordinatorPlusProps) {\n  return (\n    <RoleGuard allowedRoles={['coordinator', 'admin']} fallback={fallback}>\n      {children}\n    </RoleGuard>\n  );\n}\n\ninterface AgentPlusProps {\n  fallback?: ReactNode;\n  children: ReactNode;\n}\n\nexport function AgentPlus({ fallback = null, children }: AgentPlusProps) {\n  return (\n    <RoleGuard allowedRoles={['agent', 'coordinator', 'admin']} fallback={fallback}>\n      {children}\n    </RoleGuard>\n  );\n}\n\ninterface NoAttachmentProps {\n  fallback?: ReactNode;\n  children: ReactNode;\n}\n\nexport function NoAttachment({ fallback = null, children }: NoAttachmentProps) {\n  return (\n    <RoleGuard allowedRoles={['agent', 'coordinator', 'admin']} fallback={fallback}>\n      {children}\n    </RoleGuard>\n  );\n}","size_bytes":2039},"client/src/hooks/usePermissions.ts":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { hasPermission, canAccessRoute, UserRole, Permission } from '@shared/permissions';\nimport { ReactNode } from 'react';\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: UserRole;\n  profileImageUrl?: string;\n  serviceNumber?: string;\n  mobile?: string;\n  isActive: boolean;\n  approvalStatus: string;\n}\n\nexport function usePermissions() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: ['/api/auth/user'],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const userRole = user?.role;\n\n  const checkPermission = (permission: keyof Permission): boolean => {\n    return hasPermission(userRole, permission);\n  };\n\n  const checkRouteAccess = (route: string): boolean => {\n    return canAccessRoute(userRole, route);\n  };\n\n  return {\n    user,\n    userRole,\n    isLoading,\n    \n    // Permission checkers\n    canViewMap: checkPermission('viewMap'),\n    canViewEvents: checkPermission('viewEvents'),\n    canEditEvents: checkPermission('editEvents'),\n    canViewMembers: checkPermission('viewMembers'),\n    canEditMembers: checkPermission('editMembers'),\n    canViewEquipment: checkPermission('viewEquipment'),\n    canEditEquipment: checkPermission('editEquipment'),\n    canTransferEquipment: checkPermission('transferEquipment'),\n    canCheckInWithEquipment: checkPermission('checkInWithEquipment'),\n    canCheckInBasic: checkPermission('checkInBasic'),\n    canAccessAdminPanel: checkPermission('accessAdminPanel'),\n    \n    // General permission checker\n    hasPermission: checkPermission,\n    \n    // Route access checker\n    canAccessRoute: checkRouteAccess,\n  };\n}\n\n// Hook for conditional rendering based on permissions\nexport function useConditionalRender(permission: keyof Permission) {\n  const { hasPermission } = usePermissions();\n  return hasPermission(permission);\n}\n\n// Hook for checking multiple permissions at once\nexport function useMultiplePermissions(permissions: (keyof Permission)[]) {\n  const { hasPermission } = usePermissions();\n  \n  return {\n    hasAll: permissions.every(permission => hasPermission(permission)),\n    hasAny: permissions.some(permission => hasPermission(permission)),\n    permissions: permissions.reduce((acc, permission) => {\n      acc[permission] = hasPermission(permission);\n      return acc;\n    }, {} as Record<keyof Permission, boolean>),\n  };\n}\n\n// Export types for component usage\nexport interface PermissionGuardProps {\n  permission: keyof Permission;\n  fallback?: ReactNode;\n  children: ReactNode;\n}\n\nexport interface RoleGuardProps {\n  allowedRoles: UserRole[];\n  fallback?: ReactNode;\n  children: ReactNode;\n}","size_bytes":2680},"client/src/lib/userDisplayUtils.ts":{"content":"// Utility functions for handling user name display consistently across the application\n\nexport interface UserDisplayInfo {\n  displayName: string;\n  initials: string;\n}\n\n/**\n * Safely generates display name and initials for any user object\n * Handles cases where firstName, lastName, or email might be missing\n */\nexport const getUserDisplayInfo = (user: any): UserDisplayInfo => {\n  if (!user) {\n    return { displayName: 'Unknown User', initials: 'UU' };\n  }\n\n  const firstName = user.firstName?.trim() || '';\n  const lastName = user.lastName?.trim() || '';\n  const email = user.email?.trim() || '';\n  \n  // Generate display name with fallbacks\n  let displayName = '';\n  if (firstName && lastName) {\n    displayName = `${firstName} ${lastName}`;\n  } else if (firstName) {\n    displayName = firstName;\n  } else if (lastName) {\n    displayName = lastName;\n  } else if (email) {\n    // Use email username as fallback\n    displayName = email.split('@')[0];\n  } else {\n    displayName = 'Unnamed Member';\n  }\n  \n  // Generate initials with fallbacks\n  let initials = '';\n  if (firstName && lastName) {\n    initials = firstName[0].toUpperCase() + lastName[0].toUpperCase();\n  } else if (firstName) {\n    initials = firstName.substring(0, 2).toUpperCase();\n  } else if (lastName) {\n    initials = lastName.substring(0, 2).toUpperCase();\n  } else if (email) {\n    const emailUser = email.split('@')[0];\n    initials = emailUser.substring(0, 2).toUpperCase();\n  } else {\n    initials = 'UM'; // Unnamed Member\n  }\n  \n  return { displayName, initials };\n};\n\n/**\n * Quick helper to get just the display name\n */\nexport const getDisplayName = (user: any): string => {\n  return getUserDisplayInfo(user).displayName;\n};\n\n/**\n * Quick helper to get just the initials  \n */\nexport const getInitials = (user: any): string => {\n  return getUserDisplayInfo(user).initials;\n};","size_bytes":1858},"client/src/components/ModernDirectionsPanel.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, Navigation, Clock, MapPin, ArrowLeft, ArrowRight, ArrowUp, RotateCcw, ChevronDown, ChevronUp } from \"lucide-react\";\n\ninterface ModernDirectionsPanelProps {\n  routeInstructions: string[];\n  routeDistance: string;\n  routeDuration: string;\n  isLoadingDirections: boolean;\n  onClose: () => void;\n}\n\nconst getDirectionIcon = (instruction: string) => {\n  const lower = instruction.toLowerCase();\n  if (lower.includes('left')) return <ArrowLeft className=\"w-4 h-4\" />;\n  if (lower.includes('right')) return <ArrowRight className=\"w-4 h-4\" />;\n  if (lower.includes('straight') || lower.includes('continue')) return <ArrowUp className=\"w-4 h-4\" />;\n  if (lower.includes('u-turn') || lower.includes('turn around')) return <RotateCcw className=\"w-4 h-4\" />;\n  if (lower.includes('arrive')) return <MapPin className=\"w-4 h-4\" />;\n  return <Navigation className=\"w-4 h-4\" />;\n};\n\nconst getInstructionColor = (instruction: string) => {\n  const lower = instruction.toLowerCase();\n  if (lower.includes('arrive')) return 'text-green-600 bg-green-50';\n  if (lower.includes('turn') || lower.includes('left') || lower.includes('right')) return 'text-orange-600 bg-orange-50';\n  return 'text-blue-600 bg-blue-50';\n};\n\nexport default function ModernDirectionsPanel({\n  routeInstructions,\n  routeDistance,\n  routeDuration,\n  isLoadingDirections,\n  onClose\n}: ModernDirectionsPanelProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0);\n\n  if (isLoadingDirections) {\n    return (\n      <div className=\"absolute bottom-2 left-2 right-2 bg-white/95 backdrop-blur-sm border border-white/20 shadow-lg rounded-lg p-4 z-[1000]\">\n        <div className=\"flex items-center justify-center gap-2\">\n          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\n          <span className=\"text-sm text-gray-600\">Calculating route...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"absolute bottom-2 left-2 right-2 bg-white/95 backdrop-blur-sm border border-white/20 shadow-lg rounded-lg z-[1000] overflow-hidden directions-slide-up\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-3 border-b border-gray-100\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n            <Navigation className=\"w-4 h-4 text-white\" />\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-sm text-gray-900\">Navigation</h3>\n            <div className=\"flex items-center gap-2 text-xs text-gray-600\">\n              <span className=\"flex items-center gap-1\">\n                <MapPin className=\"w-3 h-3\" />\n                {routeDistance}\n              </span>\n              <span className=\"flex items-center gap-1\">\n                <Clock className=\"w-3 h-3\" />\n                {routeDuration}\n              </span>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-1\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setIsExpanded(!isExpanded)}\n            className=\"h-7 w-7 p-0 hover:bg-gray-100/80\"\n            data-testid=\"button-toggle-directions\"\n          >\n            {isExpanded ? <ChevronDown className=\"w-3 h-3\" /> : <ChevronUp className=\"w-3 h-3\" />}\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            className=\"h-7 w-7 p-0 hover:bg-gray-100/80\"\n            data-testid=\"button-close-directions\"\n          >\n            <X className=\"w-3 h-3\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Quick view - first instruction */}\n      {!isExpanded && routeInstructions.length > 0 && (\n        <div className=\"p-3\">\n          <div className=\"flex items-start gap-3\">\n            <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${getInstructionColor(routeInstructions[currentStep])}`}>\n              {getDirectionIcon(routeInstructions[currentStep])}\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"text-sm font-medium text-gray-900 mb-1\">\n                Step {currentStep + 1} of {routeInstructions.length}\n              </div>\n              <div className=\"text-sm text-gray-700\">\n                {routeInstructions[currentStep]}\n              </div>\n            </div>\n          </div>\n          \n          {/* Step navigation */}\n          {routeInstructions.length > 1 && (\n            <div className=\"flex items-center justify-between mt-3\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentStep(Math.max(0, currentStep - 1))}\n                disabled={currentStep === 0}\n                className=\"h-7 px-2\"\n                data-testid=\"button-prev-step\"\n              >\n                <ArrowLeft className=\"w-3 h-3 mr-1\" />\n                Prev\n              </Button>\n              \n              <div className=\"flex items-center gap-1\">\n                {routeInstructions.slice(0, 5).map((_, index) => (\n                  <div\n                    key={index}\n                    className={`w-2 h-2 rounded-full transition-colors ${\n                      index === currentStep ? 'bg-blue-600' : \n                      index < currentStep ? 'bg-green-500' : 'bg-gray-300'\n                    }`}\n                  />\n                ))}\n                {routeInstructions.length > 5 && (\n                  <span className=\"text-xs text-gray-500 ml-1\">\n                    +{routeInstructions.length - 5}\n                  </span>\n                )}\n              </div>\n              \n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentStep(Math.min(routeInstructions.length - 1, currentStep + 1))}\n                disabled={currentStep === routeInstructions.length - 1}\n                className=\"h-7 px-2\"\n                data-testid=\"button-next-step\"\n              >\n                Next\n                <ArrowRight className=\"w-3 h-3 ml-1\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Expanded view - all instructions */}\n      {isExpanded && (\n        <div className=\"max-h-64 overflow-y-auto\">\n          <div className=\"space-y-2 p-3\">\n            {routeInstructions.map((instruction, index) => (\n              <div\n                key={index}\n                className={`flex items-start gap-3 p-2 rounded-lg transition-colors ${\n                  index === currentStep ? 'bg-blue-50 border border-blue-200' : \n                  index < currentStep ? 'bg-green-50' : 'hover:bg-gray-50'\n                }`}\n                onClick={() => setCurrentStep(index)}\n                data-testid={`direction-step-${index}`}\n              >\n                <div className={`w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0 ${getInstructionColor(instruction)}`}>\n                  {getDirectionIcon(instruction)}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <span className=\"text-xs font-medium text-gray-500\">\n                      Step {index + 1}\n                    </span>\n                    {index === currentStep && (\n                      <span className=\"text-xs px-2 py-0.5 bg-blue-600 text-white rounded-full\">\n                        Current\n                      </span>\n                    )}\n                    {index < currentStep && (\n                      <span className=\"text-xs px-2 py-0.5 bg-green-600 text-white rounded-full\">\n                        Done\n                      </span>\n                    )}\n                  </div>\n                  <div className=\"text-sm text-gray-700\">\n                    {instruction}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8214}},"version":1}